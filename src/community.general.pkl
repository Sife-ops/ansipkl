module community.general

import "./playbook.pkl"

//

class aerospike_migrations_options {
    
    
    connect_timeout: Int?
    
    
    
    consecutive_good_checks: Int?
    
    
    
    fail_on_cluster_change: Boolean?
    
    
    
    host: String?
    
    
    
    local_only: Boolean
    
    
    
    migrate_rx_key: String?
    
    
    
    migrate_tx_key: String?
    
    
    
    min_cluster_size: Int?
    
    
    
    port: Int?
    
    
    
    sleep_between_checks: Int?
    
    
    
    target_cluster_size: Int?
    
    
    
    tries_limit: Int?
    
    
}

class aerospike_migrations extends playbook.task {
    hidden options: aerospike_migrations_options

    `community.general.aerospike_migrations`: aerospike_migrations_options?

    function into(): aerospike_migrations = this
        .toMap()
        .put("community.general.aerospike_migrations", this.options)
        .toTyped(aerospike_migrations)
}

//

class airbrake_deployment_options {
    
    
    environment: String
    
    
    
    project_id: String
    
    
    
    project_key: String
    
    
    
    repo: String?
    
    
    
    revision: String?
    
    
    
    url: String?
    
    
    
    user: String?
    
    
    
    validate_certs: Boolean?
    
    
    
    version: String?
    
    
}

class airbrake_deployment extends playbook.task {
    hidden options: airbrake_deployment_options

    `community.general.airbrake_deployment`: airbrake_deployment_options?

    function into(): airbrake_deployment = this
        .toMap()
        .put("community.general.airbrake_deployment", this.options)
        .toTyped(airbrake_deployment)
}

//

class aix_devices_options {
    
    
    attributes: String?
    
    
    
    device: String?
    
    
    
    force: Boolean?
    
    
    
    recursive: Boolean?
    
    
    
    state: ("available"|"defined"|"removed")?
    
    
}

class aix_devices extends playbook.task {
    hidden options: aix_devices_options

    `community.general.aix_devices`: aix_devices_options?

    function into(): aix_devices = this
        .toMap()
        .put("community.general.aix_devices", this.options)
        .toTyped(aix_devices)
}

//

class aix_filesystem_options {
    
    
    account_subsystem: Boolean?
    
    
    
    attributes: Listing<String>?
    
    
    
    auto_mount: Boolean?
    
    
    
    device: String?
    
    
    
    filesystem: String
    
    
    
    fs_type: String?
    
    
    
    mount_group: String?
    
    
    
    nfs_server: String?
    
    
    
    permissions: ("ro"|"rw")?
    
    
    
    rm_mount_point: Boolean?
    
    
    
    size: String?
    
    
    
    state: ("absent"|"mounted"|"present"|"unmounted")?
    
    
    
    vg: String?
    
    
}

class aix_filesystem extends playbook.task {
    hidden options: aix_filesystem_options

    `community.general.aix_filesystem`: aix_filesystem_options?

    function into(): aix_filesystem = this
        .toMap()
        .put("community.general.aix_filesystem", this.options)
        .toTyped(aix_filesystem)
}

//

class aix_inittab_options {
    
    
    action: ("boot"|"bootwait"|"hold"|"initdefault"|"off"|"once"|"ondemand"|"powerfail"|"powerwait"|"respawn"|"sysinit"|"wait")?
    
    
    
    command: String
    
    
    
    insertafter: String?
    
    
    
    name: String
    
    
    
    runlevel: String
    
    
    
    state: ("absent"|"present")?
    
    
}

class aix_inittab extends playbook.task {
    hidden options: aix_inittab_options

    `community.general.aix_inittab`: aix_inittab_options?

    function into(): aix_inittab = this
        .toMap()
        .put("community.general.aix_inittab", this.options)
        .toTyped(aix_inittab)
}

//

class aix_lvg_options {
    
    
    force: Boolean?
    
    
    
    pp_size: Int?
    
    
    
    pvs: Listing<String>?
    
    
    
    state: ("absent"|"present"|"varyoff"|"varyon")?
    
    
    
    vg: String
    
    
    
    vg_type: ("big"|"normal"|"scalable")?
    
    
}

class aix_lvg extends playbook.task {
    hidden options: aix_lvg_options

    `community.general.aix_lvg`: aix_lvg_options?

    function into(): aix_lvg = this
        .toMap()
        .put("community.general.aix_lvg", this.options)
        .toTyped(aix_lvg)
}

//

class aix_lvol_options {
    
    
    copies: Int?
    
    
    
    lv: String
    
    
    
    lv_type: String?
    
    
    
    opts: String?
    
    
    
    policy: ("maximum"|"minimum")?
    
    
    
    pvs: Listing<String>?
    
    
    
    size: String?
    
    
    
    state: ("absent"|"present")?
    
    
    
    vg: String
    
    
}

class aix_lvol extends playbook.task {
    hidden options: aix_lvol_options

    `community.general.aix_lvol`: aix_lvol_options?

    function into(): aix_lvol = this
        .toMap()
        .put("community.general.aix_lvol", this.options)
        .toTyped(aix_lvol)
}

//

class alerta_customer_options {
    
    
    alerta_url: String
    
    
    
    api_key: String?
    
    
    
    api_password: String?
    
    
    
    api_username: String?
    
    
    
    customer: String
    
    
    
    match: String
    
    
    
    state: ("absent"|"present")?
    
    
}

class alerta_customer extends playbook.task {
    hidden options: alerta_customer_options

    `community.general.alerta_customer`: alerta_customer_options?

    function into(): alerta_customer = this
        .toMap()
        .put("community.general.alerta_customer", this.options)
        .toTyped(alerta_customer)
}

//

class ali_instance_options {
    
    
    allocate_public_ip: Boolean?
    
    
    
    auto_renew: Boolean?
    
    
    
    auto_renew_period: Int?
    
    
    
    availability_zone: String?
    
    
    
    count: Int?
    
    
    
    count_tag: String?
    
    
    
    description: String?
    
    
    
    dry_run: Boolean?
    
    
    
    force: Boolean?
    
    
    
    host_name: String?
    
    
    
    image_id: String?
    
    
    
    include_data_disks: Boolean?
    
    
    
    instance_charge_type: ("PrePaid"|"PostPaid")?
    
    
    
    instance_ids: Listing<String>?
    
    
    
    instance_name: String?
    
    
    
    instance_type: String?
    
    
    
    internet_charge_type: ("PayByBandwidth"|"PayByTraffic")?
    
    
    
    key_name: String?
    
    
    
    max_bandwidth_in: Int?
    
    
    
    max_bandwidth_out: Int?
    
    
    
    password: String?
    
    
    
    period: Int?
    
    
    
    period_unit: ("Month"|"Week")?
    
    
    
    purge_tags: Boolean?
    
    
    
    ram_role_name: String?
    
    
    
    security_groups: Listing<String>?
    
    
    
    spot_price_limit: String?
    
    
    
    spot_strategy: ("NoSpot"|"SpotWithPriceLimit"|"SpotAsPriceGo")?
    
    
    
    state: ("present"|"running"|"stopped"|"restarted"|"absent")?
    
    
    
    system_disk_category: ("cloud_efficiency"|"cloud_ssd")?
    
    
    
    system_disk_description: String?
    
    
    
    system_disk_name: String?
    
    
    
    system_disk_size: Int?
    
    
    
    tags: String?
    
    
    
    unique_suffix: Boolean?
    
    
    
    user_data: String?
    
    
    
    vswitch_id: String?
    
    
}

class ali_instance extends playbook.task {
    hidden options: ali_instance_options

    `community.general.ali_instance`: ali_instance_options?

    function into(): ali_instance = this
        .toMap()
        .put("community.general.ali_instance", this.options)
        .toTyped(ali_instance)
}

//

class ali_instance_info_options {
    
    
    filters: String?
    
    
    
    name_prefix: String?
    
    
    
    tags: String?
    
    
}

class ali_instance_info extends playbook.task {
    hidden options: ali_instance_info_options

    `community.general.ali_instance_info`: ali_instance_info_options?

    function into(): ali_instance_info = this
        .toMap()
        .put("community.general.ali_instance_info", this.options)
        .toTyped(ali_instance_info)
}

//

class alternatives_options {
    
    
    link: String?
    
    
    
    name: String
    
    
    
    path: String
    
    
    
    priority: Int?
    
    
    
    state: ("present"|"selected"|"auto"|"absent")?
    
    
    
    subcommands: Listing<String>?
    
    
}

class alternatives extends playbook.task {
    hidden options: alternatives_options

    `community.general.alternatives`: alternatives_options?

    function into(): alternatives = this
        .toMap()
        .put("community.general.alternatives", this.options)
        .toTyped(alternatives)
}

//

class ansible_galaxy_install_options {
    
    
    ack_ansible29: Boolean?
    
    
    
    ack_min_ansiblecore211: Boolean?
    
    
    
    dest: String?
    
    
    
    force: Boolean?
    
    
    
    name: String?
    
    
    
    no_deps: Boolean?
    
    
    
    requirements_file: String?
    
    
    
    type: ("collection"|"role"|"both")
    
    
}

class ansible_galaxy_install extends playbook.task {
    hidden options: ansible_galaxy_install_options

    `community.general.ansible_galaxy_install`: ansible_galaxy_install_options?

    function into(): ansible_galaxy_install = this
        .toMap()
        .put("community.general.ansible_galaxy_install", this.options)
        .toTyped(ansible_galaxy_install)
}

//

class apache2_mod_proxy_options {
    
    
    balancer_url_suffix: String?
    
    
    
    balancer_vhost: String
    
    
    
    member_host: String?
    
    
    
    state: String?
    
    
    
    tls: Boolean?
    
    
    
    validate_certs: Boolean?
    
    
}

class apache2_mod_proxy extends playbook.task {
    hidden options: apache2_mod_proxy_options

    `community.general.apache2_mod_proxy`: apache2_mod_proxy_options?

    function into(): apache2_mod_proxy = this
        .toMap()
        .put("community.general.apache2_mod_proxy", this.options)
        .toTyped(apache2_mod_proxy)
}

//

class apache2_module_options {
    
    
    force: Boolean?
    
    
    
    identifier: String?
    
    
    
    ignore_configcheck: Boolean?
    
    
    
    name: String
    
    
    
    state: ("present"|"absent")?
    
    
    
    warn_mpm_absent: Boolean?
    
    
}

class apache2_module extends playbook.task {
    hidden options: apache2_module_options

    `community.general.apache2_module`: apache2_module_options?

    function into(): apache2_module = this
        .toMap()
        .put("community.general.apache2_module", this.options)
        .toTyped(apache2_module)
}

//

class apk_options {
    
    
    available: Boolean?
    
    
    
    name: Listing<String>?
    
    
    
    no_cache: Boolean?
    
    
    
    repository: Listing<String>?
    
    
    
    state: ("present"|"absent"|"latest"|"installed"|"removed")?
    
    
    
    update_cache: Boolean?
    
    
    
    upgrade: Boolean?
    
    
    
    world: String?
    
    
}

class apk extends playbook.task {
    hidden options: apk_options

    `community.general.apk`: apk_options?

    function into(): apk = this
        .toMap()
        .put("community.general.apk", this.options)
        .toTyped(apk)
}

//

class apt_repo_options {
    
    
    remove_others: Boolean?
    
    
    
    repo: String
    
    
    
    state: ("absent"|"present")?
    
    
    
    update: Boolean?
    
    
}

class apt_repo extends playbook.task {
    hidden options: apt_repo_options

    `community.general.apt_repo`: apt_repo_options?

    function into(): apt_repo = this
        .toMap()
        .put("community.general.apt_repo", this.options)
        .toTyped(apt_repo)
}

//

class apt_rpm_options {
    
    
    clean: Boolean?
    
    
    
    dist_upgrade: Boolean?
    
    
    
    package: Listing<String>?
    
    
    
    state: ("absent"|"present"|"installed"|"removed")?
    
    
    
    update_cache: Boolean?
    
    
    
    update_kernel: Boolean?
    
    
}

class apt_rpm extends playbook.task {
    hidden options: apt_rpm_options

    `community.general.apt_rpm`: apt_rpm_options?

    function into(): apt_rpm = this
        .toMap()
        .put("community.general.apt_rpm", this.options)
        .toTyped(apt_rpm)
}

//

class archive_options {
    
    
    dest: String?
    
    
    
    exclude_path: Listing<String>?
    
    
    
    exclusion_patterns: Listing<String>?
    
    
    
    force_archive: Boolean?
    
    
    
    format: ("bz2"|"gz"|"tar"|"xz"|"zip")?
    
    
    
    path: Listing<String>
    
    
    
    remove: Boolean?
    
    
}

class archive extends playbook.task {
    hidden options: archive_options

    `community.general.archive`: archive_options?

    function into(): archive = this
        .toMap()
        .put("community.general.archive", this.options)
        .toTyped(archive)
}

//

class atomic_container_options {
    
    
    backend: ("docker"|"ostree")
    
    
    
    image: String
    
    
    
    mode: ("user"|"system")?
    
    
    
    name: String
    
    
    
    rootfs: String?
    
    
    
    state: ("absent"|"latest"|"present"|"rollback")?
    
    
    
    values: Listing<String>?
    
    
}

class atomic_container extends playbook.task {
    hidden options: atomic_container_options

    `community.general.atomic_container`: atomic_container_options?

    function into(): atomic_container = this
        .toMap()
        .put("community.general.atomic_container", this.options)
        .toTyped(atomic_container)
}

//

class atomic_host_options {
    
    
    revision: String?
    
    
}

class atomic_host extends playbook.task {
    hidden options: atomic_host_options

    `community.general.atomic_host`: atomic_host_options?

    function into(): atomic_host = this
        .toMap()
        .put("community.general.atomic_host", this.options)
        .toTyped(atomic_host)
}

//

class atomic_image_options {
    
    
    backend: ("docker"|"ostree")?
    
    
    
    name: String
    
    
    
    started: Boolean?
    
    
    
    state: ("absent"|"latest"|"present")?
    
    
}

class atomic_image extends playbook.task {
    hidden options: atomic_image_options

    `community.general.atomic_image`: atomic_image_options?

    function into(): atomic_image = this
        .toMap()
        .put("community.general.atomic_image", this.options)
        .toTyped(atomic_image)
}

//

class awall_options {
    
    
    activate: Boolean?
    
    
    
    name: Listing<String>?
    
    
    
    state: ("disabled"|"enabled")?
    
    
}

class awall extends playbook.task {
    hidden options: awall_options

    `community.general.awall`: awall_options?

    function into(): awall = this
        .toMap()
        .put("community.general.awall", this.options)
        .toTyped(awall)
}

//

class beadm_options {
    
    
    description: String?
    
    
    
    force: Boolean?
    
    
    
    mountpoint: String?
    
    
    
    name: String
    
    
    
    options: String?
    
    
    
    snapshot: String?
    
    
    
    state: ("absent"|"activated"|"mounted"|"present"|"unmounted")?
    
    
}

class beadm extends playbook.task {
    hidden options: beadm_options

    `community.general.beadm`: beadm_options?

    function into(): beadm = this
        .toMap()
        .put("community.general.beadm", this.options)
        .toTyped(beadm)
}

//

class bearychat_options {
    
    
    attachments: Listing<String>?
    
    
    
    channel: String?
    
    
    
    markdown: Boolean?
    
    
    
    text: String?
    
    
    
    url: String
    
    
}

class bearychat extends playbook.task {
    hidden options: bearychat_options

    `community.general.bearychat`: bearychat_options?

    function into(): bearychat = this
        .toMap()
        .put("community.general.bearychat", this.options)
        .toTyped(bearychat)
}

//

class bigpanda_options {
    
    
    component: String
    
    
    
    deployment_message: String?
    
    
    
    description: String?
    
    
    
    env: String?
    
    
    
    hosts: String?
    
    
    
    owner: String?
    
    
    
    source_system: String?
    
    
    
    state: ("started"|"finished"|"failed")
    
    
    
    token: String
    
    
    
    url: String?
    
    
    
    validate_certs: Boolean?
    
    
    
    version: String
    
    
}

class bigpanda extends playbook.task {
    hidden options: bigpanda_options

    `community.general.bigpanda`: bigpanda_options?

    function into(): bigpanda = this
        .toMap()
        .put("community.general.bigpanda", this.options)
        .toTyped(bigpanda)
}

//

class bitbucket_access_key_options {
    
    
    key: String?
    
    
    
    label: String
    
    
    
    repository: String
    
    
    
    state: ("absent"|"present")
    
    
    
    workspace: String
    
    
}

class bitbucket_access_key extends playbook.task {
    hidden options: bitbucket_access_key_options

    `community.general.bitbucket_access_key`: bitbucket_access_key_options?

    function into(): bitbucket_access_key = this
        .toMap()
        .put("community.general.bitbucket_access_key", this.options)
        .toTyped(bitbucket_access_key)
}

//

class bitbucket_pipeline_key_pair_options {
    
    
    private_key: String?
    
    
    
    public_key: String?
    
    
    
    repository: String
    
    
    
    state: ("absent"|"present")
    
    
    
    workspace: String
    
    
}

class bitbucket_pipeline_key_pair extends playbook.task {
    hidden options: bitbucket_pipeline_key_pair_options

    `community.general.bitbucket_pipeline_key_pair`: bitbucket_pipeline_key_pair_options?

    function into(): bitbucket_pipeline_key_pair = this
        .toMap()
        .put("community.general.bitbucket_pipeline_key_pair", this.options)
        .toTyped(bitbucket_pipeline_key_pair)
}

//

class bitbucket_pipeline_known_host_options {
    
    
    key: String?
    
    
    
    name: String
    
    
    
    repository: String
    
    
    
    state: ("absent"|"present")
    
    
    
    workspace: String
    
    
}

class bitbucket_pipeline_known_host extends playbook.task {
    hidden options: bitbucket_pipeline_known_host_options

    `community.general.bitbucket_pipeline_known_host`: bitbucket_pipeline_known_host_options?

    function into(): bitbucket_pipeline_known_host = this
        .toMap()
        .put("community.general.bitbucket_pipeline_known_host", this.options)
        .toTyped(bitbucket_pipeline_known_host)
}

//

class bitbucket_pipeline_variable_options {
    
    
    name: String
    
    
    
    repository: String
    
    
    
    secured: Boolean?
    
    
    
    state: ("absent"|"present")
    
    
    
    value: String?
    
    
    
    workspace: String
    
    
}

class bitbucket_pipeline_variable extends playbook.task {
    hidden options: bitbucket_pipeline_variable_options

    `community.general.bitbucket_pipeline_variable`: bitbucket_pipeline_variable_options?

    function into(): bitbucket_pipeline_variable = this
        .toMap()
        .put("community.general.bitbucket_pipeline_variable", this.options)
        .toTyped(bitbucket_pipeline_variable)
}

//

class bower_options {
    
    
    name: String?
    
    
    
    offline: Boolean?
    
    
    
    path: String
    
    
    
    production: Boolean?
    
    
    
    relative_execpath: String?
    
    
    
    state: ("present"|"absent"|"latest")?
    
    
    
    version: String?
    
    
}

class bower extends playbook.task {
    hidden options: bower_options

    `community.general.bower`: bower_options?

    function into(): bower = this
        .toMap()
        .put("community.general.bower", this.options)
        .toTyped(bower)
}

//

class btrfs_info_options {
    
}

class btrfs_info extends playbook.task {
    hidden options: btrfs_info_options

    `community.general.btrfs_info`: btrfs_info_options?

    function into(): btrfs_info = this
        .toMap()
        .put("community.general.btrfs_info", this.options)
        .toTyped(btrfs_info)
}

//

class btrfs_subvolume_options {
    
    
    automount: Boolean?
    
    
    
    default: Boolean?
    
    
    
    filesystem_device: String?
    
    
    
    filesystem_label: String?
    
    
    
    filesystem_uuid: String?
    
    
    
    name: String
    
    
    
    recursive: Boolean?
    
    
    
    snapshot_conflict: ("skip"|"clobber"|"error")?
    
    
    
    snapshot_source: String?
    
    
    
    state: ("absent"|"present")?
    
    
}

class btrfs_subvolume extends playbook.task {
    hidden options: btrfs_subvolume_options

    `community.general.btrfs_subvolume`: btrfs_subvolume_options?

    function into(): btrfs_subvolume = this
        .toMap()
        .put("community.general.btrfs_subvolume", this.options)
        .toTyped(btrfs_subvolume)
}

//

class bundler_options {
    
    
    binstub_directory: String?
    
    
    
    chdir: String?
    
    
    
    clean: Boolean?
    
    
    
    deployment_mode: Boolean?
    
    
    
    exclude_groups: Listing<String>?
    
    
    
    executable: String?
    
    
    
    extra_args: String?
    
    
    
    gem_path: String?
    
    
    
    gemfile: String?
    
    
    
    `local`: Boolean?
    
    
    
    state: ("present"|"latest")?
    
    
    
    user_install: Boolean?
    
    
}

class bundler extends playbook.task {
    hidden options: bundler_options

    `community.general.bundler`: bundler_options?

    function into(): bundler = this
        .toMap()
        .put("community.general.bundler", this.options)
        .toTyped(bundler)
}

//

class bzr_options {
    
    
    dest: String
    
    
    
    executable: String?
    
    
    
    force: Boolean?
    
    
    
    name: String
    
    
    
    version: String?
    
    
}

class bzr extends playbook.task {
    hidden options: bzr_options

    `community.general.bzr`: bzr_options?

    function into(): bzr = this
        .toMap()
        .put("community.general.bzr", this.options)
        .toTyped(bzr)
}

//

class campfire_options {
    
    
    msg: String
    
    
    
    notify: ("56k"|"bell"|"bezos"|"bueller"|"clowntown"|"cottoneyejoe"|"crickets"|"dadgummit"|"dangerzone"|"danielsan"|"deeper"|"drama"|"greatjob"|"greyjoy"|"guarantee"|"heygirl"|"horn"|"horror"|"inconceivable"|"live"|"loggins"|"makeitso"|"noooo"|"nyan"|"ohmy"|"ohyeah"|"pushit"|"rimshot"|"rollout"|"rumble"|"sax"|"secret"|"sexyback"|"story"|"tada"|"tmyk"|"trololo"|"trombone"|"unix"|"vuvuzela"|"what"|"whoomp"|"yeah"|"yodel")?
    
    
    
    room: String
    
    
    
    subscription: String
    
    
    
    token: String
    
    
}

class campfire extends playbook.task {
    hidden options: campfire_options

    `community.general.campfire`: campfire_options?

    function into(): campfire = this
        .toMap()
        .put("community.general.campfire", this.options)
        .toTyped(campfire)
}

//

class capabilities_options {
    
    
    capability: String
    
    
    
    path: String
    
    
    
    state: ("absent"|"present")?
    
    
}

class capabilities extends playbook.task {
    hidden options: capabilities_options

    `community.general.capabilities`: capabilities_options?

    function into(): capabilities = this
        .toMap()
        .put("community.general.capabilities", this.options)
        .toTyped(capabilities)
}

//

class cargo_options {
    
    
    executable: String?
    
    
    
    locked: Boolean?
    
    
    
    name: Listing<String>
    
    
    
    path: String?
    
    
    
    state: ("present"|"absent"|"latest")?
    
    
    
    version: String?
    
    
}

class cargo extends playbook.task {
    hidden options: cargo_options

    `community.general.cargo`: cargo_options?

    function into(): cargo = this
        .toMap()
        .put("community.general.cargo", this.options)
        .toTyped(cargo)
}

//

class catapult_options {
    
    
    api_secret: String
    
    
    
    api_token: String
    
    
    
    dest: Listing<String>
    
    
    
    media: String?
    
    
    
    msg: String
    
    
    
    src: String
    
    
    
    user_id: String
    
    
}

class catapult extends playbook.task {
    hidden options: catapult_options

    `community.general.catapult`: catapult_options?

    function into(): catapult = this
        .toMap()
        .put("community.general.catapult", this.options)
        .toTyped(catapult)
}

//

class circonus_annotation_options {
    
    
    api_key: String
    
    
    
    category: String
    
    
    
    description: String
    
    
    
    duration: Int?
    
    
    
    start: Int?
    
    
    
    stop: Int?
    
    
    
    title: String
    
    
}

class circonus_annotation extends playbook.task {
    hidden options: circonus_annotation_options

    `community.general.circonus_annotation`: circonus_annotation_options?

    function into(): circonus_annotation = this
        .toMap()
        .put("community.general.circonus_annotation", this.options)
        .toTyped(circonus_annotation)
}

//

class cisco_webex_options {
    
    
    msg: String
    
    
    
    msg_type: ("text"|"markdown")?
    
    
    
    personal_token: String
    
    
    
    recipient_id: String
    
    
    
    recipient_type: ("roomId"|"toPersonEmail"|"toPersonId")
    
    
}

class cisco_webex extends playbook.task {
    hidden options: cisco_webex_options

    `community.general.cisco_webex`: cisco_webex_options?

    function into(): cisco_webex = this
        .toMap()
        .put("community.general.cisco_webex", this.options)
        .toTyped(cisco_webex)
}

//

class clc_aa_policy_options {
    
    
    location: String
    
    
    
    name: String
    
    
    
    state: ("present"|"absent")?
    
    
}

class clc_aa_policy extends playbook.task {
    hidden options: clc_aa_policy_options

    `community.general.clc_aa_policy`: clc_aa_policy_options?

    function into(): clc_aa_policy = this
        .toMap()
        .put("community.general.clc_aa_policy", this.options)
        .toTyped(clc_aa_policy)
}

//

class clc_alert_policy_options {
    
    
    alert_recipients: Listing<String>?
    
    
    
    alias: String
    
    
    
    duration: String?
    
    
    
    id: String?
    
    
    
    metric: ("cpu"|"memory"|"disk")?
    
    
    
    name: String?
    
    
    
    state: ("present"|"absent")?
    
    
    
    threshold: Int?
    
    
}

class clc_alert_policy extends playbook.task {
    hidden options: clc_alert_policy_options

    `community.general.clc_alert_policy`: clc_alert_policy_options?

    function into(): clc_alert_policy = this
        .toMap()
        .put("community.general.clc_alert_policy", this.options)
        .toTyped(clc_alert_policy)
}

//

class clc_blueprint_package_options {
    
    
    package_id: String
    
    
    
    package_params: String?
    
    
    
    server_ids: Listing<String>
    
    
    
    state: ("present")?
    
    
    
    wait: String?
    
    
}

class clc_blueprint_package extends playbook.task {
    hidden options: clc_blueprint_package_options

    `community.general.clc_blueprint_package`: clc_blueprint_package_options?

    function into(): clc_blueprint_package = this
        .toMap()
        .put("community.general.clc_blueprint_package", this.options)
        .toTyped(clc_blueprint_package)
}

//

class clc_firewall_policy_options {
    
    
    destination: Listing<String>?
    
    
    
    destination_account_alias: String?
    
    
    
    enabled: ("True"|"False")?
    
    
    
    firewall_policy_id: String?
    
    
    
    location: String
    
    
    
    ports: Listing<String>?
    
    
    
    source: Listing<String>?
    
    
    
    source_account_alias: String
    
    
    
    state: ("present"|"absent")?
    
    
    
    wait: String?
    
    
}

class clc_firewall_policy extends playbook.task {
    hidden options: clc_firewall_policy_options

    `community.general.clc_firewall_policy`: clc_firewall_policy_options?

    function into(): clc_firewall_policy = this
        .toMap()
        .put("community.general.clc_firewall_policy", this.options)
        .toTyped(clc_firewall_policy)
}

//

class clc_group_options {
    
    
    description: String?
    
    
    
    location: String?
    
    
    
    name: String
    
    
    
    parent: String?
    
    
    
    state: ("present"|"absent")?
    
    
    
    wait: Boolean?
    
    
}

class clc_group extends playbook.task {
    hidden options: clc_group_options

    `community.general.clc_group`: clc_group_options?

    function into(): clc_group = this
        .toMap()
        .put("community.general.clc_group", this.options)
        .toTyped(clc_group)
}

//

class clc_loadbalancer_options {
    
    
    alias: String
    
    
    
    description: String?
    
    
    
    location: String
    
    
    
    method: ("leastConnection"|"roundRobin")?
    
    
    
    name: String
    
    
    
    nodes: Listing<String>?
    
    
    
    persistence: ("standard"|"sticky")?
    
    
    
    port: ("80"|"443")?
    
    
    
    state: ("present"|"absent"|"port_absent"|"nodes_present"|"nodes_absent")?
    
    
    
    status: ("enabled"|"disabled")?
    
    
}

class clc_loadbalancer extends playbook.task {
    hidden options: clc_loadbalancer_options

    `community.general.clc_loadbalancer`: clc_loadbalancer_options?

    function into(): clc_loadbalancer = this
        .toMap()
        .put("community.general.clc_loadbalancer", this.options)
        .toTyped(clc_loadbalancer)
}

//

class clc_modify_server_options {
    
    
    alert_policy_id: String?
    
    
    
    alert_policy_name: String?
    
    
    
    anti_affinity_policy_id: String?
    
    
    
    anti_affinity_policy_name: String?
    
    
    
    cpu: String?
    
    
    
    memory: String?
    
    
    
    server_ids: Listing<String>
    
    
    
    state: ("present"|"absent")?
    
    
    
    wait: Boolean?
    
    
}

class clc_modify_server extends playbook.task {
    hidden options: clc_modify_server_options

    `community.general.clc_modify_server`: clc_modify_server_options?

    function into(): clc_modify_server = this
        .toMap()
        .put("community.general.clc_modify_server", this.options)
        .toTyped(clc_modify_server)
}

//

class clc_publicip_options {
    
    
    ports: Listing<Int>?
    
    
    
    protocol: ("TCP"|"UDP"|"ICMP")?
    
    
    
    server_ids: Listing<String>
    
    
    
    state: ("present"|"absent")?
    
    
    
    wait: Boolean?
    
    
}

class clc_publicip extends playbook.task {
    hidden options: clc_publicip_options

    `community.general.clc_publicip`: clc_publicip_options?

    function into(): clc_publicip = this
        .toMap()
        .put("community.general.clc_publicip", this.options)
        .toTyped(clc_publicip)
}

//

class clc_server_options {
    
    
    add_public_ip: Boolean?
    
    
    
    additional_disks: Listing<String>?
    
    
    
    alert_policy_id: String?
    
    
    
    alert_policy_name: String?
    
    
    
    alias: String?
    
    
    
    anti_affinity_policy_id: String?
    
    
    
    anti_affinity_policy_name: String?
    
    
    
    configuration_id: String?
    
    
    
    count: Int?
    
    
    
    count_group: String?
    
    
    
    cpu: Int?
    
    
    
    cpu_autoscale_policy_id: String?
    
    
    
    custom_fields: Listing<String>?
    
    
    
    description: String?
    
    
    
    exact_count: Int?
    
    
    
    group: String?
    
    
    
    ip_address: String?
    
    
    
    location: String?
    
    
    
    managed_os: Boolean?
    
    
    
    memory: Int?
    
    
    
    name: String?
    
    
    
    network_id: String?
    
    
    
    os_type: ("redHat6_64Bit"|"centOS6_64Bit"|"windows2012R2Standard_64Bit"|"ubuntu14_64Bit")?
    
    
    
    packages: Listing<String>?
    
    
    
    password: String?
    
    
    
    primary_dns: String?
    
    
    
    public_ip_ports: Listing<String>?
    
    
    
    public_ip_protocol: ("TCP"|"UDP"|"ICMP")?
    
    
    
    secondary_dns: String?
    
    
    
    server_ids: Listing<String>?
    
    
    
    source_server_password: String?
    
    
    
    state: ("present"|"absent"|"started"|"stopped")?
    
    
    
    storage_type: ("standard"|"hyperscale")?
    
    
    
    template: String?
    
    
    
    ttl: String?
    
    
    
    type: ("standard"|"hyperscale"|"bareMetal")?
    
    
    
    wait: Boolean?
    
    
}

class clc_server extends playbook.task {
    hidden options: clc_server_options

    `community.general.clc_server`: clc_server_options?

    function into(): clc_server = this
        .toMap()
        .put("community.general.clc_server", this.options)
        .toTyped(clc_server)
}

//

class clc_server_snapshot_options {
    
    
    expiration_days: Int?
    
    
    
    server_ids: Listing<String>
    
    
    
    state: ("present"|"absent"|"restore")?
    
    
    
    wait: String?
    
    
}

class clc_server_snapshot extends playbook.task {
    hidden options: clc_server_snapshot_options

    `community.general.clc_server_snapshot`: clc_server_snapshot_options?

    function into(): clc_server_snapshot = this
        .toMap()
        .put("community.general.clc_server_snapshot", this.options)
        .toTyped(clc_server_snapshot)
}

//

class cloud_init_data_facts_options {
    
    
    filter: ("status"|"result")?
    
    
}

class cloud_init_data_facts extends playbook.task {
    hidden options: cloud_init_data_facts_options

    `community.general.cloud_init_data_facts`: cloud_init_data_facts_options?

    function into(): cloud_init_data_facts = this
        .toMap()
        .put("community.general.cloud_init_data_facts", this.options)
        .toTyped(cloud_init_data_facts)
}

//

class cloudflare_dns_options {
    
    
    account_api_key: String?
    
    
    
    account_email: String?
    
    
    
    algorithm: Int?
    
    
    
    api_token: String?
    
    
    
    cert_usage: Int?
    
    
    
    flag: Int?
    
    
    
    hash_type: Int?
    
    
    
    key_tag: Int?
    
    
    
    port: Int?
    
    
    
    priority: Int?
    
    
    
    proto: String?
    
    
    
    proxied: Boolean?
    
    
    
    `record`: String?
    
    
    
    selector: Int?
    
    
    
    service: String?
    
    
    
    solo: Boolean?
    
    
    
    state: ("absent"|"present")?
    
    
    
    tag: ("issue"|"issuewild"|"iodef")?
    
    
    
    timeout: Int?
    
    
    
    ttl: Int?
    
    
    
    type: ("A"|"AAAA"|"CNAME"|"DS"|"MX"|"NS"|"SPF"|"SRV"|"SSHFP"|"TLSA"|"CAA"|"TXT")?
    
    
    
    value: String?
    
    
    
    weight: Int?
    
    
    
    zone: String
    
    
}

class cloudflare_dns extends playbook.task {
    hidden options: cloudflare_dns_options

    `community.general.cloudflare_dns`: cloudflare_dns_options?

    function into(): cloudflare_dns = this
        .toMap()
        .put("community.general.cloudflare_dns", this.options)
        .toTyped(cloudflare_dns)
}

//

class cobbler_sync_options {
    
    
    host: String?
    
    
    
    password: String?
    
    
    
    port: Int?
    
    
    
    use_ssl: Boolean?
    
    
    
    username: String?
    
    
    
    validate_certs: Boolean?
    
    
}

class cobbler_sync extends playbook.task {
    hidden options: cobbler_sync_options

    `community.general.cobbler_sync`: cobbler_sync_options?

    function into(): cobbler_sync = this
        .toMap()
        .put("community.general.cobbler_sync", this.options)
        .toTyped(cobbler_sync)
}

//

class cobbler_system_options {
    
    
    host: String?
    
    
    
    interfaces: String?
    
    
    
    name: String?
    
    
    
    password: String?
    
    
    
    port: Int?
    
    
    
    properties: String?
    
    
    
    state: ("absent"|"present"|"query")?
    
    
    
    sync: Boolean?
    
    
    
    use_ssl: Boolean?
    
    
    
    username: String?
    
    
    
    validate_certs: Boolean?
    
    
}

class cobbler_system extends playbook.task {
    hidden options: cobbler_system_options

    `community.general.cobbler_system`: cobbler_system_options?

    function into(): cobbler_system = this
        .toMap()
        .put("community.general.cobbler_system", this.options)
        .toTyped(cobbler_system)
}

//

class composer_options {
    
    
    apcu_autoloader: Boolean?
    
    
    
    arguments: String?
    
    
    
    classmap_authoritative: Boolean?
    
    
    
    command: String?
    
    
    
    composer_executable: String?
    
    
    
    executable: String?
    
    
    
    global_command: Boolean?
    
    
    
    ignore_platform_reqs: Boolean?
    
    
    
    no_dev: Boolean?
    
    
    
    no_plugins: Boolean?
    
    
    
    no_scripts: Boolean?
    
    
    
    optimize_autoloader: Boolean?
    
    
    
    prefer_dist: Boolean?
    
    
    
    prefer_source: Boolean?
    
    
    
    working_dir: String?
    
    
}

class composer extends playbook.task {
    hidden options: composer_options

    `community.general.composer`: composer_options?

    function into(): composer = this
        .toMap()
        .put("community.general.composer", this.options)
        .toTyped(composer)
}

//

class consul_options {
    
    
    ack_params_state_absent: Boolean?
    
    
    
    check_host: String?
    
    
    
    check_id: String?
    
    
    
    check_name: String?
    
    
    
    check_node: String?
    
    
    
    host: String?
    
    
    
    http: String?
    
    
    
    interval: String?
    
    
    
    notes: String?
    
    
    
    port: Int?
    
    
    
    scheme: String?
    
    
    
    script: String?
    
    
    
    service_address: String?
    
    
    
    service_id: String?
    
    
    
    service_name: String?
    
    
    
    service_port: Int?
    
    
    
    state: ("present"|"absent")?
    
    
    
    tags: Listing<String>?
    
    
    
    tcp: String?
    
    
    
    timeout: String?
    
    
    
    token: String?
    
    
    
    ttl: String?
    
    
    
    validate_certs: Boolean?
    
    
}

class consul extends playbook.task {
    hidden options: consul_options

    `community.general.consul`: consul_options?

    function into(): consul = this
        .toMap()
        .put("community.general.consul", this.options)
        .toTyped(consul)
}

//

class consul_acl_options {
    
    
    host: String?
    
    
    
    mgmt_token: String
    
    
    
    name: String?
    
    
    
    port: Int?
    
    
    
    rules: Listing<String>?
    
    
    
    scheme: String?
    
    
    
    state: ("present"|"absent")?
    
    
    
    token: String?
    
    
    
    token_type: ("client"|"management")?
    
    
    
    validate_certs: Boolean?
    
    
}

class consul_acl extends playbook.task {
    hidden options: consul_acl_options

    `community.general.consul_acl`: consul_acl_options?

    function into(): consul_acl = this
        .toMap()
        .put("community.general.consul_acl", this.options)
        .toTyped(consul_acl)
}

//

class consul_acl_bootstrap_options {
    
    
    bootstrap_secret: String?
    
    
    
    state: ("present"|"bootstrapped")?
    
    
}

class consul_acl_bootstrap extends playbook.task {
    hidden options: consul_acl_bootstrap_options

    `community.general.consul_acl_bootstrap`: consul_acl_bootstrap_options?

    function into(): consul_acl_bootstrap = this
        .toMap()
        .put("community.general.consul_acl_bootstrap", this.options)
        .toTyped(consul_acl_bootstrap)
}

//

class consul_auth_method_options {
    
    
    config: String?
    
    
    
    description: String?
    
    
    
    display_name: String?
    
    
    
    max_token_ttl: String?
    
    
    
    name: String
    
    
    
    state: ("present"|"absent")?
    
    
    
    token_locality: ("local"|"global")?
    
    
    
    type: ("kubernetes"|"jwt"|"oidc"|"aws-iam")?
    
    
}

class consul_auth_method extends playbook.task {
    hidden options: consul_auth_method_options

    `community.general.consul_auth_method`: consul_auth_method_options?

    function into(): consul_auth_method = this
        .toMap()
        .put("community.general.consul_auth_method", this.options)
        .toTyped(consul_auth_method)
}

//

class consul_binding_rule_options {
    
    
    auth_method: String
    
    
    
    bind_name: String?
    
    
    
    bind_type: ("service"|"node"|"role"|"templated-policy")?
    
    
    
    bind_vars: String?
    
    
    
    description: String?
    
    
    
    name: String
    
    
    
    selector: String?
    
    
    
    state: ("present"|"absent")?
    
    
}

class consul_binding_rule extends playbook.task {
    hidden options: consul_binding_rule_options

    `community.general.consul_binding_rule`: consul_binding_rule_options?

    function into(): consul_binding_rule = this
        .toMap()
        .put("community.general.consul_binding_rule", this.options)
        .toTyped(consul_binding_rule)
}

//

class consul_kv_options {
    
    
    cas: String?
    
    
    
    flags: String?
    
    
    
    host: String?
    
    
    
    key: String
    
    
    
    port: Int?
    
    
    
    recurse: Boolean?
    
    
    
    retrieve: Boolean?
    
    
    
    scheme: String?
    
    
    
    session: String?
    
    
    
    state: ("absent"|"acquire"|"present"|"release")?
    
    
    
    token: String?
    
    
    
    validate_certs: Boolean?
    
    
    
    value: String?
    
    
}

class consul_kv extends playbook.task {
    hidden options: consul_kv_options

    `community.general.consul_kv`: consul_kv_options?

    function into(): consul_kv = this
        .toMap()
        .put("community.general.consul_kv", this.options)
        .toTyped(consul_kv)
}

//

class consul_policy_options {
    
    
    description: String?
    
    
    
    name: String
    
    
    
    rules: String?
    
    
    
    state: ("present"|"absent")?
    
    
    
    valid_datacenters: Listing<String>?
    
    
}

class consul_policy extends playbook.task {
    hidden options: consul_policy_options

    `community.general.consul_policy`: consul_policy_options?

    function into(): consul_policy = this
        .toMap()
        .put("community.general.consul_policy", this.options)
        .toTyped(consul_policy)
}

//

class consul_role_options {
    
    
    description: String?
    
    
    
    name: String
    
    
    
    node_identities: Listing<String>?
    
    
    
    policies: Listing<String>?
    
    
    
    service_identities: Listing<String>?
    
    
    
    state: ("present"|"absent")?
    
    
    
    templated_policies: Listing<String>?
    
    
}

class consul_role extends playbook.task {
    hidden options: consul_role_options

    `community.general.consul_role`: consul_role_options?

    function into(): consul_role = this
        .toMap()
        .put("community.general.consul_role", this.options)
        .toTyped(consul_role)
}

//

class consul_session_options {
    
    
    behavior: ("delete"|"release")?
    
    
    
    checks: Listing<String>?
    
    
    
    datacenter: String?
    
    
    
    delay: Int?
    
    
    
    id: String?
    
    
    
    name: String?
    
    
    
    node: String?
    
    
    
    state: ("absent"|"info"|"list"|"node"|"present")?
    
    
    
    token: String?
    
    
    
    ttl: Int?
    
    
}

class consul_session extends playbook.task {
    hidden options: consul_session_options

    `community.general.consul_session`: consul_session_options?

    function into(): consul_session = this
        .toMap()
        .put("community.general.consul_session", this.options)
        .toTyped(consul_session)
}

//

class consul_token_options {
    
    
    accessor_id: String?
    
    
    
    description: String?
    
    
    
    expiration_ttl: String?
    
    
    
    `local`: Boolean?
    
    
    
    node_identities: Listing<String>?
    
    
    
    policies: Listing<String>?
    
    
    
    roles: Listing<String>?
    
    
    
    secret_id: String?
    
    
    
    service_identities: Listing<String>?
    
    
    
    state: ("present"|"absent")?
    
    
    
    templated_policies: Listing<String>?
    
    
}

class consul_token extends playbook.task {
    hidden options: consul_token_options

    `community.general.consul_token`: consul_token_options?

    function into(): consul_token = this
        .toMap()
        .put("community.general.consul_token", this.options)
        .toTyped(consul_token)
}

//

class copr_options {
    
    
    chroot: String?
    
    
    
    host: String?
    
    
    
    name: String
    
    
    
    protocol: String?
    
    
    
    state: ("absent"|"enabled"|"disabled")?
    
    
}

class copr extends playbook.task {
    hidden options: copr_options

    `community.general.copr`: copr_options?

    function into(): copr = this
        .toMap()
        .put("community.general.copr", this.options)
        .toTyped(copr)
}

//

class cpanm_options {
    
    
    executable: String?
    
    
    
    from_path: String?
    
    
    
    installdeps: Boolean?
    
    
    
    locallib: String?
    
    
    
    mirror: String?
    
    
    
    mirror_only: Boolean?
    
    
    
    mode: ("compatibility"|"new")?
    
    
    
    name: String?
    
    
    
    name_check: String?
    
    
    
    notest: Boolean?
    
    
    
    version: String?
    
    
}

class cpanm extends playbook.task {
    hidden options: cpanm_options

    `community.general.cpanm`: cpanm_options?

    function into(): cpanm = this
        .toMap()
        .put("community.general.cpanm", this.options)
        .toTyped(cpanm)
}

//

class cronvar_options {
    
    
    backup: Boolean?
    
    
    
    cron_file: String?
    
    
    
    insertafter: String?
    
    
    
    insertbefore: String?
    
    
    
    name: String
    
    
    
    state: ("absent"|"present")?
    
    
    
    user: String?
    
    
    
    value: String?
    
    
}

class cronvar extends playbook.task {
    hidden options: cronvar_options

    `community.general.cronvar`: cronvar_options?

    function into(): cronvar = this
        .toMap()
        .put("community.general.cronvar", this.options)
        .toTyped(cronvar)
}

//

class crypttab_options {
    
    
    backing_device: String?
    
    
    
    name: String
    
    
    
    opts: String?
    
    
    
    password: String?
    
    
    
    path: String?
    
    
    
    state: ("absent"|"opts_absent"|"opts_present"|"present")
    
    
}

class crypttab extends playbook.task {
    hidden options: crypttab_options

    `community.general.crypttab`: crypttab_options?

    function into(): crypttab = this
        .toMap()
        .put("community.general.crypttab", this.options)
        .toTyped(crypttab)
}

//

class datadog_downtime_options {
    
    
    api_host: String?
    
    
    
    api_key: String
    
    
    
    app_key: String
    
    
    
    downtime_message: String?
    
    
    
    end: Int?
    
    
    
    id: Int?
    
    
    
    monitor_id: Int?
    
    
    
    monitor_tags: Listing<String>?
    
    
    
    rrule: String?
    
    
    
    scope: Listing<String>?
    
    
    
    start: Int?
    
    
    
    state: ("present"|"absent")?
    
    
    
    timezone: String?
    
    
}

class datadog_downtime extends playbook.task {
    hidden options: datadog_downtime_options

    `community.general.datadog_downtime`: datadog_downtime_options?

    function into(): datadog_downtime = this
        .toMap()
        .put("community.general.datadog_downtime", this.options)
        .toTyped(datadog_downtime)
}

//

class datadog_event_options {
    
    
    aggregation_key: String?
    
    
    
    alert_type: ("error"|"warning"|"info"|"success")?
    
    
    
    api_host: String?
    
    
    
    api_key: String
    
    
    
    app_key: String
    
    
    
    date_happened: Int?
    
    
    
    host: String?
    
    
    
    priority: ("normal"|"low")?
    
    
    
    tags: Listing<String>?
    
    
    
    text: String
    
    
    
    title: String
    
    
    
    validate_certs: Boolean?
    
    
}

class datadog_event extends playbook.task {
    hidden options: datadog_event_options

    `community.general.datadog_event`: datadog_event_options?

    function into(): datadog_event = this
        .toMap()
        .put("community.general.datadog_event", this.options)
        .toTyped(datadog_event)
}

//

class datadog_monitor_options {
    
    
    api_host: String?
    
    
    
    api_key: String
    
    
    
    app_key: String
    
    
    
    escalation_message: String?
    
    
    
    evaluation_delay: String?
    
    
    
    id: String?
    
    
    
    include_tags: Boolean?
    
    
    
    locked: Boolean?
    
    
    
    name: String
    
    
    
    new_host_delay: String?
    
    
    
    no_data_timeframe: String?
    
    
    
    notification_message: String?
    
    
    
    notification_preset_name: ("show_all"|"hide_query"|"hide_handles"|"hide_all")?
    
    
    
    notify_audit: Boolean?
    
    
    
    notify_no_data: Boolean?
    
    
    
    priority: Int?
    
    
    
    query: String?
    
    
    
    renotify_interval: String?
    
    
    
    renotify_occurrences: Int?
    
    
    
    renotify_statuses: Listing<("alert"|"warn"|"no data")>?
    
    
    
    require_full_window: Boolean?
    
    
    
    silenced: String?
    
    
    
    state: ("present"|"absent"|"mute"|"unmute")
    
    
    
    tags: Listing<String>?
    
    
    
    thresholds: String?
    
    
    
    timeout_h: String?
    
    
    
    type: ("metric alert"|"service check"|"event alert"|"event-v2 alert"|"process alert"|"log alert"|"query alert"|"trace-analytics alert"|"rum alert"|"composite")?
    
    
}

class datadog_monitor extends playbook.task {
    hidden options: datadog_monitor_options

    `community.general.datadog_monitor`: datadog_monitor_options?

    function into(): datadog_monitor = this
        .toMap()
        .put("community.general.datadog_monitor", this.options)
        .toTyped(datadog_monitor)
}

//

class dconf_options {
    
    
    key: String
    
    
    
    state: ("read"|"present"|"absent")?
    
    
    
    value: String?
    
    
}

class dconf extends playbook.task {
    hidden options: dconf_options

    `community.general.dconf`: dconf_options?

    function into(): dconf = this
        .toMap()
        .put("community.general.dconf", this.options)
        .toTyped(dconf)
}

//

class deploy_helper_options {
    
    
    clean: Boolean?
    
    
    
    current_path: String?
    
    
    
    keep_releases: Int?
    
    
    
    path: String
    
    
    
    release: String?
    
    
    
    releases_path: String?
    
    
    
    shared_path: String?
    
    
    
    state: ("present"|"finalize"|"absent"|"clean"|"query")?
    
    
    
    unfinished_filename: String?
    
    
}

class deploy_helper extends playbook.task {
    hidden options: deploy_helper_options

    `community.general.deploy_helper`: deploy_helper_options?

    function into(): deploy_helper = this
        .toMap()
        .put("community.general.deploy_helper", this.options)
        .toTyped(deploy_helper)
}

//

class dimensiondata_network_options {
    
    
    description: String?
    
    
    
    name: String
    
    
    
    service_plan: ("ESSENTIALS"|"ADVANCED")?
    
    
    
    state: ("present"|"absent")?
    
    
}

class dimensiondata_network extends playbook.task {
    hidden options: dimensiondata_network_options

    `community.general.dimensiondata_network`: dimensiondata_network_options?

    function into(): dimensiondata_network = this
        .toMap()
        .put("community.general.dimensiondata_network", this.options)
        .toTyped(dimensiondata_network)
}

//

class dimensiondata_vlan_options {
    
    
    allow_expand: Boolean?
    
    
    
    description: String?
    
    
    
    name: String
    
    
    
    network_domain: String
    
    
    
    private_ipv4_base_address: String?
    
    
    
    private_ipv4_prefix_size: Int?
    
    
    
    state: ("present"|"absent"|"readonly")?
    
    
}

class dimensiondata_vlan extends playbook.task {
    hidden options: dimensiondata_vlan_options

    `community.general.dimensiondata_vlan`: dimensiondata_vlan_options?

    function into(): dimensiondata_vlan = this
        .toMap()
        .put("community.general.dimensiondata_vlan", this.options)
        .toTyped(dimensiondata_vlan)
}

//

class discord_options {
    
    
    avatar_url: String?
    
    
    
    content: String?
    
    
    
    embeds: Listing<String>?
    
    
    
    tts: Boolean?
    
    
    
    username: String?
    
    
    
    webhook_id: String
    
    
    
    webhook_token: String
    
    
}

class discord extends playbook.task {
    hidden options: discord_options

    `community.general.discord`: discord_options?

    function into(): discord = this
        .toMap()
        .put("community.general.discord", this.options)
        .toTyped(discord)
}

//

class django_manage_options {
    
    
    ack_venv_creation_deprecation: Boolean?
    
    
    
    apps: String?
    
    
    
    cache_table: String?
    
    
    
    clear: Boolean?
    
    
    
    command: String
    
    
    
    database: String?
    
    
    
    failfast: Boolean?
    
    
    
    fixtures: String?
    
    
    
    link: Boolean?
    
    
    
    merge: Boolean?
    
    
    
    project_path: String
    
    
    
    pythonpath: String?
    
    
    
    settings: String?
    
    
    
    skip: Boolean?
    
    
    
    testrunner: String?
    
    
    
    virtualenv: String?
    
    
}

class django_manage extends playbook.task {
    hidden options: django_manage_options

    `community.general.django_manage`: django_manage_options?

    function into(): django_manage = this
        .toMap()
        .put("community.general.django_manage", this.options)
        .toTyped(django_manage)
}

//

class dnf_config_manager_options {
    
    
    name: Listing<String>?
    
    
    
    state: ("enabled"|"disabled")?
    
    
}

class dnf_config_manager extends playbook.task {
    hidden options: dnf_config_manager_options

    `community.general.dnf_config_manager`: dnf_config_manager_options?

    function into(): dnf_config_manager = this
        .toMap()
        .put("community.general.dnf_config_manager", this.options)
        .toTyped(dnf_config_manager)
}

//

class dnf_versionlock_options {
    
    
    name: Listing<String>?
    
    
    
    raw: Boolean?
    
    
    
    state: ("absent"|"clean"|"excluded"|"present")?
    
    
}

class dnf_versionlock extends playbook.task {
    hidden options: dnf_versionlock_options

    `community.general.dnf_versionlock`: dnf_versionlock_options?

    function into(): dnf_versionlock = this
        .toMap()
        .put("community.general.dnf_versionlock", this.options)
        .toTyped(dnf_versionlock)
}

//

class dnsimple_options {
    
    
    account_api_token: String?
    
    
    
    account_email: String?
    
    
    
    domain: String?
    
    
    
    priority: Int?
    
    
    
    `record`: String?
    
    
    
    record_ids: Listing<String>?
    
    
    
    sandbox: Boolean?
    
    
    
    solo: Boolean?
    
    
    
    state: ("present"|"absent")?
    
    
    
    ttl: Int?
    
    
    
    type: ("A"|"ALIAS"|"CNAME"|"MX"|"SPF"|"URL"|"TXT"|"NS"|"SRV"|"NAPTR"|"PTR"|"AAAA"|"SSHFP"|"HINFO"|"POOL"|"CAA")?
    
    
    
    value: String?
    
    
}

class dnsimple extends playbook.task {
    hidden options: dnsimple_options

    `community.general.dnsimple`: dnsimple_options?

    function into(): dnsimple = this
        .toMap()
        .put("community.general.dnsimple", this.options)
        .toTyped(dnsimple)
}

//

class dnsimple_info_options {
    
    
    account_id: String
    
    
    
    api_key: String
    
    
    
    name: String?
    
    
    
    `record`: String?
    
    
    
    sandbox: Boolean?
    
    
}

class dnsimple_info extends playbook.task {
    hidden options: dnsimple_info_options

    `community.general.dnsimple_info`: dnsimple_info_options?

    function into(): dnsimple_info = this
        .toMap()
        .put("community.general.dnsimple_info", this.options)
        .toTyped(dnsimple_info)
}

//

class dnsmadeeasy_options {
    
    
    account_key: String
    
    
    
    account_secret: String
    
    
    
    autoFailover: Boolean?
    
    
    
    contactList: String?
    
    
    
    domain: String
    
    
    
    failover: Boolean?
    
    
    
    httpFile: String?
    
    
    
    httpFqdn: String?
    
    
    
    httpQueryString: String?
    
    
    
    ip1: String?
    
    
    
    ip2: String?
    
    
    
    ip3: String?
    
    
    
    ip4: String?
    
    
    
    ip5: String?
    
    
    
    maxEmails: Int?
    
    
    
    monitor: Boolean?
    
    
    
    port: Int?
    
    
    
    protocol: ("TCP"|"UDP"|"HTTP"|"DNS"|"SMTP"|"HTTPS")?
    
    
    
    record_name: String?
    
    
    
    record_ttl: Int?
    
    
    
    record_type: ("A"|"AAAA"|"CNAME"|"ANAME"|"HTTPRED"|"MX"|"NS"|"PTR"|"SRV"|"TXT")?
    
    
    
    record_value: String?
    
    
    
    sandbox: Boolean?
    
    
    
    sensitivity: ("Low"|"Medium"|"High")?
    
    
    
    state: ("present"|"absent")
    
    
    
    systemDescription: String?
    
    
    
    validate_certs: Boolean?
    
    
}

class dnsmadeeasy extends playbook.task {
    hidden options: dnsmadeeasy_options

    `community.general.dnsmadeeasy`: dnsmadeeasy_options?

    function into(): dnsmadeeasy = this
        .toMap()
        .put("community.general.dnsmadeeasy", this.options)
        .toTyped(dnsmadeeasy)
}

//

class dpkg_divert_options {
    
    
    divert: String?
    
    
    
    force: Boolean?
    
    
    
    holder: String?
    
    
    
    path: String
    
    
    
    rename: Boolean?
    
    
    
    state: ("absent"|"present")?
    
    
}

class dpkg_divert extends playbook.task {
    hidden options: dpkg_divert_options

    `community.general.dpkg_divert`: dpkg_divert_options?

    function into(): dpkg_divert = this
        .toMap()
        .put("community.general.dpkg_divert", this.options)
        .toTyped(dpkg_divert)
}

//

class easy_install_options {
    
    
    executable: String?
    
    
    
    name: String
    
    
    
    state: ("present"|"latest")?
    
    
    
    virtualenv: String?
    
    
    
    virtualenv_command: String?
    
    
    
    virtualenv_site_packages: Boolean?
    
    
}

class easy_install extends playbook.task {
    hidden options: easy_install_options

    `community.general.easy_install`: easy_install_options?

    function into(): easy_install = this
        .toMap()
        .put("community.general.easy_install", this.options)
        .toTyped(easy_install)
}

//

class ejabberd_user_options {
    
    
    host: String
    
    
    
    logging: Boolean?
    
    
    
    password: String?
    
    
    
    state: ("present"|"absent")?
    
    
    
    username: String
    
    
}

class ejabberd_user extends playbook.task {
    hidden options: ejabberd_user_options

    `community.general.ejabberd_user`: ejabberd_user_options?

    function into(): ejabberd_user = this
        .toMap()
        .put("community.general.ejabberd_user", this.options)
        .toTyped(ejabberd_user)
}

//

class elasticsearch_plugin_options {
    
    
    force: Boolean?
    
    
    
    name: String
    
    
    
    plugin_bin: String?
    
    
    
    plugin_dir: String?
    
    
    
    proxy_host: String?
    
    
    
    proxy_port: String?
    
    
    
    src: String?
    
    
    
    state: ("present"|"absent")?
    
    
    
    timeout: String?
    
    
    
    url: String?
    
    
    
    version: String?
    
    
}

class elasticsearch_plugin extends playbook.task {
    hidden options: elasticsearch_plugin_options

    `community.general.elasticsearch_plugin`: elasticsearch_plugin_options?

    function into(): elasticsearch_plugin = this
        .toMap()
        .put("community.general.elasticsearch_plugin", this.options)
        .toTyped(elasticsearch_plugin)
}

//

class emc_vnx_sg_member_options {
    
    
    lunid: Int
    
    
    
    name: String
    
    
    
    state: ("present"|"absent")?
    
    
}

class emc_vnx_sg_member extends playbook.task {
    hidden options: emc_vnx_sg_member_options

    `community.general.emc_vnx_sg_member`: emc_vnx_sg_member_options?

    function into(): emc_vnx_sg_member = this
        .toMap()
        .put("community.general.emc_vnx_sg_member", this.options)
        .toTyped(emc_vnx_sg_member)
}

//

class etcd3_options {
    
    
    ca_cert: String?
    
    
    
    client_cert: String?
    
    
    
    client_key: String?
    
    
    
    host: String?
    
    
    
    key: String
    
    
    
    password: String?
    
    
    
    port: Int?
    
    
    
    state: ("present"|"absent")
    
    
    
    timeout: Int?
    
    
    
    user: String?
    
    
    
    value: String
    
    
}

class etcd3 extends playbook.task {
    hidden options: etcd3_options

    `community.general.etcd3`: etcd3_options?

    function into(): etcd3 = this
        .toMap()
        .put("community.general.etcd3", this.options)
        .toTyped(etcd3)
}

//

class facter_options {
    
    
    arguments: Listing<String>?
    
    
}

class facter extends playbook.task {
    hidden options: facter_options

    `community.general.facter`: facter_options?

    function into(): facter = this
        .toMap()
        .put("community.general.facter", this.options)
        .toTyped(facter)
}

//

class facter_facts_options {
    
    
    arguments: Listing<String>?
    
    
}

class facter_facts extends playbook.task {
    hidden options: facter_facts_options

    `community.general.facter_facts`: facter_facts_options?

    function into(): facter_facts = this
        .toMap()
        .put("community.general.facter_facts", this.options)
        .toTyped(facter_facts)
}

//

class filesize_options {
    
    
    blocksize: String?
    
    
    
    force: Boolean?
    
    
    
    path: String
    
    
    
    size: String
    
    
    
    source: String?
    
    
    
    sparse: Boolean?
    
    
    
    unsafe_writes: String?
    
    
}

class filesize extends playbook.task {
    hidden options: filesize_options

    `community.general.filesize`: filesize_options?

    function into(): filesize = this
        .toMap()
        .put("community.general.filesize", this.options)
        .toTyped(filesize)
}

//

class filesystem_options {
    
    
    dev: String
    
    
    
    force: Boolean?
    
    
    
    fstype: ("btrfs"|"ext2"|"ext3"|"ext4"|"ext4dev"|"f2fs"|"lvm"|"ocfs2"|"reiserfs"|"xfs"|"vfat"|"swap"|"ufs")?
    
    
    
    opts: String?
    
    
    
    resizefs: Boolean?
    
    
    
    state: ("present"|"absent")?
    
    
    
    uuid: String?
    
    
}

class filesystem extends playbook.task {
    hidden options: filesystem_options

    `community.general.filesystem`: filesystem_options?

    function into(): filesystem = this
        .toMap()
        .put("community.general.filesystem", this.options)
        .toTyped(filesystem)
}

//

class flatpak_options {
    
    
    executable: String?
    
    
    
    method: ("system"|"user")?
    
    
    
    name: Listing<String>
    
    
    
    no_dependencies: Boolean?
    
    
    
    remote: String?
    
    
    
    state: ("absent"|"present")?
    
    
}

class flatpak extends playbook.task {
    hidden options: flatpak_options

    `community.general.flatpak`: flatpak_options?

    function into(): flatpak = this
        .toMap()
        .put("community.general.flatpak", this.options)
        .toTyped(flatpak)
}

//

class flatpak_remote_options {
    
    
    enabled: Boolean?
    
    
    
    executable: String?
    
    
    
    flatpakrepo_url: String?
    
    
    
    method: ("system"|"user")?
    
    
    
    name: String
    
    
    
    state: ("absent"|"present")?
    
    
}

class flatpak_remote extends playbook.task {
    hidden options: flatpak_remote_options

    `community.general.flatpak_remote`: flatpak_remote_options?

    function into(): flatpak_remote = this
        .toMap()
        .put("community.general.flatpak_remote", this.options)
        .toTyped(flatpak_remote)
}

//

class flowdock_options {
    
    
    external_user_name: String?
    
    
    
    from_address: String?
    
    
    
    from_name: String?
    
    
    
    link: String?
    
    
    
    msg: String
    
    
    
    project: String?
    
    
    
    reply_to: String?
    
    
    
    source: String?
    
    
    
    subject: String?
    
    
    
    tags: String?
    
    
    
    token: String
    
    
    
    type: ("inbox"|"chat")
    
    
    
    validate_certs: Boolean?
    
    
}

class flowdock extends playbook.task {
    hidden options: flowdock_options

    `community.general.flowdock`: flowdock_options?

    function into(): flowdock = this
        .toMap()
        .put("community.general.flowdock", this.options)
        .toTyped(flowdock)
}

//

class gandi_livedns_options {
    
    
    api_key: String
    
    
    
    domain: String
    
    
    
    `record`: String
    
    
    
    state: ("absent"|"present")?
    
    
    
    ttl: Int?
    
    
    
    type: String
    
    
    
    values: Listing<String>?
    
    
}

class gandi_livedns extends playbook.task {
    hidden options: gandi_livedns_options

    `community.general.gandi_livedns`: gandi_livedns_options?

    function into(): gandi_livedns = this
        .toMap()
        .put("community.general.gandi_livedns", this.options)
        .toTyped(gandi_livedns)
}

//

class gconftool2_options {
    
    
    config_source: String?
    
    
    
    direct: Boolean?
    
    
    
    key: String
    
    
    
    state: ("absent"|"present")
    
    
    
    value: String?
    
    
    
    value_type: ("bool"|"float"|"int"|"string")?
    
    
}

class gconftool2 extends playbook.task {
    hidden options: gconftool2_options

    `community.general.gconftool2`: gconftool2_options?

    function into(): gconftool2 = this
        .toMap()
        .put("community.general.gconftool2", this.options)
        .toTyped(gconftool2)
}

//

class gconftool2_info_options {
    
    
    key: String
    
    
}

class gconftool2_info extends playbook.task {
    hidden options: gconftool2_info_options

    `community.general.gconftool2_info`: gconftool2_info_options?

    function into(): gconftool2_info = this
        .toMap()
        .put("community.general.gconftool2_info", this.options)
        .toTyped(gconftool2_info)
}

//

class gem_options {
    
    
    bindir: String?
    
    
    
    build_flags: String?
    
    
    
    env_shebang: Boolean?
    
    
    
    executable: String?
    
    
    
    force: Boolean?
    
    
    
    gem_source: String?
    
    
    
    include_dependencies: Boolean?
    
    
    
    include_doc: Boolean?
    
    
    
    install_dir: String?
    
    
    
    name: String
    
    
    
    norc: Boolean?
    
    
    
    pre_release: Boolean?
    
    
    
    repository: String?
    
    
    
    state: ("present"|"absent"|"latest")?
    
    
    
    user_install: Boolean?
    
    
    
    version: String?
    
    
}

class gem extends playbook.task {
    hidden options: gem_options

    `community.general.gem`: gem_options?

    function into(): gem = this
        .toMap()
        .put("community.general.gem", this.options)
        .toTyped(gem)
}

//

class gio_mime_options {
    
    
    handler: String
    
    
    
    mime_type: String
    
    
}

class gio_mime extends playbook.task {
    hidden options: gio_mime_options

    `community.general.gio_mime`: gio_mime_options?

    function into(): gio_mime = this
        .toMap()
        .put("community.general.gio_mime", this.options)
        .toTyped(gio_mime)
}

//

class git_config_options {
    
    
    add_mode: ("add"|"replace-all")?
    
    
    
    file: String?
    
    
    
    list_all: Boolean?
    
    
    
    name: String?
    
    
    
    repo: String?
    
    
    
    scope: ("file"|"local"|"global"|"system")?
    
    
    
    state: ("present"|"absent")?
    
    
    
    value: String?
    
    
}

class git_config extends playbook.task {
    hidden options: git_config_options

    `community.general.git_config`: git_config_options?

    function into(): git_config = this
        .toMap()
        .put("community.general.git_config", this.options)
        .toTyped(git_config)
}

//

class git_config_info_options {
    
    
    name: String?
    
    
    
    path: String?
    
    
    
    scope: ("global"|"system"|"local"|"file")?
    
    
}

class git_config_info extends playbook.task {
    hidden options: git_config_info_options

    `community.general.git_config_info`: git_config_info_options?

    function into(): git_config_info = this
        .toMap()
        .put("community.general.git_config_info", this.options)
        .toTyped(git_config_info)
}

//

class github_deploy_key_options {
    
    
    force: Boolean?
    
    
    
    github_url: String?
    
    
    
    key: String
    
    
    
    name: String
    
    
    
    otp: Int?
    
    
    
    owner: String
    
    
    
    password: String?
    
    
    
    read_only: Boolean?
    
    
    
    repo: String
    
    
    
    state: ("present"|"absent")?
    
    
    
    token: String?
    
    
    
    username: String?
    
    
}

class github_deploy_key extends playbook.task {
    hidden options: github_deploy_key_options

    `community.general.github_deploy_key`: github_deploy_key_options?

    function into(): github_deploy_key = this
        .toMap()
        .put("community.general.github_deploy_key", this.options)
        .toTyped(github_deploy_key)
}

//

class github_issue_options {
    
    
    action: ("get_status")?
    
    
    
    issue: Int
    
    
    
    organization: String
    
    
    
    repo: String
    
    
}

class github_issue extends playbook.task {
    hidden options: github_issue_options

    `community.general.github_issue`: github_issue_options?

    function into(): github_issue = this
        .toMap()
        .put("community.general.github_issue", this.options)
        .toTyped(github_issue)
}

//

class github_key_options {
    
    
    force: Boolean?
    
    
    
    name: String
    
    
    
    pubkey: String?
    
    
    
    state: ("present"|"absent")?
    
    
    
    token: String
    
    
}

class github_key extends playbook.task {
    hidden options: github_key_options

    `community.general.github_key`: github_key_options?

    function into(): github_key = this
        .toMap()
        .put("community.general.github_key", this.options)
        .toTyped(github_key)
}

//

class github_release_options {
    
    
    action: ("latest_release"|"create_release")
    
    
    
    body: String?
    
    
    
    draft: Boolean?
    
    
    
    name: String?
    
    
    
    password: String?
    
    
    
    prerelease: Boolean?
    
    
    
    repo: String
    
    
    
    tag: String?
    
    
    
    target: String?
    
    
    
    token: String?
    
    
    
    user: String
    
    
}

class github_release extends playbook.task {
    hidden options: github_release_options

    `community.general.github_release`: github_release_options?

    function into(): github_release = this
        .toMap()
        .put("community.general.github_release", this.options)
        .toTyped(github_release)
}

//

class github_repo_options {
    
    
    access_token: String?
    
    
    
    api_url: String?
    
    
    
    description: String?
    
    
    
    force_defaults: Boolean?
    
    
    
    name: String
    
    
    
    organization: String?
    
    
    
    password: String?
    
    
    
    private: Boolean?
    
    
    
    state: ("absent"|"present")?
    
    
    
    username: String?
    
    
}

class github_repo extends playbook.task {
    hidden options: github_repo_options

    `community.general.github_repo`: github_repo_options?

    function into(): github_repo = this
        .toMap()
        .put("community.general.github_repo", this.options)
        .toTyped(github_repo)
}

//

class github_webhook_options {
    
    
    active: Boolean?
    
    
    
    content_type: ("form"|"json")?
    
    
    
    events: Listing<String>?
    
    
    
    github_url: String?
    
    
    
    insecure_ssl: Boolean?
    
    
    
    password: String?
    
    
    
    repository: String
    
    
    
    secret: String?
    
    
    
    state: ("absent"|"present")?
    
    
    
    token: String?
    
    
    
    url: String
    
    
    
    user: String
    
    
}

class github_webhook extends playbook.task {
    hidden options: github_webhook_options

    `community.general.github_webhook`: github_webhook_options?

    function into(): github_webhook = this
        .toMap()
        .put("community.general.github_webhook", this.options)
        .toTyped(github_webhook)
}

//

class github_webhook_info_options {
    
    
    github_url: String?
    
    
    
    password: String?
    
    
    
    repository: String
    
    
    
    token: String?
    
    
    
    user: String
    
    
}

class github_webhook_info extends playbook.task {
    hidden options: github_webhook_info_options

    `community.general.github_webhook_info`: github_webhook_info_options?

    function into(): github_webhook_info = this
        .toMap()
        .put("community.general.github_webhook_info", this.options)
        .toTyped(github_webhook_info)
}

//

class gitlab_branch_options {
    
    
    branch: String
    
    
    
    project: String
    
    
    
    ref_branch: String?
    
    
    
    state: ("present"|"absent")?
    
    
}

class gitlab_branch extends playbook.task {
    hidden options: gitlab_branch_options

    `community.general.gitlab_branch`: gitlab_branch_options?

    function into(): gitlab_branch = this
        .toMap()
        .put("community.general.gitlab_branch", this.options)
        .toTyped(gitlab_branch)
}

//

class gitlab_deploy_key_options {
    
    
    can_push: Boolean?
    
    
    
    key: String
    
    
    
    project: String
    
    
    
    state: ("present"|"absent")?
    
    
    
    title: String
    
    
}

class gitlab_deploy_key extends playbook.task {
    hidden options: gitlab_deploy_key_options

    `community.general.gitlab_deploy_key`: gitlab_deploy_key_options?

    function into(): gitlab_deploy_key = this
        .toMap()
        .put("community.general.gitlab_deploy_key", this.options)
        .toTyped(gitlab_deploy_key)
}

//

class gitlab_group_options {
    
    
    auto_devops_enabled: Boolean?
    
    
    
    avatar_path: String?
    
    
    
    description: String?
    
    
    
    force_delete: Boolean?
    
    
    
    name: String
    
    
    
    parent: String?
    
    
    
    path: String?
    
    
    
    project_creation_level: ("developer"|"maintainer"|"noone")?
    
    
    
    require_two_factor_authentication: Boolean?
    
    
    
    state: ("present"|"absent")?
    
    
    
    subgroup_creation_level: ("maintainer"|"owner")?
    
    
    
    visibility: ("private"|"internal"|"public")?
    
    
}

class gitlab_group extends playbook.task {
    hidden options: gitlab_group_options

    `community.general.gitlab_group`: gitlab_group_options?

    function into(): gitlab_group = this
        .toMap()
        .put("community.general.gitlab_group", this.options)
        .toTyped(gitlab_group)
}

//

class gitlab_group_access_token_options {
    
    
    access_level: ("guest"|"reporter"|"developer"|"maintainer"|"owner")?
    
    
    
    expires_at: String
    
    
    
    group: String
    
    
    
    name: String
    
    
    
    recreate: ("never"|"always"|"state_change")?
    
    
    
    scopes: Listing<("api"|"read_api"|"read_registry"|"write_registry"|"read_repository"|"write_repository"|"create_runner"|"ai_features"|"k8s_proxy")>
    
    
    
    state: ("present"|"absent")?
    
    
}

class gitlab_group_access_token extends playbook.task {
    hidden options: gitlab_group_access_token_options

    `community.general.gitlab_group_access_token`: gitlab_group_access_token_options?

    function into(): gitlab_group_access_token = this
        .toMap()
        .put("community.general.gitlab_group_access_token", this.options)
        .toTyped(gitlab_group_access_token)
}

//

class gitlab_group_members_options {
    
    
    access_level: ("guest"|"reporter"|"developer"|"maintainer"|"owner")?
    
    
    
    gitlab_group: String
    
    
    
    gitlab_user: Listing<String>?
    
    
    
    gitlab_users_access: Listing<String>?
    
    
    
    purge_users: Listing<("guest"|"reporter"|"developer"|"maintainer"|"owner")>?
    
    
    
    state: ("present"|"absent")?
    
    
}

class gitlab_group_members extends playbook.task {
    hidden options: gitlab_group_members_options

    `community.general.gitlab_group_members`: gitlab_group_members_options?

    function into(): gitlab_group_members = this
        .toMap()
        .put("community.general.gitlab_group_members", this.options)
        .toTyped(gitlab_group_members)
}

//

class gitlab_group_variable_options {
    
    
    group: String
    
    
    
    purge: Boolean?
    
    
    
    state: ("present"|"absent")?
    
    
    
    variables: Listing<String>?
    
    
    
    vars: String?
    
    
}

class gitlab_group_variable extends playbook.task {
    hidden options: gitlab_group_variable_options

    `community.general.gitlab_group_variable`: gitlab_group_variable_options?

    function into(): gitlab_group_variable = this
        .toMap()
        .put("community.general.gitlab_group_variable", this.options)
        .toTyped(gitlab_group_variable)
}

//

class gitlab_hook_options {
    
    
    hook_url: String
    
    
    
    hook_validate_certs: Boolean?
    
    
    
    issues_events: Boolean?
    
    
    
    job_events: Boolean?
    
    
    
    merge_requests_events: Boolean?
    
    
    
    note_events: Boolean?
    
    
    
    pipeline_events: Boolean?
    
    
    
    project: String
    
    
    
    push_events: Boolean?
    
    
    
    push_events_branch_filter: String?
    
    
    
    releases_events: Boolean?
    
    
    
    state: ("present"|"absent")?
    
    
    
    tag_push_events: Boolean?
    
    
    
    token: String?
    
    
    
    wiki_page_events: Boolean?
    
    
}

class gitlab_hook extends playbook.task {
    hidden options: gitlab_hook_options

    `community.general.gitlab_hook`: gitlab_hook_options?

    function into(): gitlab_hook = this
        .toMap()
        .put("community.general.gitlab_hook", this.options)
        .toTyped(gitlab_hook)
}

//

class gitlab_instance_variable_options {
    
    
    purge: Boolean?
    
    
    
    state: ("present"|"absent")?
    
    
    
    variables: Listing<String>?
    
    
}

class gitlab_instance_variable extends playbook.task {
    hidden options: gitlab_instance_variable_options

    `community.general.gitlab_instance_variable`: gitlab_instance_variable_options?

    function into(): gitlab_instance_variable = this
        .toMap()
        .put("community.general.gitlab_instance_variable", this.options)
        .toTyped(gitlab_instance_variable)
}

//

class gitlab_issue_options {
    
    
    assignee_ids: Listing<String>?
    
    
    
    description: String?
    
    
    
    description_path: String?
    
    
    
    issue_type: ("issue"|"incident"|"test_case")?
    
    
    
    labels: Listing<String>?
    
    
    
    milestone_group_id: String?
    
    
    
    milestone_search: String?
    
    
    
    project: String
    
    
    
    state: ("present"|"absent")?
    
    
    
    state_filter: ("opened"|"closed")?
    
    
    
    title: String
    
    
}

class gitlab_issue extends playbook.task {
    hidden options: gitlab_issue_options

    `community.general.gitlab_issue`: gitlab_issue_options?

    function into(): gitlab_issue = this
        .toMap()
        .put("community.general.gitlab_issue", this.options)
        .toTyped(gitlab_issue)
}

//

class gitlab_label_options {
    
    
    group: String?
    
    
    
    labels: Listing<String>?
    
    
    
    project: String?
    
    
    
    purge: Boolean?
    
    
    
    state: ("present"|"absent")?
    
    
}

class gitlab_label extends playbook.task {
    hidden options: gitlab_label_options

    `community.general.gitlab_label`: gitlab_label_options?

    function into(): gitlab_label = this
        .toMap()
        .put("community.general.gitlab_label", this.options)
        .toTyped(gitlab_label)
}

//

class gitlab_merge_request_options {
    
    
    assignee_ids: String?
    
    
    
    description: String?
    
    
    
    description_path: String?
    
    
    
    labels: String?
    
    
    
    project: String
    
    
    
    remove_source_branch: Boolean?
    
    
    
    reviewer_ids: String?
    
    
    
    source_branch: String
    
    
    
    state: ("present"|"absent")?
    
    
    
    state_filter: ("opened"|"closed"|"locked"|"merged")?
    
    
    
    target_branch: String
    
    
    
    title: String
    
    
}

class gitlab_merge_request extends playbook.task {
    hidden options: gitlab_merge_request_options

    `community.general.gitlab_merge_request`: gitlab_merge_request_options?

    function into(): gitlab_merge_request = this
        .toMap()
        .put("community.general.gitlab_merge_request", this.options)
        .toTyped(gitlab_merge_request)
}

//

class gitlab_milestone_options {
    
    
    group: String?
    
    
    
    milestones: Listing<String>?
    
    
    
    project: String?
    
    
    
    purge: Boolean?
    
    
    
    state: ("present"|"absent")?
    
    
}

class gitlab_milestone extends playbook.task {
    hidden options: gitlab_milestone_options

    `community.general.gitlab_milestone`: gitlab_milestone_options?

    function into(): gitlab_milestone = this
        .toMap()
        .put("community.general.gitlab_milestone", this.options)
        .toTyped(gitlab_milestone)
}

//

class gitlab_project_options {
    
    
    allow_merge_on_skipped_pipeline: Boolean?
    
    
    
    avatar_path: String?
    
    
    
    builds_access_level: ("private"|"disabled"|"enabled")?
    
    
    
    ci_config_path: String?
    
    
    
    container_registry_access_level: ("private"|"disabled"|"enabled")?
    
    
    
    default_branch: String?
    
    
    
    description: String?
    
    
    
    environments_access_level: ("private"|"disabled"|"enabled")?
    
    
    
    feature_flags_access_level: ("private"|"disabled"|"enabled")?
    
    
    
    forking_access_level: ("private"|"disabled"|"enabled")?
    
    
    
    group: String?
    
    
    
    import_url: String?
    
    
    
    infrastructure_access_level: ("private"|"disabled"|"enabled")?
    
    
    
    initialize_with_readme: Boolean?
    
    
    
    issues_enabled: Boolean?
    
    
    
    lfs_enabled: Boolean?
    
    
    
    merge_method: ("ff"|"merge"|"rebase_merge")?
    
    
    
    merge_requests_enabled: Boolean?
    
    
    
    monitor_access_level: ("private"|"disabled"|"enabled")?
    
    
    
    name: String
    
    
    
    only_allow_merge_if_all_discussions_are_resolved: Boolean?
    
    
    
    only_allow_merge_if_pipeline_succeeds: Boolean?
    
    
    
    packages_enabled: Boolean?
    
    
    
    path: String?
    
    
    
    releases_access_level: ("private"|"disabled"|"enabled")?
    
    
    
    remove_source_branch_after_merge: Boolean?
    
    
    
    security_and_compliance_access_level: ("private"|"disabled"|"enabled")?
    
    
    
    shared_runners_enabled: Boolean?
    
    
    
    snippets_enabled: Boolean?
    
    
    
    squash_option: ("never"|"always"|"default_off"|"default_on")?
    
    
    
    state: ("present"|"absent")?
    
    
    
    topics: Listing<String>?
    
    
    
    username: String?
    
    
    
    visibility: ("private"|"internal"|"public")?
    
    
    
    wiki_enabled: Boolean?
    
    
}

class gitlab_project extends playbook.task {
    hidden options: gitlab_project_options

    `community.general.gitlab_project`: gitlab_project_options?

    function into(): gitlab_project = this
        .toMap()
        .put("community.general.gitlab_project", this.options)
        .toTyped(gitlab_project)
}

//

class gitlab_project_access_token_options {
    
    
    access_level: ("guest"|"reporter"|"developer"|"maintainer"|"owner")?
    
    
    
    expires_at: String
    
    
    
    name: String
    
    
    
    project: String
    
    
    
    recreate: ("never"|"always"|"state_change")?
    
    
    
    scopes: Listing<("api"|"read_api"|"read_registry"|"write_registry"|"read_repository"|"write_repository"|"create_runner"|"ai_features"|"k8s_proxy")>
    
    
    
    state: ("present"|"absent")?
    
    
}

class gitlab_project_access_token extends playbook.task {
    hidden options: gitlab_project_access_token_options

    `community.general.gitlab_project_access_token`: gitlab_project_access_token_options?

    function into(): gitlab_project_access_token = this
        .toMap()
        .put("community.general.gitlab_project_access_token", this.options)
        .toTyped(gitlab_project_access_token)
}

//

class gitlab_project_badge_options {
    
    
    image_url: String
    
    
    
    link_url: String
    
    
    
    project: String
    
    
    
    state: ("present"|"absent")?
    
    
}

class gitlab_project_badge extends playbook.task {
    hidden options: gitlab_project_badge_options

    `community.general.gitlab_project_badge`: gitlab_project_badge_options?

    function into(): gitlab_project_badge = this
        .toMap()
        .put("community.general.gitlab_project_badge", this.options)
        .toTyped(gitlab_project_badge)
}

//

class gitlab_project_members_options {
    
    
    access_level: ("guest"|"reporter"|"developer"|"maintainer")?
    
    
    
    gitlab_user: Listing<String>?
    
    
    
    gitlab_users_access: Listing<String>?
    
    
    
    project: String
    
    
    
    purge_users: Listing<("guest"|"reporter"|"developer"|"maintainer")>?
    
    
    
    state: ("present"|"absent")?
    
    
}

class gitlab_project_members extends playbook.task {
    hidden options: gitlab_project_members_options

    `community.general.gitlab_project_members`: gitlab_project_members_options?

    function into(): gitlab_project_members = this
        .toMap()
        .put("community.general.gitlab_project_members", this.options)
        .toTyped(gitlab_project_members)
}

//

class gitlab_project_variable_options {
    
    
    project: String
    
    
    
    purge: Boolean?
    
    
    
    state: ("present"|"absent")?
    
    
    
    variables: Listing<String>?
    
    
    
    vars: String?
    
    
}

class gitlab_project_variable extends playbook.task {
    hidden options: gitlab_project_variable_options

    `community.general.gitlab_project_variable`: gitlab_project_variable_options?

    function into(): gitlab_project_variable = this
        .toMap()
        .put("community.general.gitlab_project_variable", this.options)
        .toTyped(gitlab_project_variable)
}

//

class gitlab_protected_branch_options {
    
    
    merge_access_levels: ("maintainer"|"developer"|"nobody")?
    
    
    
    name: String
    
    
    
    project: String
    
    
    
    push_access_level: ("maintainer"|"developer"|"nobody")?
    
    
    
    state: ("present"|"absent")?
    
    
}

class gitlab_protected_branch extends playbook.task {
    hidden options: gitlab_protected_branch_options

    `community.general.gitlab_protected_branch`: gitlab_protected_branch_options?

    function into(): gitlab_protected_branch = this
        .toMap()
        .put("community.general.gitlab_protected_branch", this.options)
        .toTyped(gitlab_protected_branch)
}

//

class gitlab_runner_options {
    
    
    access_level: ("not_protected"|"ref_protected")?
    
    
    
    access_level_on_creation: Boolean?
    
    
    
    active: Boolean?
    
    
    
    description: String
    
    
    
    group: String?
    
    
    
    locked: Boolean?
    
    
    
    maximum_timeout: Int?
    
    
    
    owned: Boolean?
    
    
    
    paused: Boolean?
    
    
    
    project: String?
    
    
    
    registration_token: String?
    
    
    
    run_untagged: Boolean?
    
    
    
    state: ("present"|"absent")?
    
    
    
    tag_list: Listing<String>?
    
    
}

class gitlab_runner extends playbook.task {
    hidden options: gitlab_runner_options

    `community.general.gitlab_runner`: gitlab_runner_options?

    function into(): gitlab_runner = this
        .toMap()
        .put("community.general.gitlab_runner", this.options)
        .toTyped(gitlab_runner)
}

//

class gitlab_user_options {
    
    
    access_level: ("guest"|"reporter"|"developer"|"master"|"maintainer"|"owner")?
    
    
    
    confirm: Boolean?
    
    
    
    email: String?
    
    
    
    `external`: Boolean?
    
    
    
    group: String?
    
    
    
    identities: Listing<String>?
    
    
    
    isadmin: Boolean?
    
    
    
    name: String?
    
    
    
    overwrite_identities: Boolean?
    
    
    
    password: String?
    
    
    
    reset_password: Boolean?
    
    
    
    sshkey_expires_at: String?
    
    
    
    sshkey_file: String?
    
    
    
    sshkey_name: String?
    
    
    
    state: ("present"|"absent"|"blocked"|"unblocked")?
    
    
    
    username: String
    
    
}

class gitlab_user extends playbook.task {
    hidden options: gitlab_user_options

    `community.general.gitlab_user`: gitlab_user_options?

    function into(): gitlab_user = this
        .toMap()
        .put("community.general.gitlab_user", this.options)
        .toTyped(gitlab_user)
}

//

class grove_options {
    
    
    channel_token: String
    
    
    
    icon_url: String?
    
    
    
    message_content: String
    
    
    
    service: String?
    
    
    
    url: String?
    
    
    
    validate_certs: Boolean?
    
    
}

class grove extends playbook.task {
    hidden options: grove_options

    `community.general.grove`: grove_options?

    function into(): grove = this
        .toMap()
        .put("community.general.grove", this.options)
        .toTyped(grove)
}

//

class gunicorn_options {
    
    
    app: String
    
    
    
    chdir: String?
    
    
    
    config: String?
    
    
    
    pid: String?
    
    
    
    user: String?
    
    
    
    venv: String?
    
    
    
    worker: ("sync"|"eventlet"|"gevent"|"tornado "|"gthread"|"gaiohttp")?
    
    
}

class gunicorn extends playbook.task {
    hidden options: gunicorn_options

    `community.general.gunicorn`: gunicorn_options?

    function into(): gunicorn = this
        .toMap()
        .put("community.general.gunicorn", this.options)
        .toTyped(gunicorn)
}

//

class haproxy_options {
    
    
    agent: Boolean?
    
    
    
    backend: String?
    
    
    
    drain: Boolean?
    
    
    
    fail_on_not_found: Boolean?
    
    
    
    health: Boolean?
    
    
    
    host: String
    
    
    
    shutdown_sessions: Boolean?
    
    
    
    socket: String?
    
    
    
    state: ("disabled"|"drain"|"enabled")
    
    
    
    wait: Boolean?
    
    
    
    wait_interval: Int?
    
    
    
    wait_retries: Int?
    
    
    
    weight: String?
    
    
}

class haproxy extends playbook.task {
    hidden options: haproxy_options

    `community.general.haproxy`: haproxy_options?

    function into(): haproxy = this
        .toMap()
        .put("community.general.haproxy", this.options)
        .toTyped(haproxy)
}

//

class heroku_collaborator_options {
    
    
    api_key: String?
    
    
    
    apps: Listing<String>
    
    
    
    state: ("present"|"absent")?
    
    
    
    suppress_invitation: Boolean?
    
    
    
    user: String
    
    
}

class heroku_collaborator extends playbook.task {
    hidden options: heroku_collaborator_options

    `community.general.heroku_collaborator`: heroku_collaborator_options?

    function into(): heroku_collaborator = this
        .toMap()
        .put("community.general.heroku_collaborator", this.options)
        .toTyped(heroku_collaborator)
}

//

class hg_options {
    
    
    clone: Boolean?
    
    
    
    dest: String?
    
    
    
    executable: String?
    
    
    
    force: Boolean?
    
    
    
    purge: Boolean?
    
    
    
    repo: String
    
    
    
    revision: String?
    
    
    
    update: Boolean?
    
    
}

class hg extends playbook.task {
    hidden options: hg_options

    `community.general.hg`: hg_options?

    function into(): hg = this
        .toMap()
        .put("community.general.hg", this.options)
        .toTyped(hg)
}

//

class hipchat_options {
    
    
    api: String?
    
    
    
    color: ("yellow"|"red"|"green"|"purple"|"gray"|"random")?
    
    
    
    msg: String
    
    
    
    msg_format: ("text"|"html")?
    
    
    
    msg_from: String?
    
    
    
    notify: Boolean?
    
    
    
    room: String
    
    
    
    token: String
    
    
    
    validate_certs: Boolean?
    
    
}

class hipchat extends playbook.task {
    hidden options: hipchat_options

    `community.general.hipchat`: hipchat_options?

    function into(): hipchat = this
        .toMap()
        .put("community.general.hipchat", this.options)
        .toTyped(hipchat)
}

//

class homebrew_options {
    
    
    install_options: Listing<String>?
    
    
    
    name: Listing<String>?
    
    
    
    path: String?
    
    
    
    state: ("absent"|"head"|"installed"|"latest"|"linked"|"present"|"removed"|"uninstalled"|"unlinked"|"upgraded")?
    
    
    
    update_homebrew: Boolean?
    
    
    
    upgrade_all: Boolean?
    
    
    
    upgrade_options: Listing<String>?
    
    
}

class homebrew extends playbook.task {
    hidden options: homebrew_options

    `community.general.homebrew`: homebrew_options?

    function into(): homebrew = this
        .toMap()
        .put("community.general.homebrew", this.options)
        .toTyped(homebrew)
}

//

class homebrew_cask_options {
    
    
    accept_external_apps: Boolean?
    
    
    
    greedy: Boolean?
    
    
    
    install_options: Listing<String>?
    
    
    
    name: Listing<String>?
    
    
    
    path: String?
    
    
    
    state: ("absent"|"installed"|"latest"|"present"|"removed"|"uninstalled"|"upgraded")?
    
    
    
    sudo_password: String?
    
    
    
    update_homebrew: Boolean?
    
    
    
    upgrade_all: Boolean?
    
    
}

class homebrew_cask extends playbook.task {
    hidden options: homebrew_cask_options

    `community.general.homebrew_cask`: homebrew_cask_options?

    function into(): homebrew_cask = this
        .toMap()
        .put("community.general.homebrew_cask", this.options)
        .toTyped(homebrew_cask)
}

//

class homebrew_tap_options {
    
    
    name: Listing<String>
    
    
    
    path: String?
    
    
    
    state: ("present"|"absent")?
    
    
    
    url: String?
    
    
}

class homebrew_tap extends playbook.task {
    hidden options: homebrew_tap_options

    `community.general.homebrew_tap`: homebrew_tap_options?

    function into(): homebrew_tap = this
        .toMap()
        .put("community.general.homebrew_tap", this.options)
        .toTyped(homebrew_tap)
}

//

class homectl_options {
    
    
    disksize: String?
    
    
    
    email: String?
    
    
    
    environment: String?
    
    
    
    gid: Int?
    
    
    
    homedir: String?
    
    
    
    iconname: String?
    
    
    
    imagepath: String?
    
    
    
    language: String?
    
    
    
    location: String?
    
    
    
    locked: Boolean?
    
    
    
    memberof: String?
    
    
    
    mountopts: String?
    
    
    
    name: String
    
    
    
    notafter: Int?
    
    
    
    notbefore: Int?
    
    
    
    password: String?
    
    
    
    passwordhint: String?
    
    
    
    realm: String?
    
    
    
    realname: String?
    
    
    
    resize: Boolean?
    
    
    
    shell: String?
    
    
    
    skeleton: String?
    
    
    
    sshkeys: String?
    
    
    
    state: ("absent"|"present")?
    
    
    
    storage: ("classic"|"luks"|"directory"|"subvolume"|"fscrypt"|"cifs")?
    
    
    
    timezone: String?
    
    
    
    uid: Int?
    
    
    
    umask: Int?
    
    
}

class homectl extends playbook.task {
    hidden options: homectl_options

    `community.general.homectl`: homectl_options?

    function into(): homectl = this
        .toMap()
        .put("community.general.homectl", this.options)
        .toTyped(homectl)
}

//

class honeybadger_deployment_options {
    
    
    environment: String
    
    
    
    repo: String?
    
    
    
    revision: String?
    
    
    
    token: String
    
    
    
    url: String?
    
    
    
    user: String?
    
    
    
    validate_certs: Boolean?
    
    
}

class honeybadger_deployment extends playbook.task {
    hidden options: honeybadger_deployment_options

    `community.general.honeybadger_deployment`: honeybadger_deployment_options?

    function into(): honeybadger_deployment = this
        .toMap()
        .put("community.general.honeybadger_deployment", this.options)
        .toTyped(honeybadger_deployment)
}

//

class hpilo_boot_options {
    
    
    force: Boolean?
    
    
    
    host: String
    
    
    
    image: String?
    
    
    
    login: String?
    
    
    
    media: ("cdrom"|"floppy"|"rbsu"|"hdd"|"network"|"normal"|"usb")?
    
    
    
    password: String?
    
    
    
    ssl_version: ("SSLv3"|"SSLv23"|"TLSv1"|"TLSv1_1"|"TLSv1_2")?
    
    
    
    state: ("boot_always"|"boot_once"|"connect"|"disconnect"|"no_boot"|"poweroff")?
    
    
}

class hpilo_boot extends playbook.task {
    hidden options: hpilo_boot_options

    `community.general.hpilo_boot`: hpilo_boot_options?

    function into(): hpilo_boot = this
        .toMap()
        .put("community.general.hpilo_boot", this.options)
        .toTyped(hpilo_boot)
}

//

class hpilo_info_options {
    
    
    host: String
    
    
    
    login: String?
    
    
    
    password: String?
    
    
    
    ssl_version: ("SSLv3"|"SSLv23"|"TLSv1"|"TLSv1_1"|"TLSv1_2")?
    
    
}

class hpilo_info extends playbook.task {
    hidden options: hpilo_info_options

    `community.general.hpilo_info`: hpilo_info_options?

    function into(): hpilo_info = this
        .toMap()
        .put("community.general.hpilo_info", this.options)
        .toTyped(hpilo_info)
}

//

class hponcfg_options {
    
    
    executable: String?
    
    
    
    minfw: String?
    
    
    
    path: String
    
    
    
    verbose: Boolean?
    
    
}

class hponcfg extends playbook.task {
    hidden options: hponcfg_options

    `community.general.hponcfg`: hponcfg_options?

    function into(): hponcfg = this
        .toMap()
        .put("community.general.hponcfg", this.options)
        .toTyped(hponcfg)
}

//

class htpasswd_options {
    
    
    create: Boolean?
    
    
    
    hash_scheme: String?
    
    
    
    name: String
    
    
    
    password: String?
    
    
    
    path: String
    
    
    
    state: ("present"|"absent")?
    
    
}

class htpasswd extends playbook.task {
    hidden options: htpasswd_options

    `community.general.htpasswd`: htpasswd_options?

    function into(): htpasswd = this
        .toMap()
        .put("community.general.htpasswd", this.options)
        .toTyped(htpasswd)
}

//

class hwc_ecs_instance_options {
    
    
    admin_pass: String?
    
    
    
    availability_zone: String
    
    
    
    data_volumes: Listing<String>?
    
    
    
    description: String?
    
    
    
    eip_id: String?
    
    
    
    enable_auto_recovery: Boolean?
    
    
    
    enterprise_project_id: String?
    
    
    
    flavor_name: String
    
    
    
    image_id: String
    
    
    
    name: String
    
    
    
    nics: Listing<String>
    
    
    
    root_volume: String
    
    
    
    security_groups: Listing<String>?
    
    
    
    server_metadata: String?
    
    
    
    server_tags: String?
    
    
    
    ssh_key_name: String?
    
    
    
    state: ("present"|"absent")?
    
    
    
    timeouts: String?
    
    
    
    user_data: String?
    
    
    
    vpc_id: String
    
    
}

class hwc_ecs_instance extends playbook.task {
    hidden options: hwc_ecs_instance_options

    `community.general.hwc_ecs_instance`: hwc_ecs_instance_options?

    function into(): hwc_ecs_instance = this
        .toMap()
        .put("community.general.hwc_ecs_instance", this.options)
        .toTyped(hwc_ecs_instance)
}

//

class hwc_evs_disk_options {
    
    
    availability_zone: String
    
    
    
    backup_id: String?
    
    
    
    description: String?
    
    
    
    enable_full_clone: Boolean?
    
    
    
    enable_scsi: Boolean?
    
    
    
    enable_share: Boolean?
    
    
    
    encryption_id: String?
    
    
    
    enterprise_project_id: String?
    
    
    
    image_id: String?
    
    
    
    name: String
    
    
    
    size: Int?
    
    
    
    snapshot_id: String?
    
    
    
    state: ("present"|"absent")?
    
    
    
    timeouts: String?
    
    
    
    volume_type: String
    
    
}

class hwc_evs_disk extends playbook.task {
    hidden options: hwc_evs_disk_options

    `community.general.hwc_evs_disk`: hwc_evs_disk_options?

    function into(): hwc_evs_disk = this
        .toMap()
        .put("community.general.hwc_evs_disk", this.options)
        .toTyped(hwc_evs_disk)
}

//

class hwc_network_vpc_options {
    
    
    cidr: String
    
    
    
    name: String
    
    
    
    state: ("present"|"absent")?
    
    
    
    timeouts: String?
    
    
}

class hwc_network_vpc extends playbook.task {
    hidden options: hwc_network_vpc_options

    `community.general.hwc_network_vpc`: hwc_network_vpc_options?

    function into(): hwc_network_vpc = this
        .toMap()
        .put("community.general.hwc_network_vpc", this.options)
        .toTyped(hwc_network_vpc)
}

//

class hwc_smn_topic_options {
    
    
    display_name: String?
    
    
    
    name: String
    
    
    
    state: ("present"|"absent")?
    
    
}

class hwc_smn_topic extends playbook.task {
    hidden options: hwc_smn_topic_options

    `community.general.hwc_smn_topic`: hwc_smn_topic_options?

    function into(): hwc_smn_topic = this
        .toMap()
        .put("community.general.hwc_smn_topic", this.options)
        .toTyped(hwc_smn_topic)
}

//

class hwc_vpc_eip_options {
    
    
    dedicated_bandwidth: String?
    
    
    
    enterprise_project_id: String?
    
    
    
    ip_version: Int?
    
    
    
    ipv4_address: String?
    
    
    
    port_id: String?
    
    
    
    shared_bandwidth_id: String?
    
    
    
    state: ("present"|"absent")?
    
    
    
    timeouts: String?
    
    
    
    type: String
    
    
}

class hwc_vpc_eip extends playbook.task {
    hidden options: hwc_vpc_eip_options

    `community.general.hwc_vpc_eip`: hwc_vpc_eip_options?

    function into(): hwc_vpc_eip = this
        .toMap()
        .put("community.general.hwc_vpc_eip", this.options)
        .toTyped(hwc_vpc_eip)
}

//

class hwc_vpc_peering_connect_options {
    
    
    description: String?
    
    
    
    local_vpc_id: String
    
    
    
    name: String
    
    
    
    peering_vpc: String
    
    
    
    state: ("present"|"absent")?
    
    
    
    timeouts: String?
    
    
}

class hwc_vpc_peering_connect extends playbook.task {
    hidden options: hwc_vpc_peering_connect_options

    `community.general.hwc_vpc_peering_connect`: hwc_vpc_peering_connect_options?

    function into(): hwc_vpc_peering_connect = this
        .toMap()
        .put("community.general.hwc_vpc_peering_connect", this.options)
        .toTyped(hwc_vpc_peering_connect)
}

//

class hwc_vpc_port_options {
    
    
    admin_state_up: Boolean?
    
    
    
    allowed_address_pairs: Listing<String>?
    
    
    
    extra_dhcp_opts: Listing<String>?
    
    
    
    ip_address: String?
    
    
    
    name: String?
    
    
    
    security_groups: Listing<String>?
    
    
    
    state: ("present"|"absent")?
    
    
    
    subnet_id: String
    
    
    
    timeouts: String?
    
    
}

class hwc_vpc_port extends playbook.task {
    hidden options: hwc_vpc_port_options

    `community.general.hwc_vpc_port`: hwc_vpc_port_options?

    function into(): hwc_vpc_port = this
        .toMap()
        .put("community.general.hwc_vpc_port", this.options)
        .toTyped(hwc_vpc_port)
}

//

class hwc_vpc_private_ip_options {
    
    
    ip_address: String?
    
    
    
    state: ("present"|"absent")?
    
    
    
    subnet_id: String
    
    
}

class hwc_vpc_private_ip extends playbook.task {
    hidden options: hwc_vpc_private_ip_options

    `community.general.hwc_vpc_private_ip`: hwc_vpc_private_ip_options?

    function into(): hwc_vpc_private_ip = this
        .toMap()
        .put("community.general.hwc_vpc_private_ip", this.options)
        .toTyped(hwc_vpc_private_ip)
}

//

class hwc_vpc_route_options {
    
    
    destination: String
    
    
    
    next_hop: String
    
    
    
    state: ("present"|"absent")?
    
    
    
    type: String?
    
    
    
    vpc_id: String
    
    
}

class hwc_vpc_route extends playbook.task {
    hidden options: hwc_vpc_route_options

    `community.general.hwc_vpc_route`: hwc_vpc_route_options?

    function into(): hwc_vpc_route = this
        .toMap()
        .put("community.general.hwc_vpc_route", this.options)
        .toTyped(hwc_vpc_route)
}

//

class hwc_vpc_security_group_options {
    
    
    enterprise_project_id: String?
    
    
    
    name: String
    
    
    
    state: ("present"|"absent")?
    
    
    
    vpc_id: String?
    
    
}

class hwc_vpc_security_group extends playbook.task {
    hidden options: hwc_vpc_security_group_options

    `community.general.hwc_vpc_security_group`: hwc_vpc_security_group_options?

    function into(): hwc_vpc_security_group = this
        .toMap()
        .put("community.general.hwc_vpc_security_group", this.options)
        .toTyped(hwc_vpc_security_group)
}

//

class hwc_vpc_security_group_rule_options {
    
    
    description: String?
    
    
    
    direction: String
    
    
    
    ethertype: String?
    
    
    
    port_range_max: Int?
    
    
    
    port_range_min: Int?
    
    
    
    protocol: String?
    
    
    
    remote_group_id: String?
    
    
    
    remote_ip_prefix: String?
    
    
    
    security_group_id: String
    
    
    
    state: ("present"|"absent")?
    
    
}

class hwc_vpc_security_group_rule extends playbook.task {
    hidden options: hwc_vpc_security_group_rule_options

    `community.general.hwc_vpc_security_group_rule`: hwc_vpc_security_group_rule_options?

    function into(): hwc_vpc_security_group_rule = this
        .toMap()
        .put("community.general.hwc_vpc_security_group_rule", this.options)
        .toTyped(hwc_vpc_security_group_rule)
}

//

class hwc_vpc_subnet_options {
    
    
    availability_zone: String?
    
    
    
    cidr: String
    
    
    
    dhcp_enable: Boolean?
    
    
    
    dns_address: Listing<String>?
    
    
    
    gateway_ip: String
    
    
    
    name: String
    
    
    
    state: ("present"|"absent")?
    
    
    
    timeouts: String?
    
    
    
    vpc_id: String
    
    
}

class hwc_vpc_subnet extends playbook.task {
    hidden options: hwc_vpc_subnet_options

    `community.general.hwc_vpc_subnet`: hwc_vpc_subnet_options?

    function into(): hwc_vpc_subnet = this
        .toMap()
        .put("community.general.hwc_vpc_subnet", this.options)
        .toTyped(hwc_vpc_subnet)
}

//

class ibm_sa_domain_options {
    
    
    domain: String
    
    
    
    hard_capacity: String?
    
    
    
    ldap_id: String?
    
    
    
    max_cgs: String?
    
    
    
    max_dms: String?
    
    
    
    max_mirrors: String?
    
    
    
    max_pools: String?
    
    
    
    max_volumes: String?
    
    
    
    perf_class: String?
    
    
    
    size: String?
    
    
    
    soft_capacity: String?
    
    
    
    state: ("present"|"absent")?
    
    
}

class ibm_sa_domain extends playbook.task {
    hidden options: ibm_sa_domain_options

    `community.general.ibm_sa_domain`: ibm_sa_domain_options?

    function into(): ibm_sa_domain = this
        .toMap()
        .put("community.general.ibm_sa_domain", this.options)
        .toTyped(ibm_sa_domain)
}

//

class ibm_sa_host_options {
    
    
    cluster: String?
    
    
    
    domain: String?
    
    
    
    host: String
    
    
    
    iscsi_chap_name: String?
    
    
    
    iscsi_chap_secret: String?
    
    
    
    state: ("present"|"absent")?
    
    
}

class ibm_sa_host extends playbook.task {
    hidden options: ibm_sa_host_options

    `community.general.ibm_sa_host`: ibm_sa_host_options?

    function into(): ibm_sa_host = this
        .toMap()
        .put("community.general.ibm_sa_host", this.options)
        .toTyped(ibm_sa_host)
}

//

class ibm_sa_host_ports_options {
    
    
    fcaddress: String?
    
    
    
    host: String
    
    
    
    iscsi_name: String?
    
    
    
    num_of_visible_targets: String?
    
    
    
    state: ("present"|"absent")?
    
    
}

class ibm_sa_host_ports extends playbook.task {
    hidden options: ibm_sa_host_ports_options

    `community.general.ibm_sa_host_ports`: ibm_sa_host_ports_options?

    function into(): ibm_sa_host_ports = this
        .toMap()
        .put("community.general.ibm_sa_host_ports", this.options)
        .toTyped(ibm_sa_host_ports)
}

//

class ibm_sa_pool_options {
    
    
    domain: String?
    
    
    
    perf_class: String?
    
    
    
    pool: String
    
    
    
    size: String?
    
    
    
    snapshot_size: String?
    
    
    
    state: ("present"|"absent")?
    
    
}

class ibm_sa_pool extends playbook.task {
    hidden options: ibm_sa_pool_options

    `community.general.ibm_sa_pool`: ibm_sa_pool_options?

    function into(): ibm_sa_pool = this
        .toMap()
        .put("community.general.ibm_sa_pool", this.options)
        .toTyped(ibm_sa_pool)
}

//

class ibm_sa_vol_options {
    
    
    pool: String?
    
    
    
    size: String?
    
    
    
    state: ("present"|"absent")?
    
    
    
    vol: String
    
    
}

class ibm_sa_vol extends playbook.task {
    hidden options: ibm_sa_vol_options

    `community.general.ibm_sa_vol`: ibm_sa_vol_options?

    function into(): ibm_sa_vol = this
        .toMap()
        .put("community.general.ibm_sa_vol", this.options)
        .toTyped(ibm_sa_vol)
}

//

class ibm_sa_vol_map_options {
    
    
    cluster: String?
    
    
    
    host: String?
    
    
    
    lun: String?
    
    
    
    `override`: String?
    
    
    
    state: ("present"|"absent")?
    
    
    
    vol: String
    
    
}

class ibm_sa_vol_map extends playbook.task {
    hidden options: ibm_sa_vol_map_options

    `community.general.ibm_sa_vol_map`: ibm_sa_vol_map_options?

    function into(): ibm_sa_vol_map = this
        .toMap()
        .put("community.general.ibm_sa_vol_map", this.options)
        .toTyped(ibm_sa_vol_map)
}

//

class icinga2_feature_options {
    
    
    name: String
    
    
    
    state: ("present"|"absent")?
    
    
}

class icinga2_feature extends playbook.task {
    hidden options: icinga2_feature_options

    `community.general.icinga2_feature`: icinga2_feature_options?

    function into(): icinga2_feature = this
        .toMap()
        .put("community.general.icinga2_feature", this.options)
        .toTyped(icinga2_feature)
}

//

class icinga2_host_options {
    
    
    check_command: String?
    
    
    
    client_cert: String?
    
    
    
    client_key: String?
    
    
    
    display_name: String?
    
    
    
    force_basic_auth: Boolean?
    
    
    
    ip: String?
    
    
    
    name: String
    
    
    
    state: ("present"|"absent")?
    
    
    
    template: String?
    
    
    
    url: String?
    
    
    
    url_password: String?
    
    
    
    url_username: String?
    
    
    
    use_proxy: Boolean?
    
    
    
    validate_certs: Boolean?
    
    
    
    variables: String?
    
    
    
    zone: String?
    
    
}

class icinga2_host extends playbook.task {
    hidden options: icinga2_host_options

    `community.general.icinga2_host`: icinga2_host_options?

    function into(): icinga2_host = this
        .toMap()
        .put("community.general.icinga2_host", this.options)
        .toTyped(icinga2_host)
}

//

class idrac_redfish_command_options {
    
    
    auth_token: String?
    
    
    
    baseuri: String
    
    
    
    category: String
    
    
    
    command: Listing<String>
    
    
    
    password: String?
    
    
    
    resource_id: String?
    
    
    
    timeout: Int?
    
    
    
    username: String?
    
    
}

class idrac_redfish_command extends playbook.task {
    hidden options: idrac_redfish_command_options

    `community.general.idrac_redfish_command`: idrac_redfish_command_options?

    function into(): idrac_redfish_command = this
        .toMap()
        .put("community.general.idrac_redfish_command", this.options)
        .toTyped(idrac_redfish_command)
}

//

class idrac_redfish_config_options {
    
    
    auth_token: String?
    
    
    
    baseuri: String
    
    
    
    category: String
    
    
    
    command: Listing<String>
    
    
    
    manager_attributes: String?
    
    
    
    password: String?
    
    
    
    resource_id: String?
    
    
    
    timeout: Int?
    
    
    
    username: String?
    
    
}

class idrac_redfish_config extends playbook.task {
    hidden options: idrac_redfish_config_options

    `community.general.idrac_redfish_config`: idrac_redfish_config_options?

    function into(): idrac_redfish_config = this
        .toMap()
        .put("community.general.idrac_redfish_config", this.options)
        .toTyped(idrac_redfish_config)
}

//

class idrac_redfish_info_options {
    
    
    auth_token: String?
    
    
    
    baseuri: String
    
    
    
    category: String
    
    
    
    command: Listing<String>
    
    
    
    password: String?
    
    
    
    timeout: Int?
    
    
    
    username: String?
    
    
}

class idrac_redfish_info extends playbook.task {
    hidden options: idrac_redfish_info_options

    `community.general.idrac_redfish_info`: idrac_redfish_info_options?

    function into(): idrac_redfish_info = this
        .toMap()
        .put("community.general.idrac_redfish_info", this.options)
        .toTyped(idrac_redfish_info)
}

//

class ilo_redfish_command_options {
    
    
    auth_token: String?
    
    
    
    baseuri: String
    
    
    
    category: ("Systems")
    
    
    
    command: Listing<String>
    
    
    
    password: String?
    
    
    
    timeout: Int?
    
    
    
    username: String?
    
    
}

class ilo_redfish_command extends playbook.task {
    hidden options: ilo_redfish_command_options

    `community.general.ilo_redfish_command`: ilo_redfish_command_options?

    function into(): ilo_redfish_command = this
        .toMap()
        .put("community.general.ilo_redfish_command", this.options)
        .toTyped(ilo_redfish_command)
}

//

class ilo_redfish_config_options {
    
    
    attribute_name: String
    
    
    
    attribute_value: String?
    
    
    
    auth_token: String?
    
    
    
    baseuri: String
    
    
    
    category: ("Manager")
    
    
    
    command: Listing<String>
    
    
    
    password: String?
    
    
    
    timeout: Int?
    
    
    
    username: String?
    
    
}

class ilo_redfish_config extends playbook.task {
    hidden options: ilo_redfish_config_options

    `community.general.ilo_redfish_config`: ilo_redfish_config_options?

    function into(): ilo_redfish_config = this
        .toMap()
        .put("community.general.ilo_redfish_config", this.options)
        .toTyped(ilo_redfish_config)
}

//

class ilo_redfish_info_options {
    
    
    auth_token: String?
    
    
    
    baseuri: String
    
    
    
    category: Listing<String>
    
    
    
    command: Listing<String>
    
    
    
    password: String?
    
    
    
    timeout: Int?
    
    
    
    username: String?
    
    
}

class ilo_redfish_info extends playbook.task {
    hidden options: ilo_redfish_info_options

    `community.general.ilo_redfish_info`: ilo_redfish_info_options?

    function into(): ilo_redfish_info = this
        .toMap()
        .put("community.general.ilo_redfish_info", this.options)
        .toTyped(ilo_redfish_info)
}

//

class imc_rest_options {
    
    
    content: String?
    
    
    
    hostname: String
    
    
    
    password: String?
    
    
    
    path: String?
    
    
    
    protocol: ("http"|"https")?
    
    
    
    timeout: Int?
    
    
    
    username: String?
    
    
    
    validate_certs: Boolean?
    
    
}

class imc_rest extends playbook.task {
    hidden options: imc_rest_options

    `community.general.imc_rest`: imc_rest_options?

    function into(): imc_rest = this
        .toMap()
        .put("community.general.imc_rest", this.options)
        .toTyped(imc_rest)
}

//

class imgadm_options {
    
    
    force: Boolean?
    
    
    
    pool: String?
    
    
    
    source: String?
    
    
    
    state: ("present"|"absent"|"deleted"|"imported"|"updated"|"vacuumed")
    
    
    
    type: ("imgapi"|"docker"|"dsapi")?
    
    
    
    uuid: String?
    
    
}

class imgadm extends playbook.task {
    hidden options: imgadm_options

    `community.general.imgadm`: imgadm_options?

    function into(): imgadm = this
        .toMap()
        .put("community.general.imgadm", this.options)
        .toTyped(imgadm)
}

//

class infinity_options {
    
    
    action: ("add_network"|"delete_network"|"get_network"|"get_network_id"|"release_ip"|"release_network"|"reserve_network"|"reserve_next_available_ip")
    
    
    
    ip_address: String?
    
    
    
    network_address: String?
    
    
    
    network_family: ("4"|"6"|"dual")?
    
    
    
    network_id: String?
    
    
    
    network_location: Int?
    
    
    
    network_name: String?
    
    
    
    network_size: String?
    
    
    
    network_type: ("lan"|"shared_lan"|"supernet")?
    
    
    
    password: String
    
    
    
    server_ip: String
    
    
    
    username: String
    
    
}

class infinity extends playbook.task {
    hidden options: infinity_options

    `community.general.infinity`: infinity_options?

    function into(): infinity = this
        .toMap()
        .put("community.general.infinity", this.options)
        .toTyped(infinity)
}

//

class influxdb_database_options {
    
    
    database_name: String
    
    
    
    state: ("absent"|"present")?
    
    
}

class influxdb_database extends playbook.task {
    hidden options: influxdb_database_options

    `community.general.influxdb_database`: influxdb_database_options?

    function into(): influxdb_database = this
        .toMap()
        .put("community.general.influxdb_database", this.options)
        .toTyped(influxdb_database)
}

//

class influxdb_query_options {
    
    
    database_name: String
    
    
    
    query: String
    
    
}

class influxdb_query extends playbook.task {
    hidden options: influxdb_query_options

    `community.general.influxdb_query`: influxdb_query_options?

    function into(): influxdb_query = this
        .toMap()
        .put("community.general.influxdb_query", this.options)
        .toTyped(influxdb_query)
}

//

class influxdb_retention_policy_options {
    
    
    database_name: String
    
    
    
    default: Boolean?
    
    
    
    duration: String?
    
    
    
    policy_name: String
    
    
    
    replication: Int?
    
    
    
    shard_group_duration: String?
    
    
    
    state: ("absent"|"present")?
    
    
}

class influxdb_retention_policy extends playbook.task {
    hidden options: influxdb_retention_policy_options

    `community.general.influxdb_retention_policy`: influxdb_retention_policy_options?

    function into(): influxdb_retention_policy = this
        .toMap()
        .put("community.general.influxdb_retention_policy", this.options)
        .toTyped(influxdb_retention_policy)
}

//

class influxdb_user_options {
    
    
    admin: Boolean?
    
    
    
    grants: Listing<String>?
    
    
    
    state: ("absent"|"present")?
    
    
    
    user_name: String
    
    
    
    user_password: String?
    
    
}

class influxdb_user extends playbook.task {
    hidden options: influxdb_user_options

    `community.general.influxdb_user`: influxdb_user_options?

    function into(): influxdb_user = this
        .toMap()
        .put("community.general.influxdb_user", this.options)
        .toTyped(influxdb_user)
}

//

class influxdb_write_options {
    
    
    data_points: Listing<String>
    
    
    
    database_name: String
    
    
}

class influxdb_write extends playbook.task {
    hidden options: influxdb_write_options

    `community.general.influxdb_write`: influxdb_write_options?

    function into(): influxdb_write = this
        .toMap()
        .put("community.general.influxdb_write", this.options)
        .toTyped(influxdb_write)
}

//

class ini_file_options {
    
    
    allow_no_value: Boolean?
    
    
    
    backup: Boolean?
    
    
    
    create: Boolean?
    
    
    
    exclusive: Boolean?
    
    
    
    follow: Boolean?
    
    
    
    ignore_spaces: Boolean?
    
    
    
    modify_inactive_option: Boolean?
    
    
    
    no_extra_spaces: Boolean?
    
    
    
    option: String?
    
    
    
    path: String
    
    
    
    section: String?
    
    
    
    state: ("absent"|"present")?
    
    
    
    value: String?
    
    
    
    values: Listing<String>?
    
    
}

class ini_file extends playbook.task {
    hidden options: ini_file_options

    `community.general.ini_file`: ini_file_options?

    function into(): ini_file = this
        .toMap()
        .put("community.general.ini_file", this.options)
        .toTyped(ini_file)
}

//

class installp_options {
    
    
    accept_license: Boolean?
    
    
    
    name: Listing<String>
    
    
    
    repository_path: String?
    
    
    
    state: ("absent"|"present")?
    
    
}

class installp extends playbook.task {
    hidden options: installp_options

    `community.general.installp`: installp_options?

    function into(): installp = this
        .toMap()
        .put("community.general.installp", this.options)
        .toTyped(installp)
}

//

class interfaces_file_options {
    
    
    address_family: String?
    
    
    
    backup: Boolean?
    
    
    
    dest: String?
    
    
    
    iface: String?
    
    
    
    option: String?
    
    
    
    state: ("present"|"absent")?
    
    
    
    value: String?
    
    
}

class interfaces_file extends playbook.task {
    hidden options: interfaces_file_options

    `community.general.interfaces_file`: interfaces_file_options?

    function into(): interfaces_file = this
        .toMap()
        .put("community.general.interfaces_file", this.options)
        .toTyped(interfaces_file)
}

//

class ip_netns_options {
    
    
    name: String?
    
    
    
    state: ("present"|"absent")?
    
    
}

class ip_netns extends playbook.task {
    hidden options: ip_netns_options

    `community.general.ip_netns`: ip_netns_options?

    function into(): ip_netns = this
        .toMap()
        .put("community.general.ip_netns", this.options)
        .toTyped(ip_netns)
}

//

class ipa_config_options {
    
    
    ipaconfigstring: Listing<("AllowNThash"|"KDC:Disable Last Success"|"KDC:Disable Lockout"|"KDC:Disable Default Preauth for SPNs")>?
    
    
    
    ipadefaultemaildomain: String?
    
    
    
    ipadefaultloginshell: String?
    
    
    
    ipadefaultprimarygroup: String?
    
    
    
    ipagroupobjectclasses: Listing<String>?
    
    
    
    ipagroupsearchfields: Listing<String>?
    
    
    
    ipahomesrootdir: String?
    
    
    
    ipakrbauthzdata: Listing<("MS-PAC"|"PAD"|"nfs:NONE")>?
    
    
    
    ipamaxusernamelength: Int?
    
    
    
    ipapwdexpadvnotify: Int?
    
    
    
    ipasearchrecordslimit: Int?
    
    
    
    ipasearchtimelimit: Int?
    
    
    
    ipaselinuxusermaporder: Listing<String>?
    
    
    
    ipauserauthtype: Listing<("password"|"radius"|"otp"|"pkinit"|"hardened"|"idp"|"passkey"|"disabled")>?
    
    
    
    ipauserobjectclasses: Listing<String>?
    
    
    
    ipausersearchfields: Listing<String>?
    
    
}

class ipa_config extends playbook.task {
    hidden options: ipa_config_options

    `community.general.ipa_config`: ipa_config_options?

    function into(): ipa_config = this
        .toMap()
        .put("community.general.ipa_config", this.options)
        .toTyped(ipa_config)
}

//

class ipa_dnsrecord_options {
    
    
    record_name: String
    
    
    
    record_ttl: Int?
    
    
    
    record_type: ("A"|"AAAA"|"A6"|"CNAME"|"DNAME"|"MX"|"NS"|"PTR"|"SRV"|"TXT")?
    
    
    
    record_value: String?
    
    
    
    record_values: Listing<String>?
    
    
    
    state: ("absent"|"present")?
    
    
    
    zone_name: String
    
    
}

class ipa_dnsrecord extends playbook.task {
    hidden options: ipa_dnsrecord_options

    `community.general.ipa_dnsrecord`: ipa_dnsrecord_options?

    function into(): ipa_dnsrecord = this
        .toMap()
        .put("community.general.ipa_dnsrecord", this.options)
        .toTyped(ipa_dnsrecord)
}

//

class ipa_dnszone_options {
    
    
    allowsyncptr: Boolean?
    
    
    
    dynamicupdate: Boolean?
    
    
    
    state: ("absent"|"present")?
    
    
    
    zone_name: String
    
    
}

class ipa_dnszone extends playbook.task {
    hidden options: ipa_dnszone_options

    `community.general.ipa_dnszone`: ipa_dnszone_options?

    function into(): ipa_dnszone = this
        .toMap()
        .put("community.general.ipa_dnszone", this.options)
        .toTyped(ipa_dnszone)
}

//

class ipa_group_options {
    
    
    append: Boolean?
    
    
    
    cn: String
    
    
    
    description: String?
    
    
    
    `external`: Boolean?
    
    
    
    external_user: Listing<String>?
    
    
    
    gidnumber: String?
    
    
    
    group: Listing<String>?
    
    
    
    nonposix: Boolean?
    
    
    
    state: ("absent"|"present")?
    
    
    
    user: Listing<String>?
    
    
}

class ipa_group extends playbook.task {
    hidden options: ipa_group_options

    `community.general.ipa_group`: ipa_group_options?

    function into(): ipa_group = this
        .toMap()
        .put("community.general.ipa_group", this.options)
        .toTyped(ipa_group)
}

//

class ipa_hbacrule_options {
    
    
    cn: String
    
    
    
    description: String?
    
    
    
    host: Listing<String>?
    
    
    
    hostcategory: ("all")?
    
    
    
    hostgroup: Listing<String>?
    
    
    
    service: Listing<String>?
    
    
    
    servicecategory: ("all")?
    
    
    
    servicegroup: Listing<String>?
    
    
    
    sourcehost: Listing<String>?
    
    
    
    sourcehostcategory: ("all")?
    
    
    
    sourcehostgroup: Listing<String>?
    
    
    
    state: ("absent"|"disabled"|"enabled"|"present")?
    
    
    
    user: Listing<String>?
    
    
    
    usercategory: ("all")?
    
    
    
    usergroup: Listing<String>?
    
    
}

class ipa_hbacrule extends playbook.task {
    hidden options: ipa_hbacrule_options

    `community.general.ipa_hbacrule`: ipa_hbacrule_options?

    function into(): ipa_hbacrule = this
        .toMap()
        .put("community.general.ipa_hbacrule", this.options)
        .toTyped(ipa_hbacrule)
}

//

class ipa_host_options {
    
    
    description: String?
    
    
    
    force: Boolean?
    
    
    
    fqdn: String
    
    
    
    ip_address: String?
    
    
    
    mac_address: Listing<String>?
    
    
    
    ns_hardware_platform: String?
    
    
    
    ns_host_location: String?
    
    
    
    ns_os_version: String?
    
    
    
    random_password: Boolean?
    
    
    
    state: ("absent"|"disabled"|"enabled"|"present")?
    
    
    
    update_dns: Boolean?
    
    
    
    user_certificate: Listing<String>?
    
    
}

class ipa_host extends playbook.task {
    hidden options: ipa_host_options

    `community.general.ipa_host`: ipa_host_options?

    function into(): ipa_host = this
        .toMap()
        .put("community.general.ipa_host", this.options)
        .toTyped(ipa_host)
}

//

class ipa_hostgroup_options {
    
    
    append: Boolean?
    
    
    
    cn: String
    
    
    
    description: String?
    
    
    
    host: Listing<String>?
    
    
    
    hostgroup: Listing<String>?
    
    
    
    state: ("absent"|"disabled"|"enabled"|"present")?
    
    
}

class ipa_hostgroup extends playbook.task {
    hidden options: ipa_hostgroup_options

    `community.general.ipa_hostgroup`: ipa_hostgroup_options?

    function into(): ipa_hostgroup = this
        .toMap()
        .put("community.general.ipa_hostgroup", this.options)
        .toTyped(ipa_hostgroup)
}

//

class ipa_otpconfig_options {
    
    
    ipatokenhotpauthwindow: Int?
    
    
    
    ipatokenhotpsyncwindow: Int?
    
    
    
    ipatokentotpauthwindow: Int?
    
    
    
    ipatokentotpsyncwindow: Int?
    
    
}

class ipa_otpconfig extends playbook.task {
    hidden options: ipa_otpconfig_options

    `community.general.ipa_otpconfig`: ipa_otpconfig_options?

    function into(): ipa_otpconfig = this
        .toMap()
        .put("community.general.ipa_otpconfig", this.options)
        .toTyped(ipa_otpconfig)
}

//

class ipa_otptoken_options {
    
    
    algorithm: ("sha1"|"sha256"|"sha384"|"sha512")?
    
    
    
    counter: Int?
    
    
    
    description: String?
    
    
    
    digits: Int?
    
    
    
    enabled: Boolean?
    
    
    
    interval: Int?
    
    
    
    model: String?
    
    
    
    newuniqueid: String?
    
    
    
    notafter: String?
    
    
    
    notbefore: String?
    
    
    
    offset: Int?
    
    
    
    otptype: ("totp"|"hotp")?
    
    
    
    owner: String?
    
    
    
    secretkey: String?
    
    
    
    serial: String?
    
    
    
    state: ("present"|"absent")?
    
    
    
    uniqueid: String
    
    
    
    vendor: String?
    
    
}

class ipa_otptoken extends playbook.task {
    hidden options: ipa_otptoken_options

    `community.general.ipa_otptoken`: ipa_otptoken_options?

    function into(): ipa_otptoken = this
        .toMap()
        .put("community.general.ipa_otptoken", this.options)
        .toTyped(ipa_otptoken)
}

//

class ipa_pwpolicy_options {
    
    
    dictcheck: Boolean?
    
    
    
    failinterval: String?
    
    
    
    gracelimit: Int?
    
    
    
    group: String?
    
    
    
    historylength: String?
    
    
    
    lockouttime: String?
    
    
    
    maxfailcount: String?
    
    
    
    maxpwdlife: String?
    
    
    
    maxrepeat: Int?
    
    
    
    maxsequence: Int?
    
    
    
    minclasses: String?
    
    
    
    minlength: String?
    
    
    
    minpwdlife: String?
    
    
    
    priority: String?
    
    
    
    state: ("absent"|"present")?
    
    
    
    usercheck: Boolean?
    
    
}

class ipa_pwpolicy extends playbook.task {
    hidden options: ipa_pwpolicy_options

    `community.general.ipa_pwpolicy`: ipa_pwpolicy_options?

    function into(): ipa_pwpolicy = this
        .toMap()
        .put("community.general.ipa_pwpolicy", this.options)
        .toTyped(ipa_pwpolicy)
}

//

class ipa_role_options {
    
    
    cn: String
    
    
    
    description: String?
    
    
    
    group: Listing<String>?
    
    
    
    host: Listing<String>?
    
    
    
    hostgroup: Listing<String>?
    
    
    
    privilege: Listing<String>?
    
    
    
    service: Listing<String>?
    
    
    
    state: ("absent"|"present")?
    
    
    
    user: Listing<String>?
    
    
}

class ipa_role extends playbook.task {
    hidden options: ipa_role_options

    `community.general.ipa_role`: ipa_role_options?

    function into(): ipa_role = this
        .toMap()
        .put("community.general.ipa_role", this.options)
        .toTyped(ipa_role)
}

//

class ipa_service_options {
    
    
    force: Boolean?
    
    
    
    hosts: Listing<String>?
    
    
    
    krbcanonicalname: String
    
    
    
    skip_host_check: Boolean?
    
    
    
    state: ("absent"|"present")?
    
    
}

class ipa_service extends playbook.task {
    hidden options: ipa_service_options

    `community.general.ipa_service`: ipa_service_options?

    function into(): ipa_service = this
        .toMap()
        .put("community.general.ipa_service", this.options)
        .toTyped(ipa_service)
}

//

class ipa_subca_options {
    
    
    state: ("absent"|"disabled"|"enabled"|"present")?
    
    
    
    subca_desc: String?
    
    
    
    subca_name: String
    
    
    
    subca_subject: String
    
    
}

class ipa_subca extends playbook.task {
    hidden options: ipa_subca_options

    `community.general.ipa_subca`: ipa_subca_options?

    function into(): ipa_subca = this
        .toMap()
        .put("community.general.ipa_subca", this.options)
        .toTyped(ipa_subca)
}

//

class ipa_sudocmd_options {
    
    
    description: String?
    
    
    
    state: ("absent"|"disabled"|"enabled"|"present")?
    
    
    
    sudocmd: String
    
    
}

class ipa_sudocmd extends playbook.task {
    hidden options: ipa_sudocmd_options

    `community.general.ipa_sudocmd`: ipa_sudocmd_options?

    function into(): ipa_sudocmd = this
        .toMap()
        .put("community.general.ipa_sudocmd", this.options)
        .toTyped(ipa_sudocmd)
}

//

class ipa_sudocmdgroup_options {
    
    
    cn: String
    
    
    
    description: String?
    
    
    
    state: ("absent"|"disabled"|"enabled"|"present")?
    
    
    
    sudocmd: Listing<String>?
    
    
}

class ipa_sudocmdgroup extends playbook.task {
    hidden options: ipa_sudocmdgroup_options

    `community.general.ipa_sudocmdgroup`: ipa_sudocmdgroup_options?

    function into(): ipa_sudocmdgroup = this
        .toMap()
        .put("community.general.ipa_sudocmdgroup", this.options)
        .toTyped(ipa_sudocmdgroup)
}

//

class ipa_sudorule_options {
    
    
    cmd: Listing<String>?
    
    
    
    cmdcategory: ("all")?
    
    
    
    cmdgroup: Listing<String>?
    
    
    
    cn: String
    
    
    
    deny_cmd: Listing<String>?
    
    
    
    deny_cmdgroup: Listing<String>?
    
    
    
    description: String?
    
    
    
    host: Listing<String>?
    
    
    
    hostcategory: ("all")?
    
    
    
    hostgroup: Listing<String>?
    
    
    
    runasextusers: Listing<String>?
    
    
    
    runasgroupcategory: ("all")?
    
    
    
    runasusercategory: ("all")?
    
    
    
    state: ("absent"|"disabled"|"enabled"|"present")?
    
    
    
    sudoopt: Listing<String>?
    
    
    
    user: Listing<String>?
    
    
    
    usercategory: ("all")?
    
    
    
    usergroup: Listing<String>?
    
    
}

class ipa_sudorule extends playbook.task {
    hidden options: ipa_sudorule_options

    `community.general.ipa_sudorule`: ipa_sudorule_options?

    function into(): ipa_sudorule = this
        .toMap()
        .put("community.general.ipa_sudorule", this.options)
        .toTyped(ipa_sudorule)
}

//

class ipa_user_options {
    
    
    displayname: String?
    
    
    
    gidnumber: String?
    
    
    
    givenname: String?
    
    
    
    homedirectory: String?
    
    
    
    krbpasswordexpiration: String?
    
    
    
    loginshell: String?
    
    
    
    mail: Listing<String>?
    
    
    
    password: String?
    
    
    
    sn: String?
    
    
    
    sshpubkey: Listing<String>?
    
    
    
    state: ("absent"|"disabled"|"enabled"|"present")?
    
    
    
    telephonenumber: Listing<String>?
    
    
    
    title: String?
    
    
    
    uid: String
    
    
    
    uidnumber: String?
    
    
    
    update_password: ("always"|"on_create")?
    
    
    
    userauthtype: Listing<("password"|"radius"|"otp"|"pkinit"|"hardened"|"idp"|"passkey")>?
    
    
}

class ipa_user extends playbook.task {
    hidden options: ipa_user_options

    `community.general.ipa_user`: ipa_user_options?

    function into(): ipa_user = this
        .toMap()
        .put("community.general.ipa_user", this.options)
        .toTyped(ipa_user)
}

//

class ipa_vault_options {
    
    
    cn: String
    
    
    
    description: String?
    
    
    
    ipavaultpublickey: String?
    
    
    
    ipavaultsalt: String?
    
    
    
    ipavaulttype: ("asymmetric"|"standard"|"symmetric")?
    
    
    
    replace: Boolean?
    
    
    
    service: String?
    
    
    
    state: ("absent"|"present")?
    
    
    
    username: Listing<String>?
    
    
    
    validate_certs: Boolean?
    
    
}

class ipa_vault extends playbook.task {
    hidden options: ipa_vault_options

    `community.general.ipa_vault`: ipa_vault_options?

    function into(): ipa_vault = this
        .toMap()
        .put("community.general.ipa_vault", this.options)
        .toTyped(ipa_vault)
}

//

class ipbase_info_options {
    
    
    apikey: String?
    
    
    
    hostname: Boolean?
    
    
    
    ip: String?
    
    
    
    language: String?
    
    
}

class ipbase_info extends playbook.task {
    hidden options: ipbase_info_options

    `community.general.ipbase_info`: ipbase_info_options?

    function into(): ipbase_info = this
        .toMap()
        .put("community.general.ipbase_info", this.options)
        .toTyped(ipbase_info)
}

//

class ipify_facts_options {
    
    
    api_url: String?
    
    
    
    timeout: Int?
    
    
    
    validate_certs: Boolean?
    
    
}

class ipify_facts extends playbook.task {
    hidden options: ipify_facts_options

    `community.general.ipify_facts`: ipify_facts_options?

    function into(): ipify_facts = this
        .toMap()
        .put("community.general.ipify_facts", this.options)
        .toTyped(ipify_facts)
}

//

class ipinfoio_facts_options {
    
    
    http_agent: String?
    
    
    
    timeout: Int?
    
    
}

class ipinfoio_facts extends playbook.task {
    hidden options: ipinfoio_facts_options

    `community.general.ipinfoio_facts`: ipinfoio_facts_options?

    function into(): ipinfoio_facts = this
        .toMap()
        .put("community.general.ipinfoio_facts", this.options)
        .toTyped(ipinfoio_facts)
}

//

class ipmi_boot_options {
    
    
    bootdev: ("network"|"floppy"|"hd"|"safe"|"optical"|"setup"|"default")
    
    
    
    key: String?
    
    
    
    name: String
    
    
    
    password: String
    
    
    
    persistent: Boolean?
    
    
    
    port: Int?
    
    
    
    state: ("present"|"absent")?
    
    
    
    uefiboot: Boolean?
    
    
    
    user: String
    
    
}

class ipmi_boot extends playbook.task {
    hidden options: ipmi_boot_options

    `community.general.ipmi_boot`: ipmi_boot_options?

    function into(): ipmi_boot = this
        .toMap()
        .put("community.general.ipmi_boot", this.options)
        .toTyped(ipmi_boot)
}

//

class ipmi_power_options {
    
    
    key: String?
    
    
    
    machine: Listing<String>?
    
    
    
    name: String
    
    
    
    password: String
    
    
    
    port: Int?
    
    
    
    state: ("on"|"off"|"shutdown"|"reset"|"boot")?
    
    
    
    timeout: Int?
    
    
    
    user: String
    
    
}

class ipmi_power extends playbook.task {
    hidden options: ipmi_power_options

    `community.general.ipmi_power`: ipmi_power_options?

    function into(): ipmi_power = this
        .toMap()
        .put("community.general.ipmi_power", this.options)
        .toTyped(ipmi_power)
}

//

class iptables_state_options {
    
    
    counters: Boolean?
    
    
    
    ip_version: ("ipv4"|"ipv6")?
    
    
    
    modprobe: String?
    
    
    
    noflush: Boolean?
    
    
    
    path: String
    
    
    
    state: ("saved"|"restored")
    
    
    
    table: ("filter"|"nat"|"mangle"|"raw"|"security")?
    
    
    
    wait: Int?
    
    
}

class iptables_state extends playbook.task {
    hidden options: iptables_state_options

    `community.general.iptables_state`: iptables_state_options?

    function into(): iptables_state = this
        .toMap()
        .put("community.general.iptables_state", this.options)
        .toTyped(iptables_state)
}

//

class ipwcli_dns_options {
    
    
    address: String?
    
    
    
    container: String
    
    
    
    dnsname: String
    
    
    
    flags: ("S"|"A"|"U"|"P")?
    
    
    
    order: Int?
    
    
    
    password: String
    
    
    
    port: Int?
    
    
    
    preference: Int?
    
    
    
    priority: Int?
    
    
    
    replacement: String?
    
    
    
    service: String?
    
    
    
    state: ("absent"|"present")?
    
    
    
    target: String?
    
    
    
    ttl: Int?
    
    
    
    type: ("NAPTR"|"SRV"|"A"|"AAAA")
    
    
    
    username: String
    
    
    
    weight: Int?
    
    
}

class ipwcli_dns extends playbook.task {
    hidden options: ipwcli_dns_options

    `community.general.ipwcli_dns`: ipwcli_dns_options?

    function into(): ipwcli_dns = this
        .toMap()
        .put("community.general.ipwcli_dns", this.options)
        .toTyped(ipwcli_dns)
}

//

class irc_options {
    
    
    channel: String?
    
    
    
    color: ("none"|"white"|"black"|"blue"|"green"|"red"|"brown"|"purple"|"orange"|"yellow"|"light_green"|"teal"|"light_cyan"|"light_blue"|"pink"|"gray"|"light_gray")?
    
    
    
    key: String?
    
    
    
    msg: String
    
    
    
    nick: String?
    
    
    
    nick_to: Listing<String>?
    
    
    
    part: Boolean?
    
    
    
    passwd: String?
    
    
    
    port: Int?
    
    
    
    server: String?
    
    
    
    style: ("bold"|"underline"|"reverse"|"italic"|"none")?
    
    
    
    timeout: Int?
    
    
    
    topic: String?
    
    
    
    use_tls: Boolean?
    
    
    
    validate_certs: Boolean?
    
    
}

class irc extends playbook.task {
    hidden options: irc_options

    `community.general.irc`: irc_options?

    function into(): irc = this
        .toMap()
        .put("community.general.irc", this.options)
        .toTyped(irc)
}

//

class iso_create_options {
    
    
    dest_iso: String
    
    
    
    interchange_level: Int?
    
    
    
    joliet: Int?
    
    
    
    rock_ridge: ("1.09"|"1.10"|"1.12")?
    
    
    
    src_files: Listing<String>
    
    
    
    udf: Boolean?
    
    
    
    vol_ident: String?
    
    
}

class iso_create extends playbook.task {
    hidden options: iso_create_options

    `community.general.iso_create`: iso_create_options?

    function into(): iso_create = this
        .toMap()
        .put("community.general.iso_create", this.options)
        .toTyped(iso_create)
}

//

class iso_customize_options {
    
    
    add_files: Listing<String>?
    
    
    
    delete_files: Listing<String>?
    
    
    
    dest_iso: String
    
    
    
    src_iso: String
    
    
}

class iso_customize extends playbook.task {
    hidden options: iso_customize_options

    `community.general.iso_customize`: iso_customize_options?

    function into(): iso_customize = this
        .toMap()
        .put("community.general.iso_customize", this.options)
        .toTyped(iso_customize)
}

//

class iso_extract_options {
    
    
    dest: String
    
    
    
    executable: String?
    
    
    
    files: Listing<String>
    
    
    
    force: Boolean?
    
    
    
    image: String
    
    
}

class iso_extract extends playbook.task {
    hidden options: iso_extract_options

    `community.general.iso_extract`: iso_extract_options?

    function into(): iso_extract = this
        .toMap()
        .put("community.general.iso_extract", this.options)
        .toTyped(iso_extract)
}

//

class jabber_options {
    
    
    encoding: String?
    
    
    
    host: String?
    
    
    
    msg: String
    
    
    
    password: String
    
    
    
    port: Int?
    
    
    
    to: String
    
    
    
    user: String
    
    
}

class jabber extends playbook.task {
    hidden options: jabber_options

    `community.general.jabber`: jabber_options?

    function into(): jabber = this
        .toMap()
        .put("community.general.jabber", this.options)
        .toTyped(jabber)
}

//

class java_cert_options {
    
    
    cert_alias: String?
    
    
    
    cert_path: String?
    
    
    
    cert_port: Int?
    
    
    
    cert_url: String?
    
    
    
    executable: String?
    
    
    
    keystore_create: Boolean?
    
    
    
    keystore_pass: String
    
    
    
    keystore_path: String?
    
    
    
    keystore_type: String?
    
    
    
    pkcs12_alias: String?
    
    
    
    pkcs12_password: String?
    
    
    
    pkcs12_path: String?
    
    
    
    state: ("absent"|"present")?
    
    
    
    trust_cacert: Boolean?
    
    
}

class java_cert extends playbook.task {
    hidden options: java_cert_options

    `community.general.java_cert`: java_cert_options?

    function into(): java_cert = this
        .toMap()
        .put("community.general.java_cert", this.options)
        .toTyped(java_cert)
}

//

class java_keystore_options {
    
    
    certificate: String?
    
    
    
    certificate_path: String?
    
    
    
    dest: String
    
    
    
    force: Boolean?
    
    
    
    group: String?
    
    
    
    keystore_type: ("jks"|"pkcs12")?
    
    
    
    mode: String?
    
    
    
    name: String
    
    
    
    owner: String?
    
    
    
    password: String
    
    
    
    private_key: String?
    
    
    
    private_key_passphrase: String?
    
    
    
    private_key_path: String?
    
    
    
    ssl_backend: ("openssl"|"cryptography")?
    
    
}

class java_keystore extends playbook.task {
    hidden options: java_keystore_options

    `community.general.java_keystore`: java_keystore_options?

    function into(): java_keystore = this
        .toMap()
        .put("community.general.java_keystore", this.options)
        .toTyped(java_keystore)
}

//

class jboss_options {
    
    
    deploy_path: String?
    
    
    
    deployment: String
    
    
    
    src: String?
    
    
    
    state: ("present"|"absent")?
    
    
}

class jboss extends playbook.task {
    hidden options: jboss_options

    `community.general.jboss`: jboss_options?

    function into(): jboss = this
        .toMap()
        .put("community.general.jboss", this.options)
        .toTyped(jboss)
}

//

class jenkins_build_options {
    
    
    args: String?
    
    
    
    build_number: Int?
    
    
    
    detach: Boolean?
    
    
    
    name: String
    
    
    
    password: String?
    
    
    
    state: ("present"|"absent"|"stopped")?
    
    
    
    time_between_checks: Int?
    
    
    
    token: String?
    
    
    
    url: String?
    
    
    
    user: String?
    
    
}

class jenkins_build extends playbook.task {
    hidden options: jenkins_build_options

    `community.general.jenkins_build`: jenkins_build_options?

    function into(): jenkins_build = this
        .toMap()
        .put("community.general.jenkins_build", this.options)
        .toTyped(jenkins_build)
}

//

class jenkins_build_info_options {
    
    
    build_number: Int?
    
    
    
    name: String
    
    
    
    password: String?
    
    
    
    token: String?
    
    
    
    url: String?
    
    
    
    user: String?
    
    
}

class jenkins_build_info extends playbook.task {
    hidden options: jenkins_build_info_options

    `community.general.jenkins_build_info`: jenkins_build_info_options?

    function into(): jenkins_build_info = this
        .toMap()
        .put("community.general.jenkins_build_info", this.options)
        .toTyped(jenkins_build_info)
}

//

class jenkins_job_options {
    
    
    config: String?
    
    
    
    enabled: Boolean?
    
    
    
    name: String
    
    
    
    password: String?
    
    
    
    state: ("present"|"absent")?
    
    
    
    token: String?
    
    
    
    url: String?
    
    
    
    user: String?
    
    
    
    validate_certs: Boolean?
    
    
}

class jenkins_job extends playbook.task {
    hidden options: jenkins_job_options

    `community.general.jenkins_job`: jenkins_job_options?

    function into(): jenkins_job = this
        .toMap()
        .put("community.general.jenkins_job", this.options)
        .toTyped(jenkins_job)
}

//

class jenkins_job_info_options {
    
    
    color: String?
    
    
    
    glob: String?
    
    
    
    name: String?
    
    
    
    password: String?
    
    
    
    token: String?
    
    
    
    url: String?
    
    
    
    user: String?
    
    
    
    validate_certs: Boolean?
    
    
}

class jenkins_job_info extends playbook.task {
    hidden options: jenkins_job_info_options

    `community.general.jenkins_job_info`: jenkins_job_info_options?

    function into(): jenkins_job_info = this
        .toMap()
        .put("community.general.jenkins_job_info", this.options)
        .toTyped(jenkins_job_info)
}

//

class jenkins_plugin_options {
    
    
    group: String?
    
    
    
    jenkins_home: String?
    
    
    
    latest_plugins_url_segments: Listing<String>?
    
    
    
    mode: String?
    
    
    
    name: String
    
    
    
    owner: String?
    
    
    
    state: ("absent"|"present"|"pinned"|"unpinned"|"enabled"|"disabled"|"latest")?
    
    
    
    timeout: Int?
    
    
    
    update_json_url_segment: Listing<String>?
    
    
    
    updates_expiration: Int?
    
    
    
    updates_url: Listing<String>?
    
    
    
    url: String?
    
    
    
    version: String?
    
    
    
    versioned_plugins_url_segments: Listing<String>?
    
    
    
    with_dependencies: Boolean?
    
    
}

class jenkins_plugin extends playbook.task {
    hidden options: jenkins_plugin_options

    `community.general.jenkins_plugin`: jenkins_plugin_options?

    function into(): jenkins_plugin = this
        .toMap()
        .put("community.general.jenkins_plugin", this.options)
        .toTyped(jenkins_plugin)
}

//

class jenkins_script_options {
    
    
    args: String?
    
    
    
    password: String?
    
    
    
    script: String
    
    
    
    timeout: Int?
    
    
    
    url: String?
    
    
    
    user: String?
    
    
    
    validate_certs: Boolean?
    
    
}

class jenkins_script extends playbook.task {
    hidden options: jenkins_script_options

    `community.general.jenkins_script`: jenkins_script_options?

    function into(): jenkins_script = this
        .toMap()
        .put("community.general.jenkins_script", this.options)
        .toTyped(jenkins_script)
}

//

class jira_options {
    
    
    account_id: String?
    
    
    
    assignee: String?
    
    
    
    attachment: String?
    
    
    
    comment: String?
    
    
    
    comment_visibility: String?
    
    
    
    description: String?
    
    
    
    fields: String?
    
    
    
    inwardissue: String?
    
    
    
    issue: String?
    
    
    
    issuetype: String?
    
    
    
    jql: String?
    
    
    
    linktype: String?
    
    
    
    maxresults: Int?
    
    
    
    operation: ("attach"|"comment"|"create"|"edit"|"fetch"|"link"|"search"|"transition"|"update"|"worklog")
    
    
    
    outwardissue: String?
    
    
    
    password: String?
    
    
    
    project: String?
    
    
    
    status: String?
    
    
    
    summary: String?
    
    
    
    timeout: String?
    
    
    
    token: String?
    
    
    
    uri: String
    
    
    
    username: String?
    
    
    
    validate_certs: Boolean?
    
    
}

class jira extends playbook.task {
    hidden options: jira_options

    `community.general.jira`: jira_options?

    function into(): jira = this
        .toMap()
        .put("community.general.jira", this.options)
        .toTyped(jira)
}

//

class kdeconfig_options {
    
    
    backup: Boolean?
    
    
    
    kwriteconfig_path: String?
    
    
    
    path: String
    
    
    
    values: Listing<String>
    
    
}

class kdeconfig extends playbook.task {
    hidden options: kdeconfig_options

    `community.general.kdeconfig`: kdeconfig_options?

    function into(): kdeconfig = this
        .toMap()
        .put("community.general.kdeconfig", this.options)
        .toTyped(kdeconfig)
}

//

class kernel_blacklist_options {
    
    
    blacklist_file: String?
    
    
    
    name: String
    
    
    
    state: ("absent"|"present")?
    
    
}

class kernel_blacklist extends playbook.task {
    hidden options: kernel_blacklist_options

    `community.general.kernel_blacklist`: kernel_blacklist_options?

    function into(): kernel_blacklist = this
        .toMap()
        .put("community.general.kernel_blacklist", this.options)
        .toTyped(kernel_blacklist)
}

//

class keycloak_authentication_options {
    
    
    alias: String
    
    
    
    authenticationExecutions: Listing<String>?
    
    
    
    copyFrom: String?
    
    
    
    description: String?
    
    
    
    force: Boolean?
    
    
    
    providerId: ("basic-flow"|"client-flow")?
    
    
    
    realm: String
    
    
    
    state: ("present"|"absent")?
    
    
}

class keycloak_authentication extends playbook.task {
    hidden options: keycloak_authentication_options

    `community.general.keycloak_authentication`: keycloak_authentication_options?

    function into(): keycloak_authentication = this
        .toMap()
        .put("community.general.keycloak_authentication", this.options)
        .toTyped(keycloak_authentication)
}

//

class keycloak_authentication_required_actions_options {
    
    
    realm: String
    
    
    
    required_actions: Listing<String>?
    
    
    
    state: ("absent"|"present")
    
    
}

class keycloak_authentication_required_actions extends playbook.task {
    hidden options: keycloak_authentication_required_actions_options

    `community.general.keycloak_authentication_required_actions`: keycloak_authentication_required_actions_options?

    function into(): keycloak_authentication_required_actions = this
        .toMap()
        .put("community.general.keycloak_authentication_required_actions", this.options)
        .toTyped(keycloak_authentication_required_actions)
}

//

class keycloak_authz_authorization_scope_options {
    
    
    client_id: String
    
    
    
    display_name: String?
    
    
    
    icon_uri: String?
    
    
    
    name: String
    
    
    
    realm: String
    
    
    
    state: ("present"|"absent")?
    
    
}

class keycloak_authz_authorization_scope extends playbook.task {
    hidden options: keycloak_authz_authorization_scope_options

    `community.general.keycloak_authz_authorization_scope`: keycloak_authz_authorization_scope_options?

    function into(): keycloak_authz_authorization_scope = this
        .toMap()
        .put("community.general.keycloak_authz_authorization_scope", this.options)
        .toTyped(keycloak_authz_authorization_scope)
}

//

class keycloak_authz_custom_policy_options {
    
    
    client_id: String
    
    
    
    name: String
    
    
    
    policy_type: String
    
    
    
    realm: String
    
    
    
    state: ("present"|"absent")?
    
    
}

class keycloak_authz_custom_policy extends playbook.task {
    hidden options: keycloak_authz_custom_policy_options

    `community.general.keycloak_authz_custom_policy`: keycloak_authz_custom_policy_options?

    function into(): keycloak_authz_custom_policy = this
        .toMap()
        .put("community.general.keycloak_authz_custom_policy", this.options)
        .toTyped(keycloak_authz_custom_policy)
}

//

class keycloak_authz_permission_options {
    
    
    client_id: String
    
    
    
    decision_strategy: ("UNANIMOUS"|"AFFIRMATIVE"|"CONSENSUS")?
    
    
    
    description: String?
    
    
    
    name: String
    
    
    
    permission_type: ("resource"|"scope")
    
    
    
    policies: Listing<String>?
    
    
    
    realm: String
    
    
    
    resources: Listing<String>?
    
    
    
    scopes: Listing<String>?
    
    
    
    state: ("present"|"absent")?
    
    
}

class keycloak_authz_permission extends playbook.task {
    hidden options: keycloak_authz_permission_options

    `community.general.keycloak_authz_permission`: keycloak_authz_permission_options?

    function into(): keycloak_authz_permission = this
        .toMap()
        .put("community.general.keycloak_authz_permission", this.options)
        .toTyped(keycloak_authz_permission)
}

//

class keycloak_authz_permission_info_options {
    
    
    client_id: String
    
    
    
    name: String
    
    
    
    realm: String
    
    
}

class keycloak_authz_permission_info extends playbook.task {
    hidden options: keycloak_authz_permission_info_options

    `community.general.keycloak_authz_permission_info`: keycloak_authz_permission_info_options?

    function into(): keycloak_authz_permission_info = this
        .toMap()
        .put("community.general.keycloak_authz_permission_info", this.options)
        .toTyped(keycloak_authz_permission_info)
}

//

class keycloak_client_options {
    
    
    admin_url: String?
    
    
    
    always_display_in_console: Boolean?
    
    
    
    attributes: String?
    
    
    
    authentication_flow_binding_overrides: String?
    
    
    
    authorization_services_enabled: Boolean?
    
    
    
    authorization_settings: String?
    
    
    
    base_url: String?
    
    
    
    bearer_only: Boolean?
    
    
    
    client_authenticator_type: ("client-secret"|"client-jwt")?
    
    
    
    client_id: String?
    
    
    
    client_template: String?
    
    
    
    consent_required: Boolean?
    
    
    
    default_client_scopes: Listing<String>?
    
    
    
    default_roles: Listing<String>?
    
    
    
    description: String?
    
    
    
    direct_access_grants_enabled: Boolean?
    
    
    
    enabled: Boolean?
    
    
    
    frontchannel_logout: Boolean?
    
    
    
    full_scope_allowed: Boolean?
    
    
    
    id: String?
    
    
    
    implicit_flow_enabled: Boolean?
    
    
    
    name: String?
    
    
    
    node_re_registration_timeout: Int?
    
    
    
    not_before: Int?
    
    
    
    optional_client_scopes: Listing<String>?
    
    
    
    protocol: ("openid-connect"|"saml")?
    
    
    
    protocol_mappers: Listing<String>?
    
    
    
    public_client: Boolean?
    
    
    
    realm: String?
    
    
    
    redirect_uris: Listing<String>?
    
    
    
    registered_nodes: String?
    
    
    
    registration_access_token: String?
    
    
    
    root_url: String?
    
    
    
    secret: String?
    
    
    
    service_accounts_enabled: Boolean?
    
    
    
    standard_flow_enabled: Boolean?
    
    
    
    state: ("present"|"absent")?
    
    
    
    surrogate_auth_required: Boolean?
    
    
    
    use_template_config: Boolean?
    
    
    
    use_template_mappers: Boolean?
    
    
    
    use_template_scope: Boolean?
    
    
    
    web_origins: Listing<String>?
    
    
}

class keycloak_client extends playbook.task {
    hidden options: keycloak_client_options

    `community.general.keycloak_client`: keycloak_client_options?

    function into(): keycloak_client = this
        .toMap()
        .put("community.general.keycloak_client", this.options)
        .toTyped(keycloak_client)
}

//

class keycloak_client_rolemapping_options {
    
    
    cid: String?
    
    
    
    client_id: String?
    
    
    
    gid: String?
    
    
    
    group_name: String?
    
    
    
    parents: Listing<String>?
    
    
    
    realm: String?
    
    
    
    roles: Listing<String>?
    
    
    
    state: ("present"|"absent")?
    
    
}

class keycloak_client_rolemapping extends playbook.task {
    hidden options: keycloak_client_rolemapping_options

    `community.general.keycloak_client_rolemapping`: keycloak_client_rolemapping_options?

    function into(): keycloak_client_rolemapping = this
        .toMap()
        .put("community.general.keycloak_client_rolemapping", this.options)
        .toTyped(keycloak_client_rolemapping)
}

//

class keycloak_clientscope_options {
    
    
    attributes: String?
    
    
    
    description: String?
    
    
    
    id: String?
    
    
    
    name: String?
    
    
    
    protocol: ("openid-connect"|"saml"|"wsfed")?
    
    
    
    protocol_mappers: Listing<String>?
    
    
    
    realm: String?
    
    
    
    state: ("present"|"absent")?
    
    
}

class keycloak_clientscope extends playbook.task {
    hidden options: keycloak_clientscope_options

    `community.general.keycloak_clientscope`: keycloak_clientscope_options?

    function into(): keycloak_clientscope = this
        .toMap()
        .put("community.general.keycloak_clientscope", this.options)
        .toTyped(keycloak_clientscope)
}

//

class keycloak_clientscope_type_options {
    
    
    client_id: String?
    
    
    
    default_clientscopes: Listing<String>?
    
    
    
    optional_clientscopes: Listing<String>?
    
    
    
    realm: String?
    
    
}

class keycloak_clientscope_type extends playbook.task {
    hidden options: keycloak_clientscope_type_options

    `community.general.keycloak_clientscope_type`: keycloak_clientscope_type_options?

    function into(): keycloak_clientscope_type = this
        .toMap()
        .put("community.general.keycloak_clientscope_type", this.options)
        .toTyped(keycloak_clientscope_type)
}

//

class keycloak_clientsecret_info_options {
    
    
    client_id: String?
    
    
    
    id: String?
    
    
    
    realm: String?
    
    
}

class keycloak_clientsecret_info extends playbook.task {
    hidden options: keycloak_clientsecret_info_options

    `community.general.keycloak_clientsecret_info`: keycloak_clientsecret_info_options?

    function into(): keycloak_clientsecret_info = this
        .toMap()
        .put("community.general.keycloak_clientsecret_info", this.options)
        .toTyped(keycloak_clientsecret_info)
}

//

class keycloak_clientsecret_regenerate_options {
    
    
    client_id: String?
    
    
    
    id: String?
    
    
    
    realm: String?
    
    
}

class keycloak_clientsecret_regenerate extends playbook.task {
    hidden options: keycloak_clientsecret_regenerate_options

    `community.general.keycloak_clientsecret_regenerate`: keycloak_clientsecret_regenerate_options?

    function into(): keycloak_clientsecret_regenerate = this
        .toMap()
        .put("community.general.keycloak_clientsecret_regenerate", this.options)
        .toTyped(keycloak_clientsecret_regenerate)
}

//

class keycloak_clienttemplate_options {
    
    
    attributes: String?
    
    
    
    description: String?
    
    
    
    full_scope_allowed: Boolean?
    
    
    
    id: String?
    
    
    
    name: String?
    
    
    
    protocol: ("openid-connect"|"saml")?
    
    
    
    protocol_mappers: Listing<String>?
    
    
    
    realm: String?
    
    
    
    state: ("present"|"absent")?
    
    
}

class keycloak_clienttemplate extends playbook.task {
    hidden options: keycloak_clienttemplate_options

    `community.general.keycloak_clienttemplate`: keycloak_clienttemplate_options?

    function into(): keycloak_clienttemplate = this
        .toMap()
        .put("community.general.keycloak_clienttemplate", this.options)
        .toTyped(keycloak_clienttemplate)
}

//

class keycloak_component_info_options {
    
    
    name: String?
    
    
    
    parent_id: String?
    
    
    
    provider_type: String?
    
    
    
    realm: String
    
    
}

class keycloak_component_info extends playbook.task {
    hidden options: keycloak_component_info_options

    `community.general.keycloak_component_info`: keycloak_component_info_options?

    function into(): keycloak_component_info = this
        .toMap()
        .put("community.general.keycloak_component_info", this.options)
        .toTyped(keycloak_component_info)
}

//

class keycloak_group_options {
    
    
    attributes: String?
    
    
    
    id: String?
    
    
    
    name: String?
    
    
    
    parents: Listing<String>?
    
    
    
    realm: String?
    
    
    
    state: ("present"|"absent")?
    
    
}

class keycloak_group extends playbook.task {
    hidden options: keycloak_group_options

    `community.general.keycloak_group`: keycloak_group_options?

    function into(): keycloak_group = this
        .toMap()
        .put("community.general.keycloak_group", this.options)
        .toTyped(keycloak_group)
}

//

class keycloak_identity_provider_options {
    
    
    add_read_token_role_on_create: Boolean?
    
    
    
    alias: String
    
    
    
    authenticate_by_default: Boolean?
    
    
    
    config: String?
    
    
    
    display_name: String?
    
    
    
    enabled: Boolean?
    
    
    
    first_broker_login_flow_alias: String?
    
    
    
    link_only: Boolean?
    
    
    
    mappers: Listing<String>?
    
    
    
    post_broker_login_flow_alias: String?
    
    
    
    provider_id: String?
    
    
    
    realm: String?
    
    
    
    state: ("present"|"absent")?
    
    
    
    store_token: Boolean?
    
    
    
    trust_email: Boolean?
    
    
}

class keycloak_identity_provider extends playbook.task {
    hidden options: keycloak_identity_provider_options

    `community.general.keycloak_identity_provider`: keycloak_identity_provider_options?

    function into(): keycloak_identity_provider = this
        .toMap()
        .put("community.general.keycloak_identity_provider", this.options)
        .toTyped(keycloak_identity_provider)
}

//

class keycloak_realm_options {
    
    
    access_code_lifespan: Int?
    
    
    
    access_code_lifespan_login: Int?
    
    
    
    access_code_lifespan_user_action: Int?
    
    
    
    access_token_lifespan: Int?
    
    
    
    access_token_lifespan_for_implicit_flow: Int?
    
    
    
    account_theme: String?
    
    
    
    action_token_generated_by_admin_lifespan: Int?
    
    
    
    action_token_generated_by_user_lifespan: Int?
    
    
    
    admin_events_details_enabled: Boolean?
    
    
    
    admin_events_enabled: Boolean?
    
    
    
    admin_theme: String?
    
    
    
    attributes: String?
    
    
    
    browser_flow: String?
    
    
    
    browser_security_headers: String?
    
    
    
    brute_force_protected: Boolean?
    
    
    
    client_authentication_flow: String?
    
    
    
    client_scope_mappings: String?
    
    
    
    default_default_client_scopes: Listing<String>?
    
    
    
    default_groups: Listing<String>?
    
    
    
    default_locale: String?
    
    
    
    default_optional_client_scopes: Listing<String>?
    
    
    
    default_roles: Listing<String>?
    
    
    
    default_signature_algorithm: String?
    
    
    
    direct_grant_flow: String?
    
    
    
    display_name: String?
    
    
    
    display_name_html: String?
    
    
    
    docker_authentication_flow: String?
    
    
    
    duplicate_emails_allowed: Boolean?
    
    
    
    edit_username_allowed: Boolean?
    
    
    
    email_theme: String?
    
    
    
    enabled: Boolean?
    
    
    
    enabled_event_types: Listing<String>?
    
    
    
    events_enabled: Boolean?
    
    
    
    events_expiration: Int?
    
    
    
    events_listeners: Listing<String>?
    
    
    
    failure_factor: Int?
    
    
    
    id: String?
    
    
    
    internationalization_enabled: Boolean?
    
    
    
    login_theme: String?
    
    
    
    login_with_email_allowed: Boolean?
    
    
    
    max_delta_time_seconds: Int?
    
    
    
    max_failure_wait_seconds: Int?
    
    
    
    minimum_quick_login_wait_seconds: Int?
    
    
    
    not_before: Int?
    
    
    
    offline_session_idle_timeout: Int?
    
    
    
    offline_session_max_lifespan: Int?
    
    
    
    offline_session_max_lifespan_enabled: Boolean?
    
    
    
    otp_policy_algorithm: String?
    
    
    
    otp_policy_digits: Int?
    
    
    
    otp_policy_initial_counter: Int?
    
    
    
    otp_policy_look_ahead_window: Int?
    
    
    
    otp_policy_period: Int?
    
    
    
    otp_policy_type: String?
    
    
    
    otp_supported_applications: Listing<String>?
    
    
    
    password_policy: String?
    
    
    
    permanent_lockout: Boolean?
    
    
    
    quick_login_check_milli_seconds: Int?
    
    
    
    realm: String?
    
    
    
    refresh_token_max_reuse: Int?
    
    
    
    registration_allowed: Boolean?
    
    
    
    registration_email_as_username: Boolean?
    
    
    
    registration_flow: String?
    
    
    
    remember_me: Boolean?
    
    
    
    reset_credentials_flow: String?
    
    
    
    reset_password_allowed: Boolean?
    
    
    
    revoke_refresh_token: Boolean?
    
    
    
    smtp_server: String?
    
    
    
    ssl_required: ("all"|"external"|"none")?
    
    
    
    sso_session_idle_timeout: Int?
    
    
    
    sso_session_idle_timeout_remember_me: Int?
    
    
    
    sso_session_max_lifespan: Int?
    
    
    
    sso_session_max_lifespan_remember_me: Int?
    
    
    
    state: ("present"|"absent")?
    
    
    
    supported_locales: Listing<String>?
    
    
    
    user_managed_access_allowed: Boolean?
    
    
    
    verify_email: Boolean?
    
    
    
    wait_increment_seconds: Int?
    
    
}

class keycloak_realm extends playbook.task {
    hidden options: keycloak_realm_options

    `community.general.keycloak_realm`: keycloak_realm_options?

    function into(): keycloak_realm = this
        .toMap()
        .put("community.general.keycloak_realm", this.options)
        .toTyped(keycloak_realm)
}

//

class keycloak_realm_info_options {
    
    
    auth_keycloak_url: String
    
    
    
    realm: String?
    
    
    
    validate_certs: Boolean?
    
    
}

class keycloak_realm_info extends playbook.task {
    hidden options: keycloak_realm_info_options

    `community.general.keycloak_realm_info`: keycloak_realm_info_options?

    function into(): keycloak_realm_info = this
        .toMap()
        .put("community.general.keycloak_realm_info", this.options)
        .toTyped(keycloak_realm_info)
}

//

class keycloak_realm_key_options {
    
    
    config: String?
    
    
    
    force: Boolean?
    
    
    
    name: String
    
    
    
    parent_id: String
    
    
    
    provider_id: ("rsa"|"rsa-enc")?
    
    
    
    state: ("present"|"absent")?
    
    
}

class keycloak_realm_key extends playbook.task {
    hidden options: keycloak_realm_key_options

    `community.general.keycloak_realm_key`: keycloak_realm_key_options?

    function into(): keycloak_realm_key = this
        .toMap()
        .put("community.general.keycloak_realm_key", this.options)
        .toTyped(keycloak_realm_key)
}

//

class keycloak_realm_rolemapping_options {
    
    
    gid: String?
    
    
    
    group_name: String?
    
    
    
    parents: Listing<String>?
    
    
    
    realm: String?
    
    
    
    roles: Listing<String>?
    
    
    
    state: ("present"|"absent")?
    
    
}

class keycloak_realm_rolemapping extends playbook.task {
    hidden options: keycloak_realm_rolemapping_options

    `community.general.keycloak_realm_rolemapping`: keycloak_realm_rolemapping_options?

    function into(): keycloak_realm_rolemapping = this
        .toMap()
        .put("community.general.keycloak_realm_rolemapping", this.options)
        .toTyped(keycloak_realm_rolemapping)
}

//

class keycloak_role_options {
    
    
    attributes: String?
    
    
    
    client_id: String?
    
    
    
    composite: Boolean?
    
    
    
    composites: Listing<String>?
    
    
    
    description: String?
    
    
    
    name: String
    
    
    
    realm: String?
    
    
    
    state: ("present"|"absent")?
    
    
}

class keycloak_role extends playbook.task {
    hidden options: keycloak_role_options

    `community.general.keycloak_role`: keycloak_role_options?

    function into(): keycloak_role = this
        .toMap()
        .put("community.general.keycloak_role", this.options)
        .toTyped(keycloak_role)
}

//

class keycloak_user_options {
    
    
    access: String?
    
    
    
    attributes: Listing<String>?
    
    
    
    auth_username: String?
    
    
    
    client_consents: Listing<String>?
    
    
    
    credentials: Listing<String>?
    
    
    
    disableable_credential_types: Listing<String>?
    
    
    
    email: String?
    
    
    
    email_verified: Boolean?
    
    
    
    enabled: Boolean?
    
    
    
    federated_identities: Listing<String>?
    
    
    
    federation_link: String?
    
    
    
    first_name: String?
    
    
    
    force: Boolean?
    
    
    
    groups: Listing<String>?
    
    
    
    id: String?
    
    
    
    last_name: String?
    
    
    
    origin: String?
    
    
    
    realm: String?
    
    
    
    required_actions: Listing<String>?
    
    
    
    self: String?
    
    
    
    service_account_client_id: String?
    
    
    
    state: ("present"|"absent")?
    
    
    
    username: String
    
    
}

class keycloak_user extends playbook.task {
    hidden options: keycloak_user_options

    `community.general.keycloak_user`: keycloak_user_options?

    function into(): keycloak_user = this
        .toMap()
        .put("community.general.keycloak_user", this.options)
        .toTyped(keycloak_user)
}

//

class keycloak_user_federation_options {
    
    
    config: String?
    
    
    
    id: String?
    
    
    
    mappers: Listing<String>?
    
    
    
    name: String?
    
    
    
    parent_id: String?
    
    
    
    provider_id: String?
    
    
    
    provider_type: String?
    
    
    
    realm: String?
    
    
    
    state: ("present"|"absent")?
    
    
}

class keycloak_user_federation extends playbook.task {
    hidden options: keycloak_user_federation_options

    `community.general.keycloak_user_federation`: keycloak_user_federation_options?

    function into(): keycloak_user_federation = this
        .toMap()
        .put("community.general.keycloak_user_federation", this.options)
        .toTyped(keycloak_user_federation)
}

//

class keycloak_user_rolemapping_options {
    
    
    cid: String?
    
    
    
    client_id: String?
    
    
    
    realm: String?
    
    
    
    roles: Listing<String>?
    
    
    
    service_account_user_client_id: String?
    
    
    
    state: ("present"|"absent")?
    
    
    
    target_username: String?
    
    
    
    uid: String?
    
    
}

class keycloak_user_rolemapping extends playbook.task {
    hidden options: keycloak_user_rolemapping_options

    `community.general.keycloak_user_rolemapping`: keycloak_user_rolemapping_options?

    function into(): keycloak_user_rolemapping = this
        .toMap()
        .put("community.general.keycloak_user_rolemapping", this.options)
        .toTyped(keycloak_user_rolemapping)
}

//

class keyring_options {
    
    
    keyring_password: String
    
    
    
    service: String
    
    
    
    state: ("present"|"absent")?
    
    
    
    user_password: String?
    
    
    
    username: String
    
    
}

class keyring extends playbook.task {
    hidden options: keyring_options

    `community.general.keyring`: keyring_options?

    function into(): keyring = this
        .toMap()
        .put("community.general.keyring", this.options)
        .toTyped(keyring)
}

//

class keyring_info_options {
    
    
    keyring_password: String
    
    
    
    service: String
    
    
    
    username: String
    
    
}

class keyring_info extends playbook.task {
    hidden options: keyring_info_options

    `community.general.keyring_info`: keyring_info_options?

    function into(): keyring_info = this
        .toMap()
        .put("community.general.keyring_info", this.options)
        .toTyped(keyring_info)
}

//

class kibana_plugin_options {
    
    
    allow_root: Boolean?
    
    
    
    force: Boolean?
    
    
    
    name: String
    
    
    
    plugin_bin: String?
    
    
    
    plugin_dir: String?
    
    
    
    state: ("present"|"absent")?
    
    
    
    timeout: String?
    
    
    
    url: String?
    
    
    
    version: String?
    
    
}

class kibana_plugin extends playbook.task {
    hidden options: kibana_plugin_options

    `community.general.kibana_plugin`: kibana_plugin_options?

    function into(): kibana_plugin = this
        .toMap()
        .put("community.general.kibana_plugin", this.options)
        .toTyped(kibana_plugin)
}

//

class launchd_options {
    
    
    enabled: Boolean?
    
    
    
    force_stop: Boolean?
    
    
    
    name: String
    
    
    
    state: ("reloaded"|"restarted"|"started"|"stopped"|"unloaded")?
    
    
}

class launchd extends playbook.task {
    hidden options: launchd_options

    `community.general.launchd`: launchd_options?

    function into(): launchd = this
        .toMap()
        .put("community.general.launchd", this.options)
        .toTyped(launchd)
}

//

class layman_options {
    
    
    list_url: String?
    
    
    
    name: String
    
    
    
    state: ("present"|"absent"|"updated")?
    
    
    
    validate_certs: Boolean?
    
    
}

class layman extends playbook.task {
    hidden options: layman_options

    `community.general.layman`: layman_options?

    function into(): layman = this
        .toMap()
        .put("community.general.layman", this.options)
        .toTyped(layman)
}

//

class lbu_options {
    
    
    commit: Boolean?
    
    
    
    exclude: Listing<String>?
    
    
    
    include: Listing<String>?
    
    
}

class lbu extends playbook.task {
    hidden options: lbu_options

    `community.general.lbu`: lbu_options?

    function into(): lbu = this
        .toMap()
        .put("community.general.lbu", this.options)
        .toTyped(lbu)
}

//

class ldap_attrs_options {
    
    
    attributes: String
    
    
    
    ordered: Boolean?
    
    
    
    state: ("present"|"absent"|"exact")?
    
    
}

class ldap_attrs extends playbook.task {
    hidden options: ldap_attrs_options

    `community.general.ldap_attrs`: ldap_attrs_options?

    function into(): ldap_attrs = this
        .toMap()
        .put("community.general.ldap_attrs", this.options)
        .toTyped(ldap_attrs)
}

//

class ldap_entry_options {
    
    
    attributes: String?
    
    
    
    objectClass: Listing<String>?
    
    
    
    recursive: Boolean?
    
    
    
    state: ("present"|"absent")?
    
    
}

class ldap_entry extends playbook.task {
    hidden options: ldap_entry_options

    `community.general.ldap_entry`: ldap_entry_options?

    function into(): ldap_entry = this
        .toMap()
        .put("community.general.ldap_entry", this.options)
        .toTyped(ldap_entry)
}

//

class ldap_passwd_options {
    
    
    passwd: String?
    
    
}

class ldap_passwd extends playbook.task {
    hidden options: ldap_passwd_options

    `community.general.ldap_passwd`: ldap_passwd_options?

    function into(): ldap_passwd = this
        .toMap()
        .put("community.general.ldap_passwd", this.options)
        .toTyped(ldap_passwd)
}

//

class ldap_search_options {
    
    
    attrs: Listing<String>?
    
    
    
    base64_attributes: Listing<String>?
    
    
    
    dn: String
    
    
    
    filter: String?
    
    
    
    page_size: Int?
    
    
    
    schema: Boolean?
    
    
    
    scope: ("base"|"onelevel"|"subordinate"|"children")?
    
    
}

class ldap_search extends playbook.task {
    hidden options: ldap_search_options

    `community.general.ldap_search`: ldap_search_options?

    function into(): ldap_search = this
        .toMap()
        .put("community.general.ldap_search", this.options)
        .toTyped(ldap_search)
}

//

class librato_annotation_options {
    
    
    api_key: String
    
    
    
    description: String?
    
    
    
    end_time: Int?
    
    
    
    links: Listing<String>?
    
    
    
    name: String?
    
    
    
    source: String?
    
    
    
    start_time: Int?
    
    
    
    title: String
    
    
    
    user: String
    
    
}

class librato_annotation extends playbook.task {
    hidden options: librato_annotation_options

    `community.general.librato_annotation`: librato_annotation_options?

    function into(): librato_annotation = this
        .toMap()
        .put("community.general.librato_annotation", this.options)
        .toTyped(librato_annotation)
}

//

class linode_options {
    
    
    additional_disks: Listing<String>?
    
    
    
    alert_bwin_enabled: Boolean?
    
    
    
    alert_bwin_threshold: Int?
    
    
    
    alert_bwout_enabled: Boolean?
    
    
    
    alert_bwout_threshold: Int?
    
    
    
    alert_bwquota_enabled: Boolean?
    
    
    
    alert_bwquota_threshold: Int?
    
    
    
    alert_cpu_enabled: Boolean?
    
    
    
    alert_cpu_threshold: Int?
    
    
    
    alert_diskio_enabled: Boolean?
    
    
    
    alert_diskio_threshold: Int?
    
    
    
    api_key: String
    
    
    
    backupweeklyday: Int?
    
    
    
    backupwindow: Int?
    
    
    
    datacenter: Int?
    
    
    
    displaygroup: String?
    
    
    
    distribution: Int?
    
    
    
    kernel_id: Int?
    
    
    
    linode_id: Int?
    
    
    
    name: String
    
    
    
    password: String?
    
    
    
    payment_term: Int?
    
    
    
    plan: Int?
    
    
    
    private_ip: Boolean?
    
    
    
    ssh_pub_key: String?
    
    
    
    state: ("absent"|"active"|"deleted"|"present"|"restarted"|"started"|"stopped")?
    
    
    
    swap: Int?
    
    
    
    wait: Boolean?
    
    
    
    wait_timeout: Int?
    
    
    
    watchdog: Boolean?
    
    
}

class linode extends playbook.task {
    hidden options: linode_options

    `community.general.linode`: linode_options?

    function into(): linode = this
        .toMap()
        .put("community.general.linode", this.options)
        .toTyped(linode)
}

//

class linode_v4_options {
    
    
    access_token: String
    
    
    
    authorized_keys: Listing<String>?
    
    
    
    group: String?
    
    
    
    image: String?
    
    
    
    label: String
    
    
    
    private_ip: Boolean?
    
    
    
    region: String?
    
    
    
    root_pass: String?
    
    
    
    stackscript_data: String?
    
    
    
    stackscript_id: Int?
    
    
    
    state: ("present"|"absent")
    
    
    
    tags: Listing<String>?
    
    
    
    type: String?
    
    
}

class linode_v4 extends playbook.task {
    hidden options: linode_v4_options

    `community.general.linode_v4`: linode_v4_options?

    function into(): linode_v4 = this
        .toMap()
        .put("community.general.linode_v4", this.options)
        .toTyped(linode_v4)
}

//

class listen_ports_facts_options {
    
    
    command: ("netstat"|"ss")?
    
    
    
    include_non_listening: Boolean?
    
    
}

class listen_ports_facts extends playbook.task {
    hidden options: listen_ports_facts_options

    `community.general.listen_ports_facts`: listen_ports_facts_options?

    function into(): listen_ports_facts = this
        .toMap()
        .put("community.general.listen_ports_facts", this.options)
        .toTyped(listen_ports_facts)
}

//

class lldp_options {
    
}

class lldp extends playbook.task {
    hidden options: lldp_options

    `community.general.lldp`: lldp_options?

    function into(): lldp = this
        .toMap()
        .put("community.general.lldp", this.options)
        .toTyped(lldp)
}

//

class locale_gen_options {
    
    
    name: String
    
    
    
    state: ("absent"|"present")?
    
    
}

class locale_gen extends playbook.task {
    hidden options: locale_gen_options

    `community.general.locale_gen`: locale_gen_options?

    function into(): locale_gen = this
        .toMap()
        .put("community.general.locale_gen", this.options)
        .toTyped(locale_gen)
}

//

class logentries_options {
    
    
    logtype: String?
    
    
    
    name: String?
    
    
    
    path: String
    
    
    
    state: ("present"|"absent"|"followed"|"unfollowed")?
    
    
}

class logentries extends playbook.task {
    hidden options: logentries_options

    `community.general.logentries`: logentries_options?

    function into(): logentries = this
        .toMap()
        .put("community.general.logentries", this.options)
        .toTyped(logentries)
}

//

class logentries_msg_options {
    
    
    api: String?
    
    
    
    msg: String
    
    
    
    port: Int?
    
    
    
    token: String
    
    
}

class logentries_msg extends playbook.task {
    hidden options: logentries_msg_options

    `community.general.logentries_msg`: logentries_msg_options?

    function into(): logentries_msg = this
        .toMap()
        .put("community.general.logentries_msg", this.options)
        .toTyped(logentries_msg)
}

//

class logstash_plugin_options {
    
    
    name: String
    
    
    
    plugin_bin: String?
    
    
    
    proxy_host: String?
    
    
    
    proxy_port: String?
    
    
    
    state: ("present"|"absent")?
    
    
    
    version: String?
    
    
}

class logstash_plugin extends playbook.task {
    hidden options: logstash_plugin_options

    `community.general.logstash_plugin`: logstash_plugin_options?

    function into(): logstash_plugin = this
        .toMap()
        .put("community.general.logstash_plugin", this.options)
        .toTyped(logstash_plugin)
}

//

class lvg_options {
    
    
    force: Boolean?
    
    
    
    pesize: String?
    
    
    
    pv_options: String?
    
    
    
    pvresize: Boolean?
    
    
    
    pvs: Listing<String>?
    
    
    
    reset_pv_uuid: Boolean?
    
    
    
    reset_vg_uuid: Boolean?
    
    
    
    state: ("absent"|"present"|"active"|"inactive")?
    
    
    
    vg: String
    
    
    
    vg_options: String?
    
    
}

class lvg extends playbook.task {
    hidden options: lvg_options

    `community.general.lvg`: lvg_options?

    function into(): lvg = this
        .toMap()
        .put("community.general.lvg", this.options)
        .toTyped(lvg)
}

//

class lvg_rename_options {
    
    
    vg: String
    
    
    
    vg_new: String
    
    
}

class lvg_rename extends playbook.task {
    hidden options: lvg_rename_options

    `community.general.lvg_rename`: lvg_rename_options?

    function into(): lvg_rename = this
        .toMap()
        .put("community.general.lvg_rename", this.options)
        .toTyped(lvg_rename)
}

//

class lvol_options {
    
    
    active: Boolean?
    
    
    
    force: Boolean?
    
    
    
    lv: String?
    
    
    
    opts: String?
    
    
    
    pvs: Listing<String>?
    
    
    
    resizefs: Boolean?
    
    
    
    shrink: Boolean?
    
    
    
    size: String?
    
    
    
    snapshot: String?
    
    
    
    state: ("absent"|"present")?
    
    
    
    thinpool: String?
    
    
    
    vg: String
    
    
}

class lvol extends playbook.task {
    hidden options: lvol_options

    `community.general.lvol`: lvol_options?

    function into(): lvol = this
        .toMap()
        .put("community.general.lvol", this.options)
        .toTyped(lvol)
}

//

class lxc_container_options {
    
    
    archive: Boolean?
    
    
    
    archive_compression: ("gzip"|"bzip2"|"none")?
    
    
    
    archive_path: String?
    
    
    
    backing_store: ("dir"|"lvm"|"loop"|"btrfs"|"overlayfs"|"zfs")?
    
    
    
    clone_name: String?
    
    
    
    clone_snapshot: Boolean?
    
    
    
    config: String?
    
    
    
    container_command: String?
    
    
    
    container_config: Listing<String>?
    
    
    
    container_log: Boolean?
    
    
    
    container_log_level: ("Info"|"info"|"INFO"|"Error"|"error"|"ERROR"|"Debug"|"debug"|"DEBUG")?
    
    
    
    directory: String?
    
    
    
    fs_size: String?
    
    
    
    fs_type: String?
    
    
    
    lv_name: String?
    
    
    
    lxc_path: String?
    
    
    
    name: String
    
    
    
    state: ("started"|"stopped"|"restarted"|"absent"|"frozen"|"clone")?
    
    
    
    template: String?
    
    
    
    template_options: String?
    
    
    
    thinpool: String?
    
    
    
    vg_name: String?
    
    
    
    zfs_root: String?
    
    
}

class lxc_container extends playbook.task {
    hidden options: lxc_container_options

    `community.general.lxc_container`: lxc_container_options?

    function into(): lxc_container = this
        .toMap()
        .put("community.general.lxc_container", this.options)
        .toTyped(lxc_container)
}

//

class lxca_cmms_options {
    
    
    chassis: String?
    
    
    
    command_options: ("cmms"|"cmms_by_uuid"|"cmms_by_chassis_uuid")?
    
    
    
    uuid: String?
    
    
}

class lxca_cmms extends playbook.task {
    hidden options: lxca_cmms_options

    `community.general.lxca_cmms`: lxca_cmms_options?

    function into(): lxca_cmms = this
        .toMap()
        .put("community.general.lxca_cmms", this.options)
        .toTyped(lxca_cmms)
}

//

class lxca_nodes_options {
    
    
    chassis: String?
    
    
    
    command_options: ("nodes"|"nodes_by_uuid"|"nodes_by_chassis_uuid"|"nodes_status_managed"|"nodes_status_unmanaged")?
    
    
    
    uuid: String?
    
    
}

class lxca_nodes extends playbook.task {
    hidden options: lxca_nodes_options

    `community.general.lxca_nodes`: lxca_nodes_options?

    function into(): lxca_nodes = this
        .toMap()
        .put("community.general.lxca_nodes", this.options)
        .toTyped(lxca_nodes)
}

//

class lxd_container_options {
    
    
    architecture: String?
    
    
    
    client_cert: String?
    
    
    
    client_key: String?
    
    
    
    config: String?
    
    
    
    devices: String?
    
    
    
    ephemeral: Boolean?
    
    
    
    force_stop: Boolean?
    
    
    
    ignore_volatile_options: Boolean?
    
    
    
    name: String
    
    
    
    profiles: Listing<String>?
    
    
    
    project: String?
    
    
    
    snap_url: String?
    
    
    
    source: String?
    
    
    
    state: ("started"|"stopped"|"restarted"|"absent"|"frozen")?
    
    
    
    target: String?
    
    
    
    timeout: Int?
    
    
    
    trust_password: String?
    
    
    
    type: ("container"|"virtual-machine")?
    
    
    
    url: String?
    
    
    
    wait_for_container: Boolean?
    
    
    
    wait_for_ipv4_addresses: Boolean?
    
    
}

class lxd_container extends playbook.task {
    hidden options: lxd_container_options

    `community.general.lxd_container`: lxd_container_options?

    function into(): lxd_container = this
        .toMap()
        .put("community.general.lxd_container", this.options)
        .toTyped(lxd_container)
}

//

class lxd_profile_options {
    
    
    client_cert: String?
    
    
    
    client_key: String?
    
    
    
    config: String?
    
    
    
    description: String?
    
    
    
    devices: String?
    
    
    
    merge_profile: Boolean?
    
    
    
    name: String
    
    
    
    new_name: String?
    
    
    
    project: String?
    
    
    
    snap_url: String?
    
    
    
    state: ("present"|"absent")?
    
    
    
    trust_password: String?
    
    
    
    url: String?
    
    
}

class lxd_profile extends playbook.task {
    hidden options: lxd_profile_options

    `community.general.lxd_profile`: lxd_profile_options?

    function into(): lxd_profile = this
        .toMap()
        .put("community.general.lxd_profile", this.options)
        .toTyped(lxd_profile)
}

//

class lxd_project_options {
    
    
    client_cert: String?
    
    
    
    client_key: String?
    
    
    
    config: String?
    
    
    
    description: String?
    
    
    
    merge_project: Boolean?
    
    
    
    name: String
    
    
    
    new_name: String?
    
    
    
    snap_url: String?
    
    
    
    state: ("present"|"absent")?
    
    
    
    trust_password: String?
    
    
    
    url: String?
    
    
}

class lxd_project extends playbook.task {
    hidden options: lxd_project_options

    `community.general.lxd_project`: lxd_project_options?

    function into(): lxd_project = this
        .toMap()
        .put("community.general.lxd_project", this.options)
        .toTyped(lxd_project)
}

//

class macports_options {
    
    
    name: Listing<String>?
    
    
    
    selfupdate: Boolean?
    
    
    
    state: ("present"|"absent"|"active"|"inactive"|"installed"|"removed")?
    
    
    
    upgrade: Boolean?
    
    
    
    variant: String?
    
    
}

class macports extends playbook.task {
    hidden options: macports_options

    `community.general.macports`: macports_options?

    function into(): macports = this
        .toMap()
        .put("community.general.macports", this.options)
        .toTyped(macports)
}

//

class mail_options {
    
    
    attach: Listing<String>?
    
    
    
    bcc: Listing<String>?
    
    
    
    body: String?
    
    
    
    cc: Listing<String>?
    
    
    
    charset: String?
    
    
    
    ehlohost: String?
    
    
    
    headers: Listing<String>?
    
    
    
    host: String?
    
    
    
    message_id_domain: String?
    
    
    
    password: String?
    
    
    
    port: Int?
    
    
    
    secure: ("always"|"never"|"starttls"|"try")?
    
    
    
    sender: String?
    
    
    
    subject: String
    
    
    
    subtype: ("html"|"plain")?
    
    
    
    timeout: Int?
    
    
    
    to: Listing<String>?
    
    
    
    username: String?
    
    
}

class mail extends playbook.task {
    hidden options: mail_options

    `community.general.mail`: mail_options?

    function into(): mail = this
        .toMap()
        .put("community.general.mail", this.options)
        .toTyped(mail)
}

//

class make_options {
    
    
    chdir: String
    
    
    
    file: String?
    
    
    
    jobs: Int?
    
    
    
    make: String?
    
    
    
    params: String?
    
    
    
    target: String?
    
    
    
    targets: Listing<String>?
    
    
}

class make extends playbook.task {
    hidden options: make_options

    `community.general.make`: make_options?

    function into(): make = this
        .toMap()
        .put("community.general.make", this.options)
        .toTyped(make)
}

//

class manageiq_alert_profiles_options {
    
    
    alerts: Listing<String>?
    
    
    
    name: String?
    
    
    
    notes: String?
    
    
    
    resource_type: ("Vm"|"ContainerNode"|"MiqServer"|"Host"|"Storage"|"EmsCluster"|"ExtManagementSystem"|"MiddlewareServer")?
    
    
    
    state: ("absent"|"present")?
    
    
}

class manageiq_alert_profiles extends playbook.task {
    hidden options: manageiq_alert_profiles_options

    `community.general.manageiq_alert_profiles`: manageiq_alert_profiles_options?

    function into(): manageiq_alert_profiles = this
        .toMap()
        .put("community.general.manageiq_alert_profiles", this.options)
        .toTyped(manageiq_alert_profiles)
}

//

class manageiq_alerts_options {
    
    
    description: String?
    
    
    
    enabled: Boolean?
    
    
    
    expression: String?
    
    
    
    expression_type: ("hash"|"miq")?
    
    
    
    options: String?
    
    
    
    resource_type: ("Vm"|"ContainerNode"|"MiqServer"|"Host"|"Storage"|"EmsCluster"|"ExtManagementSystem"|"MiddlewareServer")?
    
    
    
    state: ("absent"|"present")?
    
    
}

class manageiq_alerts extends playbook.task {
    hidden options: manageiq_alerts_options

    `community.general.manageiq_alerts`: manageiq_alerts_options?

    function into(): manageiq_alerts = this
        .toMap()
        .put("community.general.manageiq_alerts", this.options)
        .toTyped(manageiq_alerts)
}

//

class manageiq_group_options {
    
    
    belongsto_filters: Listing<String>?
    
    
    
    belongsto_filters_merge_mode: ("merge"|"replace")?
    
    
    
    description: String
    
    
    
    managed_filters: String?
    
    
    
    managed_filters_merge_mode: ("merge"|"replace")?
    
    
    
    role: String?
    
    
    
    role_id: Int?
    
    
    
    state: ("absent"|"present")?
    
    
    
    tenant: String?
    
    
    
    tenant_id: Int?
    
    
}

class manageiq_group extends playbook.task {
    hidden options: manageiq_group_options

    `community.general.manageiq_group`: manageiq_group_options?

    function into(): manageiq_group = this
        .toMap()
        .put("community.general.manageiq_group", this.options)
        .toTyped(manageiq_group)
}

//

class manageiq_policies_options {
    
    
    policy_profiles: Listing<String>?
    
    
    
    resource_id: Int?
    
    
    
    resource_name: String?
    
    
    
    resource_type: ("provider"|"host"|"vm"|"blueprint"|"category"|"cluster"|"data store"|"group"|"resource pool"|"service"|"service template"|"template"|"tenant"|"user")
    
    
    
    state: ("absent"|"present")?
    
    
}

class manageiq_policies extends playbook.task {
    hidden options: manageiq_policies_options

    `community.general.manageiq_policies`: manageiq_policies_options?

    function into(): manageiq_policies = this
        .toMap()
        .put("community.general.manageiq_policies", this.options)
        .toTyped(manageiq_policies)
}

//

class manageiq_policies_info_options {
    
    
    resource_id: Int?
    
    
    
    resource_name: String?
    
    
    
    resource_type: ("provider"|"host"|"vm"|"blueprint"|"category"|"cluster"|"data store"|"group"|"resource pool"|"service"|"service template"|"template"|"tenant"|"user")
    
    
}

class manageiq_policies_info extends playbook.task {
    hidden options: manageiq_policies_info_options

    `community.general.manageiq_policies_info`: manageiq_policies_info_options?

    function into(): manageiq_policies_info = this
        .toMap()
        .put("community.general.manageiq_policies_info", this.options)
        .toTyped(manageiq_policies_info)
}

//

class manageiq_provider_options {
    
    
    alerts: String?
    
    
    
    api_version: ("v2"|"v3")?
    
    
    
    azure_tenant_id: String?
    
    
    
    host_default_vnc_port_end: String?
    
    
    
    host_default_vnc_port_start: String?
    
    
    
    metrics: String?
    
    
    
    name: String
    
    
    
    project: String?
    
    
    
    provider: String?
    
    
    
    provider_region: String?
    
    
    
    ssh_keypair: String?
    
    
    
    state: ("absent"|"present"|"refresh")?
    
    
    
    subscription: String?
    
    
    
    tenant_mapping_enabled: Boolean?
    
    
    
    type: ("Openshift"|"Amazon"|"oVirt"|"VMware"|"Azure"|"Director"|"OpenStack"|"GCE")?
    
    
    
    zone: String?
    
    
}

class manageiq_provider extends playbook.task {
    hidden options: manageiq_provider_options

    `community.general.manageiq_provider`: manageiq_provider_options?

    function into(): manageiq_provider = this
        .toMap()
        .put("community.general.manageiq_provider", this.options)
        .toTyped(manageiq_provider)
}

//

class manageiq_tags_options {
    
    
    resource_id: Int?
    
    
    
    resource_name: String?
    
    
    
    resource_type: ("provider"|"host"|"vm"|"blueprint"|"category"|"cluster"|"data store"|"group"|"resource pool"|"service"|"service template"|"template"|"tenant"|"user")
    
    
    
    state: ("absent"|"present")?
    
    
    
    tags: Listing<String>?
    
    
}

class manageiq_tags extends playbook.task {
    hidden options: manageiq_tags_options

    `community.general.manageiq_tags`: manageiq_tags_options?

    function into(): manageiq_tags = this
        .toMap()
        .put("community.general.manageiq_tags", this.options)
        .toTyped(manageiq_tags)
}

//

class manageiq_tags_info_options {
    
    
    resource_id: Int?
    
    
    
    resource_name: String?
    
    
    
    resource_type: ("provider"|"host"|"vm"|"blueprint"|"category"|"cluster"|"data store"|"group"|"resource pool"|"service"|"service template"|"template"|"tenant"|"user")
    
    
}

class manageiq_tags_info extends playbook.task {
    hidden options: manageiq_tags_info_options

    `community.general.manageiq_tags_info`: manageiq_tags_info_options?

    function into(): manageiq_tags_info = this
        .toMap()
        .put("community.general.manageiq_tags_info", this.options)
        .toTyped(manageiq_tags_info)
}

//

class manageiq_tenant_options {
    
    
    description: String
    
    
    
    name: String
    
    
    
    parent: String?
    
    
    
    parent_id: Int?
    
    
    
    quotas: String?
    
    
    
    state: ("absent"|"present")?
    
    
}

class manageiq_tenant extends playbook.task {
    hidden options: manageiq_tenant_options

    `community.general.manageiq_tenant`: manageiq_tenant_options?

    function into(): manageiq_tenant = this
        .toMap()
        .put("community.general.manageiq_tenant", this.options)
        .toTyped(manageiq_tenant)
}

//

class manageiq_user_options {
    
    
    email: String?
    
    
    
    group: String?
    
    
    
    name: String?
    
    
    
    password: String?
    
    
    
    state: ("absent"|"present")?
    
    
    
    update_password: ("always"|"on_create")?
    
    
    
    userid: String
    
    
}

class manageiq_user extends playbook.task {
    hidden options: manageiq_user_options

    `community.general.manageiq_user`: manageiq_user_options?

    function into(): manageiq_user = this
        .toMap()
        .put("community.general.manageiq_user", this.options)
        .toTyped(manageiq_user)
}

//

class mas_options {
    
    
    id: Listing<Int>?
    
    
    
    state: ("absent"|"latest"|"present")?
    
    
    
    upgrade_all: Boolean?
    
    
}

class mas extends playbook.task {
    hidden options: mas_options

    `community.general.mas`: mas_options?

    function into(): mas = this
        .toMap()
        .put("community.general.mas", this.options)
        .toTyped(mas)
}

//

class matrix_options {
    
    
    hs_url: String
    
    
    
    msg_html: String
    
    
    
    msg_plain: String
    
    
    
    password: String?
    
    
    
    room_id: String
    
    
    
    token: String?
    
    
    
    user_id: String?
    
    
}

class matrix extends playbook.task {
    hidden options: matrix_options

    `community.general.matrix`: matrix_options?

    function into(): matrix = this
        .toMap()
        .put("community.general.matrix", this.options)
        .toTyped(matrix)
}

//

class mattermost_options {
    
    
    api_key: String
    
    
    
    attachments: Listing<String>?
    
    
    
    channel: String?
    
    
    
    icon_url: String?
    
    
    
    text: String?
    
    
    
    url: String
    
    
    
    username: String?
    
    
    
    validate_certs: Boolean?
    
    
}

class mattermost extends playbook.task {
    hidden options: mattermost_options

    `community.general.mattermost`: mattermost_options?

    function into(): mattermost = this
        .toMap()
        .put("community.general.mattermost", this.options)
        .toTyped(mattermost)
}

//

class maven_artifact_options {
    
    
    artifact_id: String
    
    
    
    checksum_alg: ("md5"|"sha1")?
    
    
    
    classifier: String?
    
    
    
    client_cert: String?
    
    
    
    client_key: String?
    
    
    
    dest: String
    
    
    
    directory_mode: String?
    
    
    
    extension: String?
    
    
    
    force_basic_auth: Boolean?
    
    
    
    group_id: String
    
    
    
    headers: String?
    
    
    
    keep_name: Boolean?
    
    
    
    password: String?
    
    
    
    repository_url: String?
    
    
    
    state: ("present"|"absent")?
    
    
    
    timeout: Int?
    
    
    
    unredirected_headers: Listing<String>?
    
    
    
    username: String?
    
    
    
    validate_certs: Boolean?
    
    
    
    verify_checksum: ("never"|"download"|"change"|"always")?
    
    
    
    version: String?
    
    
    
    version_by_spec: String?
    
    
}

class maven_artifact extends playbook.task {
    hidden options: maven_artifact_options

    `community.general.maven_artifact`: maven_artifact_options?

    function into(): maven_artifact = this
        .toMap()
        .put("community.general.maven_artifact", this.options)
        .toTyped(maven_artifact)
}

//

class memset_dns_reload_options {
    
    
    api_key: String
    
    
    
    poll: Boolean?
    
    
}

class memset_dns_reload extends playbook.task {
    hidden options: memset_dns_reload_options

    `community.general.memset_dns_reload`: memset_dns_reload_options?

    function into(): memset_dns_reload = this
        .toMap()
        .put("community.general.memset_dns_reload", this.options)
        .toTyped(memset_dns_reload)
}

//

class memset_memstore_info_options {
    
    
    api_key: String
    
    
    
    name: String
    
    
}

class memset_memstore_info extends playbook.task {
    hidden options: memset_memstore_info_options

    `community.general.memset_memstore_info`: memset_memstore_info_options?

    function into(): memset_memstore_info = this
        .toMap()
        .put("community.general.memset_memstore_info", this.options)
        .toTyped(memset_memstore_info)
}

//

class memset_server_info_options {
    
    
    api_key: String
    
    
    
    name: String
    
    
}

class memset_server_info extends playbook.task {
    hidden options: memset_server_info_options

    `community.general.memset_server_info`: memset_server_info_options?

    function into(): memset_server_info = this
        .toMap()
        .put("community.general.memset_server_info", this.options)
        .toTyped(memset_server_info)
}

//

class memset_zone_options {
    
    
    api_key: String
    
    
    
    force: Boolean?
    
    
    
    name: String
    
    
    
    state: ("absent"|"present")
    
    
    
    ttl: Int?
    
    
}

class memset_zone extends playbook.task {
    hidden options: memset_zone_options

    `community.general.memset_zone`: memset_zone_options?

    function into(): memset_zone = this
        .toMap()
        .put("community.general.memset_zone", this.options)
        .toTyped(memset_zone)
}

//

class memset_zone_domain_options {
    
    
    api_key: String
    
    
    
    domain: String
    
    
    
    state: ("absent"|"present")?
    
    
    
    zone: String
    
    
}

class memset_zone_domain extends playbook.task {
    hidden options: memset_zone_domain_options

    `community.general.memset_zone_domain`: memset_zone_domain_options?

    function into(): memset_zone_domain = this
        .toMap()
        .put("community.general.memset_zone_domain", this.options)
        .toTyped(memset_zone_domain)
}

//

class memset_zone_record_options {
    
    
    address: String
    
    
    
    api_key: String
    
    
    
    priority: Int?
    
    
    
    `record`: String?
    
    
    
    relative: Boolean?
    
    
    
    state: ("absent"|"present")?
    
    
    
    ttl: Int?
    
    
    
    type: ("A"|"AAAA"|"CNAME"|"MX"|"NS"|"SRV"|"TXT")
    
    
    
    zone: String
    
    
}

class memset_zone_record extends playbook.task {
    hidden options: memset_zone_record_options

    `community.general.memset_zone_record`: memset_zone_record_options?

    function into(): memset_zone_record = this
        .toMap()
        .put("community.general.memset_zone_record", this.options)
        .toTyped(memset_zone_record)
}

//

class mksysb_options {
    
    
    backup_crypt_files: Boolean?
    
    
    
    backup_dmapi_fs: Boolean?
    
    
    
    create_map_files: Boolean?
    
    
    
    exclude_files: Boolean?
    
    
    
    exclude_wpar_files: Boolean?
    
    
    
    extended_attrs: Boolean?
    
    
    
    name: String
    
    
    
    new_image_data: Boolean?
    
    
    
    software_packing: Boolean?
    
    
    
    storage_path: String
    
    
    
    use_snapshot: Boolean?
    
    
}

class mksysb extends playbook.task {
    hidden options: mksysb_options

    `community.general.mksysb`: mksysb_options?

    function into(): mksysb = this
        .toMap()
        .put("community.general.mksysb", this.options)
        .toTyped(mksysb)
}

//

class modprobe_options {
    
    
    name: String
    
    
    
    params: String?
    
    
    
    persistent: ("disabled"|"absent"|"present")?
    
    
    
    state: ("absent"|"present")?
    
    
}

class modprobe extends playbook.task {
    hidden options: modprobe_options

    `community.general.modprobe`: modprobe_options?

    function into(): modprobe = this
        .toMap()
        .put("community.general.modprobe", this.options)
        .toTyped(modprobe)
}

//

class monit_options {
    
    
    name: String
    
    
    
    state: ("present"|"started"|"stopped"|"restarted"|"monitored"|"unmonitored"|"reloaded")
    
    
    
    timeout: Int?
    
    
}

class monit extends playbook.task {
    hidden options: monit_options

    `community.general.monit`: monit_options?

    function into(): monit = this
        .toMap()
        .put("community.general.monit", this.options)
        .toTyped(monit)
}

//

class mqtt_options {
    
    
    ca_cert: String?
    
    
    
    client_cert: String?
    
    
    
    client_id: String?
    
    
    
    client_key: String?
    
    
    
    password: String?
    
    
    
    payload: String
    
    
    
    port: Int?
    
    
    
    qos: ("0"|"1"|"2")?
    
    
    
    retain: Boolean?
    
    
    
    server: String?
    
    
    
    tls_version: ("tlsv1.1"|"tlsv1.2")?
    
    
    
    topic: String
    
    
    
    username: String?
    
    
}

class mqtt extends playbook.task {
    hidden options: mqtt_options

    `community.general.mqtt`: mqtt_options?

    function into(): mqtt = this
        .toMap()
        .put("community.general.mqtt", this.options)
        .toTyped(mqtt)
}

//

class mssql_db_options {
    
    
    autocommit: Boolean?
    
    
    
    login_host: String
    
    
    
    login_password: String?
    
    
    
    login_port: String?
    
    
    
    login_user: String?
    
    
    
    name: String
    
    
    
    state: ("present"|"absent"|"import")?
    
    
    
    target: String?
    
    
}

class mssql_db extends playbook.task {
    hidden options: mssql_db_options

    `community.general.mssql_db`: mssql_db_options?

    function into(): mssql_db = this
        .toMap()
        .put("community.general.mssql_db", this.options)
        .toTyped(mssql_db)
}

//

class mssql_script_options {
    
    
    login_host: String
    
    
    
    login_password: String?
    
    
    
    login_port: Int?
    
    
    
    login_user: String?
    
    
    
    name: String?
    
    
    
    output: ("dict"|"default")?
    
    
    
    params: String?
    
    
    
    script: String
    
    
    
    transaction: Boolean?
    
    
}

class mssql_script extends playbook.task {
    hidden options: mssql_script_options

    `community.general.mssql_script`: mssql_script_options?

    function into(): mssql_script = this
        .toMap()
        .put("community.general.mssql_script", this.options)
        .toTyped(mssql_script)
}

//

class nagios_options {
    
    
    action: ("downtime"|"delete_downtime"|"enable_alerts"|"disable_alerts"|"silence"|"unsilence"|"silence_nagios"|"unsilence_nagios"|"command"|"servicegroup_service_downtime"|"servicegroup_host_downtime"|"acknowledge"|"forced_check")
    
    
    
    author: String?
    
    
    
    cmdfile: String?
    
    
    
    command: String?
    
    
    
    comment: String?
    
    
    
    host: String?
    
    
    
    minutes: Int?
    
    
    
    servicegroup: String?
    
    
    
    services: String?
    
    
    
    start: String?
    
    
}

class nagios extends playbook.task {
    hidden options: nagios_options

    `community.general.nagios`: nagios_options?

    function into(): nagios = this
        .toMap()
        .put("community.general.nagios", this.options)
        .toTyped(nagios)
}

//

class netcup_dns_options {
    
    
    api_key: String
    
    
    
    api_password: String
    
    
    
    customer_id: Int
    
    
    
    domain: String
    
    
    
    priority: Int?
    
    
    
    `record`: String?
    
    
    
    solo: Boolean?
    
    
    
    state: ("present"|"absent")?
    
    
    
    timeout: Int?
    
    
    
    type: ("A"|"AAAA"|"MX"|"CNAME"|"CAA"|"SRV"|"TXT"|"TLSA"|"NS"|"DS"|"OPENPGPKEY"|"SMIMEA"|"SSHFP")
    
    
    
    value: String
    
    
}

class netcup_dns extends playbook.task {
    hidden options: netcup_dns_options

    `community.general.netcup_dns`: netcup_dns_options?

    function into(): netcup_dns = this
        .toMap()
        .put("community.general.netcup_dns", this.options)
        .toTyped(netcup_dns)
}

//

class newrelic_deployment_options {
    
    
    app_name: String?
    
    
    
    app_name_exact_match: Boolean?
    
    
    
    application_id: String?
    
    
    
    changelog: String?
    
    
    
    description: String?
    
    
    
    revision: String
    
    
    
    token: String
    
    
    
    user: String?
    
    
    
    validate_certs: Boolean?
    
    
}

class newrelic_deployment extends playbook.task {
    hidden options: newrelic_deployment_options

    `community.general.newrelic_deployment`: newrelic_deployment_options?

    function into(): newrelic_deployment = this
        .toMap()
        .put("community.general.newrelic_deployment", this.options)
        .toTyped(newrelic_deployment)
}

//

class nexmo_options {
    
    
    api_key: String
    
    
    
    api_secret: String
    
    
    
    dest: Listing<Int>
    
    
    
    msg: String
    
    
    
    src: Int
    
    
    
    validate_certs: Boolean?
    
    
}

class nexmo extends playbook.task {
    hidden options: nexmo_options

    `community.general.nexmo`: nexmo_options?

    function into(): nexmo = this
        .toMap()
        .put("community.general.nexmo", this.options)
        .toTyped(nexmo)
}

//

class nginx_status_info_options {
    
    
    timeout: Int?
    
    
    
    url: String
    
    
}

class nginx_status_info extends playbook.task {
    hidden options: nginx_status_info_options

    `community.general.nginx_status_info`: nginx_status_info_options?

    function into(): nginx_status_info = this
        .toMap()
        .put("community.general.nginx_status_info", this.options)
        .toTyped(nginx_status_info)
}

//

class nictagadm_options {
    
    
    etherstub: Boolean?
    
    
    
    force: Boolean?
    
    
    
    mac: String?
    
    
    
    mtu: Int?
    
    
    
    name: String
    
    
    
    state: ("absent"|"present")?
    
    
}

class nictagadm extends playbook.task {
    hidden options: nictagadm_options

    `community.general.nictagadm`: nictagadm_options?

    function into(): nictagadm = this
        .toMap()
        .put("community.general.nictagadm", this.options)
        .toTyped(nictagadm)
}

//

class nmcli_options {
    
    
    addr_gen_mode6: ("default"|"default-or-eui64"|"eui64"|"stable-privacy")?
    
    
    
    ageingtime: Int?
    
    
    
    arp_interval: Int?
    
    
    
    arp_ip_target: String?
    
    
    
    autoconnect: Boolean?
    
    
    
    conn_name: String
    
    
    
    dhcp_client_id: String?
    
    
    
    dns4: Listing<String>?
    
    
    
    dns4_ignore_auto: Boolean?
    
    
    
    dns4_options: Listing<String>?
    
    
    
    dns4_search: Listing<String>?
    
    
    
    dns6: Listing<String>?
    
    
    
    dns6_ignore_auto: Boolean?
    
    
    
    dns6_options: Listing<String>?
    
    
    
    dns6_search: Listing<String>?
    
    
    
    downdelay: Int?
    
    
    
    egress: String?
    
    
    
    flags: String?
    
    
    
    forwarddelay: Int?
    
    
    
    gsm: String?
    
    
    
    gw4: String?
    
    
    
    gw4_ignore_auto: Boolean?
    
    
    
    gw6: String?
    
    
    
    gw6_ignore_auto: Boolean?
    
    
    
    hairpin: Boolean?
    
    
    
    hellotime: Int?
    
    
    
    ifname: String?
    
    
    
    ignore_unsupported_suboptions: Boolean?
    
    
    
    ingress: String?
    
    
    
    ip4: Listing<String>?
    
    
    
    ip6: Listing<String>?
    
    
    
    ip_privacy6: ("disabled"|"prefer-public-addr"|"prefer-temp-addr"|"unknown")?
    
    
    
    ip_tunnel_dev: String?
    
    
    
    ip_tunnel_input_key: String?
    
    
    
    ip_tunnel_local: String?
    
    
    
    ip_tunnel_output_key: String?
    
    
    
    ip_tunnel_remote: String?
    
    
    
    mac: String?
    
    
    
    macvlan: String?
    
    
    
    master: String?
    
    
    
    maxage: Int?
    
    
    
    may_fail4: Boolean?
    
    
    
    method4: ("auto"|"link-local"|"manual"|"shared"|"disabled")?
    
    
    
    method6: ("ignore"|"auto"|"dhcp"|"link-local"|"manual"|"shared"|"disabled")?
    
    
    
    miimon: Int?
    
    
    
    mode: ("802.3ad"|"active-backup"|"balance-alb"|"balance-rr"|"balance-tlb"|"balance-xor"|"broadcast")?
    
    
    
    mtu: Int?
    
    
    
    never_default4: Boolean?
    
    
    
    path_cost: Int?
    
    
    
    primary: String?
    
    
    
    priority: Int?
    
    
    
    route_metric4: Int?
    
    
    
    route_metric6: Int?
    
    
    
    routes4: Listing<String>?
    
    
    
    routes4_extended: Listing<String>?
    
    
    
    routes6: Listing<String>?
    
    
    
    routes6_extended: Listing<String>?
    
    
    
    routing_rules4: Listing<String>?
    
    
    
    runner: ("broadcast"|"roundrobin"|"activebackup"|"loadbalance"|"lacp")?
    
    
    
    runner_fast_rate: Boolean?
    
    
    
    runner_hwaddr_policy: ("same_all"|"by_active"|"only_active")?
    
    
    
    slave_type: ("bond"|"bridge"|"team")?
    
    
    
    slavepriority: Int?
    
    
    
    ssid: String?
    
    
    
    state: ("absent"|"present")
    
    
    
    stp: Boolean?
    
    
    
    transport_mode: ("datagram"|"connected")?
    
    
    
    type: ("bond"|"bond-slave"|"bridge"|"bridge-slave"|"dummy"|"ethernet"|"generic"|"gre"|"infiniband"|"ipip"|"macvlan"|"sit"|"team"|"team-slave"|"vlan"|"vxlan"|"wifi"|"gsm"|"wireguard"|"vpn"|"loopback")?
    
    
    
    updelay: Int?
    
    
    
    vlandev: String?
    
    
    
    vlanid: Int?
    
    
    
    vpn: String?
    
    
    
    vxlan_id: Int?
    
    
    
    vxlan_local: String?
    
    
    
    vxlan_remote: String?
    
    
    
    wifi: String?
    
    
    
    wifi_sec: String?
    
    
    
    wireguard: String?
    
    
    
    xmit_hash_policy: String?
    
    
    
    zone: String?
    
    
}

class nmcli extends playbook.task {
    hidden options: nmcli_options

    `community.general.nmcli`: nmcli_options?

    function into(): nmcli = this
        .toMap()
        .put("community.general.nmcli", this.options)
        .toTyped(nmcli)
}

//

class nomad_job_options {
    
    
    content: String?
    
    
    
    content_format: ("hcl"|"json")?
    
    
    
    force_start: Boolean?
    
    
    
    name: String?
    
    
    
    state: ("present"|"absent")
    
    
}

class nomad_job extends playbook.task {
    hidden options: nomad_job_options

    `community.general.nomad_job`: nomad_job_options?

    function into(): nomad_job = this
        .toMap()
        .put("community.general.nomad_job", this.options)
        .toTyped(nomad_job)
}

//

class nomad_job_info_options {
    
    
    name: String?
    
    
}

class nomad_job_info extends playbook.task {
    hidden options: nomad_job_info_options

    `community.general.nomad_job_info`: nomad_job_info_options?

    function into(): nomad_job_info = this
        .toMap()
        .put("community.general.nomad_job_info", this.options)
        .toTyped(nomad_job_info)
}

//

class nomad_token_options {
    
    
    global_replicated: Boolean?
    
    
    
    name: String?
    
    
    
    policies: Listing<String>?
    
    
    
    state: ("present"|"absent")
    
    
    
    token_type: ("client"|"management"|"bootstrap")?
    
    
}

class nomad_token extends playbook.task {
    hidden options: nomad_token_options

    `community.general.nomad_token`: nomad_token_options?

    function into(): nomad_token = this
        .toMap()
        .put("community.general.nomad_token", this.options)
        .toTyped(nomad_token)
}

//

class nosh_options {
    
    
    enabled: Boolean?
    
    
    
    name: String
    
    
    
    preset: Boolean?
    
    
    
    state: ("started"|"stopped"|"reset"|"restarted"|"reloaded")?
    
    
    
    user: Boolean?
    
    
}

class nosh extends playbook.task {
    hidden options: nosh_options

    `community.general.nosh`: nosh_options?

    function into(): nosh = this
        .toMap()
        .put("community.general.nosh", this.options)
        .toTyped(nosh)
}

//

class npm_options {
    
    
    ci: Boolean?
    
    
    
    executable: String?
    
    
    
    global: Boolean?
    
    
    
    ignore_scripts: Boolean?
    
    
    
    name: String?
    
    
    
    no_bin_links: Boolean?
    
    
    
    no_optional: Boolean?
    
    
    
    path: String?
    
    
    
    production: Boolean?
    
    
    
    registry: String?
    
    
    
    state: ("present"|"absent"|"latest")?
    
    
    
    unsafe_perm: Boolean?
    
    
    
    version: String?
    
    
}

class npm extends playbook.task {
    hidden options: npm_options

    `community.general.npm`: npm_options?

    function into(): npm = this
        .toMap()
        .put("community.general.npm", this.options)
        .toTyped(npm)
}

//

class nsupdate_options {
    
    
    key_algorithm: ("HMAC-MD5.SIG-ALG.REG.INT"|"hmac-md5"|"hmac-sha1"|"hmac-sha224"|"hmac-sha256"|"hmac-sha384"|"hmac-sha512")?
    
    
    
    key_name: String?
    
    
    
    key_secret: String?
    
    
    
    port: Int?
    
    
    
    protocol: ("tcp"|"udp")?
    
    
    
    `record`: String
    
    
    
    server: String
    
    
    
    state: ("present"|"absent")?
    
    
    
    ttl: Int?
    
    
    
    type: String?
    
    
    
    value: Listing<String>?
    
    
    
    zone: String?
    
    
}

class nsupdate extends playbook.task {
    hidden options: nsupdate_options

    `community.general.nsupdate`: nsupdate_options?

    function into(): nsupdate = this
        .toMap()
        .put("community.general.nsupdate", this.options)
        .toTyped(nsupdate)
}

//

class ocapi_command_options {
    
    
    baseuri: String
    
    
    
    category: String
    
    
    
    command: String
    
    
    
    job_name: String?
    
    
    
    password: String
    
    
    
    proxy_slot_number: Int?
    
    
    
    timeout: Int?
    
    
    
    update_image_path: String?
    
    
    
    username: String
    
    
}

class ocapi_command extends playbook.task {
    hidden options: ocapi_command_options

    `community.general.ocapi_command`: ocapi_command_options?

    function into(): ocapi_command = this
        .toMap()
        .put("community.general.ocapi_command", this.options)
        .toTyped(ocapi_command)
}

//

class ocapi_info_options {
    
    
    baseuri: String
    
    
    
    category: String
    
    
    
    command: String
    
    
    
    job_name: String?
    
    
    
    password: String
    
    
    
    proxy_slot_number: Int?
    
    
    
    timeout: Int?
    
    
    
    username: String
    
    
}

class ocapi_info extends playbook.task {
    hidden options: ocapi_info_options

    `community.general.ocapi_info`: ocapi_info_options?

    function into(): ocapi_info = this
        .toMap()
        .put("community.general.ocapi_info", this.options)
        .toTyped(ocapi_info)
}

//

class oci_vcn_options {
    
    
    cidr_block: String?
    
    
    
    compartment_id: String?
    
    
    
    display_name: String?
    
    
    
    dns_label: String?
    
    
    
    state: ("present"|"absent")?
    
    
    
    vcn_id: String?
    
    
}

class oci_vcn extends playbook.task {
    hidden options: oci_vcn_options

    `community.general.oci_vcn`: oci_vcn_options?

    function into(): oci_vcn = this
        .toMap()
        .put("community.general.oci_vcn", this.options)
        .toTyped(oci_vcn)
}

//

class odbc_options {
    
    
    commit: Boolean?
    
    
    
    dsn: String
    
    
    
    params: Listing<String>?
    
    
    
    query: String
    
    
}

class odbc extends playbook.task {
    hidden options: odbc_options

    `community.general.odbc`: odbc_options?

    function into(): odbc = this
        .toMap()
        .put("community.general.odbc", this.options)
        .toTyped(odbc)
}

//

class office_365_connector_card_options {
    
    
    actions: Listing<String>?
    
    
    
    color: String?
    
    
    
    sections: Listing<String>?
    
    
    
    summary: String?
    
    
    
    text: String?
    
    
    
    title: String?
    
    
    
    webhook: String
    
    
}

class office_365_connector_card extends playbook.task {
    hidden options: office_365_connector_card_options

    `community.general.office_365_connector_card`: office_365_connector_card_options?

    function into(): office_365_connector_card = this
        .toMap()
        .put("community.general.office_365_connector_card", this.options)
        .toTyped(office_365_connector_card)
}

//

class ohai_options {
    
}

class ohai extends playbook.task {
    hidden options: ohai_options

    `community.general.ohai`: ohai_options?

    function into(): ohai = this
        .toMap()
        .put("community.general.ohai", this.options)
        .toTyped(ohai)
}

//

class omapi_host_options {
    
    
    ddns: Boolean?
    
    
    
    host: String?
    
    
    
    hostname: String?
    
    
    
    ip: String?
    
    
    
    key: String
    
    
    
    key_name: String
    
    
    
    macaddr: String
    
    
    
    port: Int?
    
    
    
    state: ("absent"|"present")
    
    
    
    statements: Listing<String>?
    
    
}

class omapi_host extends playbook.task {
    hidden options: omapi_host_options

    `community.general.omapi_host`: omapi_host_options?

    function into(): omapi_host = this
        .toMap()
        .put("community.general.omapi_host", this.options)
        .toTyped(omapi_host)
}

//

class one_host_options {
    
    
    cluster_id: Int?
    
    
    
    cluster_name: String?
    
    
    
    im_mad_name: String?
    
    
    
    labels: Listing<String>?
    
    
    
    name: String
    
    
    
    state: ("absent"|"present"|"enabled"|"disabled"|"offline")?
    
    
    
    template: String?
    
    
    
    vmm_mad_name: String?
    
    
}

class one_host extends playbook.task {
    hidden options: one_host_options

    `community.general.one_host`: one_host_options?

    function into(): one_host = this
        .toMap()
        .put("community.general.one_host", this.options)
        .toTyped(one_host)
}

//

class one_image_options {
    
    
    api_password: String?
    
    
    
    api_url: String?
    
    
    
    api_username: String?
    
    
    
    enabled: Boolean?
    
    
    
    id: Int?
    
    
    
    name: String?
    
    
    
    new_name: String?
    
    
    
    state: ("present"|"absent"|"cloned"|"renamed")?
    
    
}

class one_image extends playbook.task {
    hidden options: one_image_options

    `community.general.one_image`: one_image_options?

    function into(): one_image = this
        .toMap()
        .put("community.general.one_image", this.options)
        .toTyped(one_image)
}

//

class one_image_info_options {
    
    
    api_password: String?
    
    
    
    api_url: String?
    
    
    
    api_username: String?
    
    
    
    ids: Listing<String>?
    
    
    
    name: String?
    
    
}

class one_image_info extends playbook.task {
    hidden options: one_image_info_options

    `community.general.one_image_info`: one_image_info_options?

    function into(): one_image_info = this
        .toMap()
        .put("community.general.one_image_info", this.options)
        .toTyped(one_image_info)
}

//

class one_service_options {
    
    
    api_password: String?
    
    
    
    api_url: String?
    
    
    
    api_username: String?
    
    
    
    cardinality: Int?
    
    
    
    custom_attrs: String?
    
    
    
    force: Boolean?
    
    
    
    group_id: Int?
    
    
    
    mode: String?
    
    
    
    owner_id: Int?
    
    
    
    role: String?
    
    
    
    service_id: Int?
    
    
    
    service_name: String?
    
    
    
    state: ("present"|"absent")?
    
    
    
    template_id: Int?
    
    
    
    template_name: String?
    
    
    
    unique: Boolean?
    
    
    
    wait: Boolean?
    
    
    
    wait_timeout: Int?
    
    
}

class one_service extends playbook.task {
    hidden options: one_service_options

    `community.general.one_service`: one_service_options?

    function into(): one_service = this
        .toMap()
        .put("community.general.one_service", this.options)
        .toTyped(one_service)
}

//

class one_template_options {
    
    
    id: Int?
    
    
    
    name: String?
    
    
    
    state: ("present"|"absent")?
    
    
    
    template: String?
    
    
}

class one_template extends playbook.task {
    hidden options: one_template_options

    `community.general.one_template`: one_template_options?

    function into(): one_template = this
        .toMap()
        .put("community.general.one_template", this.options)
        .toTyped(one_template)
}

//

class one_vm_options {
    
    
    api_password: String?
    
    
    
    api_url: String?
    
    
    
    api_username: String?
    
    
    
    attributes: String?
    
    
    
    count: Int?
    
    
    
    count_attributes: String?
    
    
    
    count_labels: Listing<String>?
    
    
    
    cpu: String?
    
    
    
    datastore_id: Int?
    
    
    
    datastore_name: String?
    
    
    
    disk_saveas: String?
    
    
    
    disk_size: Listing<String>?
    
    
    
    exact_count: Int?
    
    
    
    group_id: Int?
    
    
    
    hard: Boolean?
    
    
    
    instance_ids: Listing<Int>?
    
    
    
    labels: Listing<String>?
    
    
    
    memory: String?
    
    
    
    mode: String?
    
    
    
    networks: Listing<String>?
    
    
    
    owner_id: Int?
    
    
    
    persistent: Boolean?
    
    
    
    state: ("present"|"absent"|"running"|"rebooted"|"poweredoff")?
    
    
    
    template_id: Int?
    
    
    
    template_name: String?
    
    
    
    updateconf: String?
    
    
    
    vcpu: Int?
    
    
    
    vm_start_on_hold: Boolean?
    
    
    
    wait: Boolean?
    
    
    
    wait_timeout: Int?
    
    
}

class one_vm extends playbook.task {
    hidden options: one_vm_options

    `community.general.one_vm`: one_vm_options?

    function into(): one_vm = this
        .toMap()
        .put("community.general.one_vm", this.options)
        .toTyped(one_vm)
}

//

class oneandone_firewall_policy_options {
    
    
    add_rules: Listing<String>?
    
    
    
    add_server_ips: Listing<String>?
    
    
    
    api_url: String?
    
    
    
    auth_token: String?
    
    
    
    description: String?
    
    
    
    firewall_policy: String?
    
    
    
    name: String?
    
    
    
    remove_rules: Listing<String>?
    
    
    
    remove_server_ips: Listing<String>?
    
    
    
    rules: Listing<String>?
    
    
    
    state: ("present"|"absent"|"update")?
    
    
    
    wait: Boolean?
    
    
    
    wait_interval: Int?
    
    
    
    wait_timeout: Int?
    
    
}

class oneandone_firewall_policy extends playbook.task {
    hidden options: oneandone_firewall_policy_options

    `community.general.oneandone_firewall_policy`: oneandone_firewall_policy_options?

    function into(): oneandone_firewall_policy = this
        .toMap()
        .put("community.general.oneandone_firewall_policy", this.options)
        .toTyped(oneandone_firewall_policy)
}

//

class oneandone_load_balancer_options {
    
    
    add_rules: Listing<String>?
    
    
    
    add_server_ips: Listing<String>?
    
    
    
    api_url: String?
    
    
    
    auth_token: String?
    
    
    
    datacenter: ("US"|"ES"|"DE"|"GB")?
    
    
    
    description: String?
    
    
    
    health_check_interval: String?
    
    
    
    health_check_parse: String?
    
    
    
    health_check_path: String?
    
    
    
    health_check_test: ("NONE"|"TCP"|"HTTP"|"ICMP")?
    
    
    
    load_balancer: String?
    
    
    
    method: ("ROUND_ROBIN"|"LEAST_CONNECTIONS")?
    
    
    
    name: String?
    
    
    
    persistence: Boolean?
    
    
    
    persistence_time: String?
    
    
    
    remove_rules: Listing<String>?
    
    
    
    remove_server_ips: Listing<String>?
    
    
    
    rules: Listing<String>?
    
    
    
    state: ("present"|"absent"|"update")?
    
    
    
    wait: Boolean?
    
    
    
    wait_interval: Int?
    
    
    
    wait_timeout: Int?
    
    
}

class oneandone_load_balancer extends playbook.task {
    hidden options: oneandone_load_balancer_options

    `community.general.oneandone_load_balancer`: oneandone_load_balancer_options?

    function into(): oneandone_load_balancer = this
        .toMap()
        .put("community.general.oneandone_load_balancer", this.options)
        .toTyped(oneandone_load_balancer)
}

//

class oneandone_monitoring_policy_options {
    
    
    add_ports: Listing<String>?
    
    
    
    add_processes: Listing<String>?
    
    
    
    add_servers: Listing<String>?
    
    
    
    agent: String?
    
    
    
    api_url: String?
    
    
    
    auth_token: String?
    
    
    
    description: String?
    
    
    
    email: String?
    
    
    
    monitoring_policy: String?
    
    
    
    name: String?
    
    
    
    ports: Listing<String>?
    
    
    
    processes: Listing<String>?
    
    
    
    remove_ports: Listing<String>?
    
    
    
    remove_processes: Listing<String>?
    
    
    
    remove_servers: Listing<String>?
    
    
    
    state: ("present"|"absent"|"update")?
    
    
    
    thresholds: Listing<String>?
    
    
    
    update_ports: Listing<String>?
    
    
    
    update_processes: Listing<String>?
    
    
    
    wait: Boolean?
    
    
    
    wait_interval: Int?
    
    
    
    wait_timeout: Int?
    
    
}

class oneandone_monitoring_policy extends playbook.task {
    hidden options: oneandone_monitoring_policy_options

    `community.general.oneandone_monitoring_policy`: oneandone_monitoring_policy_options?

    function into(): oneandone_monitoring_policy = this
        .toMap()
        .put("community.general.oneandone_monitoring_policy", this.options)
        .toTyped(oneandone_monitoring_policy)
}

//

class oneandone_private_network_options {
    
    
    add_members: Listing<String>?
    
    
    
    api_url: String?
    
    
    
    auth_token: String?
    
    
    
    datacenter: ("US"|"ES"|"DE"|"GB")?
    
    
    
    description: String?
    
    
    
    name: String?
    
    
    
    network_address: String?
    
    
    
    private_network: String?
    
    
    
    remove_members: Listing<String>?
    
    
    
    state: ("present"|"absent"|"update")?
    
    
    
    subnet_mask: String?
    
    
    
    wait: Boolean?
    
    
    
    wait_interval: Int?
    
    
    
    wait_timeout: Int?
    
    
}

class oneandone_private_network extends playbook.task {
    hidden options: oneandone_private_network_options

    `community.general.oneandone_private_network`: oneandone_private_network_options?

    function into(): oneandone_private_network = this
        .toMap()
        .put("community.general.oneandone_private_network", this.options)
        .toTyped(oneandone_private_network)
}

//

class oneandone_public_ip_options {
    
    
    api_url: String?
    
    
    
    auth_token: String?
    
    
    
    datacenter: ("US"|"ES"|"DE"|"GB")?
    
    
    
    public_ip_id: String?
    
    
    
    reverse_dns: String?
    
    
    
    state: ("present"|"absent"|"update")?
    
    
    
    type: ("IPV4"|"IPV6")?
    
    
    
    wait: Boolean?
    
    
    
    wait_interval: Int?
    
    
    
    wait_timeout: Int?
    
    
}

class oneandone_public_ip extends playbook.task {
    hidden options: oneandone_public_ip_options

    `community.general.oneandone_public_ip`: oneandone_public_ip_options?

    function into(): oneandone_public_ip = this
        .toMap()
        .put("community.general.oneandone_public_ip", this.options)
        .toTyped(oneandone_public_ip)
}

//

class oneandone_server_options {
    
    
    api_url: String?
    
    
    
    appliance: String?
    
    
    
    auth_token: String?
    
    
    
    auto_increment: Boolean?
    
    
    
    cores_per_processor: Int?
    
    
    
    count: Int?
    
    
    
    datacenter: ("US"|"ES"|"DE"|"GB")?
    
    
    
    description: String?
    
    
    
    firewall_policy: String?
    
    
    
    fixed_instance_size: String?
    
    
    
    hdds: Listing<String>?
    
    
    
    hostname: String?
    
    
    
    load_balancer: String?
    
    
    
    monitoring_policy: String?
    
    
    
    private_network: String?
    
    
    
    ram: String?
    
    
    
    server: String?
    
    
    
    server_type: ("cloud"|"baremetal"|"k8s_node")?
    
    
    
    ssh_key: String?
    
    
    
    state: ("present"|"absent"|"running"|"stopped")?
    
    
    
    vcore: Int?
    
    
    
    wait: Boolean?
    
    
    
    wait_interval: Int?
    
    
    
    wait_timeout: Int?
    
    
}

class oneandone_server extends playbook.task {
    hidden options: oneandone_server_options

    `community.general.oneandone_server`: oneandone_server_options?

    function into(): oneandone_server = this
        .toMap()
        .put("community.general.oneandone_server", this.options)
        .toTyped(oneandone_server)
}

//

class onepassword_info_options {
    
    
    auto_login: String?
    
    
    
    cli_path: String?
    
    
    
    search_terms: Listing<String>
    
    
}

class onepassword_info extends playbook.task {
    hidden options: onepassword_info_options

    `community.general.onepassword_info`: onepassword_info_options?

    function into(): onepassword_info = this
        .toMap()
        .put("community.general.onepassword_info", this.options)
        .toTyped(onepassword_info)
}

//

class oneview_datacenter_info_options {
    
    
    name: String?
    
    
    
    options: Listing<String>?
    
    
}

class oneview_datacenter_info extends playbook.task {
    hidden options: oneview_datacenter_info_options

    `community.general.oneview_datacenter_info`: oneview_datacenter_info_options?

    function into(): oneview_datacenter_info = this
        .toMap()
        .put("community.general.oneview_datacenter_info", this.options)
        .toTyped(oneview_datacenter_info)
}

//

class oneview_enclosure_info_options {
    
    
    name: String?
    
    
    
    options: Listing<String>?
    
    
}

class oneview_enclosure_info extends playbook.task {
    hidden options: oneview_enclosure_info_options

    `community.general.oneview_enclosure_info`: oneview_enclosure_info_options?

    function into(): oneview_enclosure_info = this
        .toMap()
        .put("community.general.oneview_enclosure_info", this.options)
        .toTyped(oneview_enclosure_info)
}

//

class oneview_ethernet_network_options {
    
    
    data: String
    
    
    
    state: ("present"|"absent"|"default_bandwidth_reset")?
    
    
}

class oneview_ethernet_network extends playbook.task {
    hidden options: oneview_ethernet_network_options

    `community.general.oneview_ethernet_network`: oneview_ethernet_network_options?

    function into(): oneview_ethernet_network = this
        .toMap()
        .put("community.general.oneview_ethernet_network", this.options)
        .toTyped(oneview_ethernet_network)
}

//

class oneview_ethernet_network_info_options {
    
    
    name: String?
    
    
    
    options: Listing<String>?
    
    
}

class oneview_ethernet_network_info extends playbook.task {
    hidden options: oneview_ethernet_network_info_options

    `community.general.oneview_ethernet_network_info`: oneview_ethernet_network_info_options?

    function into(): oneview_ethernet_network_info = this
        .toMap()
        .put("community.general.oneview_ethernet_network_info", this.options)
        .toTyped(oneview_ethernet_network_info)
}

//

class oneview_fc_network_options {
    
    
    data: String
    
    
    
    state: ("present"|"absent")
    
    
}

class oneview_fc_network extends playbook.task {
    hidden options: oneview_fc_network_options

    `community.general.oneview_fc_network`: oneview_fc_network_options?

    function into(): oneview_fc_network = this
        .toMap()
        .put("community.general.oneview_fc_network", this.options)
        .toTyped(oneview_fc_network)
}

//

class oneview_fc_network_info_options {
    
    
    name: String?
    
    
}

class oneview_fc_network_info extends playbook.task {
    hidden options: oneview_fc_network_info_options

    `community.general.oneview_fc_network_info`: oneview_fc_network_info_options?

    function into(): oneview_fc_network_info = this
        .toMap()
        .put("community.general.oneview_fc_network_info", this.options)
        .toTyped(oneview_fc_network_info)
}

//

class oneview_fcoe_network_options {
    
    
    data: String
    
    
    
    state: ("present"|"absent")?
    
    
}

class oneview_fcoe_network extends playbook.task {
    hidden options: oneview_fcoe_network_options

    `community.general.oneview_fcoe_network`: oneview_fcoe_network_options?

    function into(): oneview_fcoe_network = this
        .toMap()
        .put("community.general.oneview_fcoe_network", this.options)
        .toTyped(oneview_fcoe_network)
}

//

class oneview_fcoe_network_info_options {
    
    
    name: String?
    
    
}

class oneview_fcoe_network_info extends playbook.task {
    hidden options: oneview_fcoe_network_info_options

    `community.general.oneview_fcoe_network_info`: oneview_fcoe_network_info_options?

    function into(): oneview_fcoe_network_info = this
        .toMap()
        .put("community.general.oneview_fcoe_network_info", this.options)
        .toTyped(oneview_fcoe_network_info)
}

//

class oneview_logical_interconnect_group_options {
    
    
    data: String
    
    
    
    state: ("absent"|"present")?
    
    
}

class oneview_logical_interconnect_group extends playbook.task {
    hidden options: oneview_logical_interconnect_group_options

    `community.general.oneview_logical_interconnect_group`: oneview_logical_interconnect_group_options?

    function into(): oneview_logical_interconnect_group = this
        .toMap()
        .put("community.general.oneview_logical_interconnect_group", this.options)
        .toTyped(oneview_logical_interconnect_group)
}

//

class oneview_logical_interconnect_group_info_options {
    
    
    name: String?
    
    
}

class oneview_logical_interconnect_group_info extends playbook.task {
    hidden options: oneview_logical_interconnect_group_info_options

    `community.general.oneview_logical_interconnect_group_info`: oneview_logical_interconnect_group_info_options?

    function into(): oneview_logical_interconnect_group_info = this
        .toMap()
        .put("community.general.oneview_logical_interconnect_group_info", this.options)
        .toTyped(oneview_logical_interconnect_group_info)
}

//

class oneview_network_set_options {
    
    
    data: String
    
    
    
    state: ("present"|"absent")?
    
    
}

class oneview_network_set extends playbook.task {
    hidden options: oneview_network_set_options

    `community.general.oneview_network_set`: oneview_network_set_options?

    function into(): oneview_network_set = this
        .toMap()
        .put("community.general.oneview_network_set", this.options)
        .toTyped(oneview_network_set)
}

//

class oneview_network_set_info_options {
    
    
    name: String?
    
    
    
    options: Listing<String>?
    
    
}

class oneview_network_set_info extends playbook.task {
    hidden options: oneview_network_set_info_options

    `community.general.oneview_network_set_info`: oneview_network_set_info_options?

    function into(): oneview_network_set_info = this
        .toMap()
        .put("community.general.oneview_network_set_info", this.options)
        .toTyped(oneview_network_set_info)
}

//

class oneview_san_manager_options {
    
    
    data: String
    
    
    
    state: ("present"|"absent"|"connection_information_set")?
    
    
}

class oneview_san_manager extends playbook.task {
    hidden options: oneview_san_manager_options

    `community.general.oneview_san_manager`: oneview_san_manager_options?

    function into(): oneview_san_manager = this
        .toMap()
        .put("community.general.oneview_san_manager", this.options)
        .toTyped(oneview_san_manager)
}

//

class oneview_san_manager_info_options {
    
    
    params: String?
    
    
    
    provider_display_name: String?
    
    
}

class oneview_san_manager_info extends playbook.task {
    hidden options: oneview_san_manager_info_options

    `community.general.oneview_san_manager_info`: oneview_san_manager_info_options?

    function into(): oneview_san_manager_info = this
        .toMap()
        .put("community.general.oneview_san_manager_info", this.options)
        .toTyped(oneview_san_manager_info)
}

//

class online_server_info_options {
    
}

class online_server_info extends playbook.task {
    hidden options: online_server_info_options

    `community.general.online_server_info`: online_server_info_options?

    function into(): online_server_info = this
        .toMap()
        .put("community.general.online_server_info", this.options)
        .toTyped(online_server_info)
}

//

class online_user_info_options {
    
}

class online_user_info extends playbook.task {
    hidden options: online_user_info_options

    `community.general.online_user_info`: online_user_info_options?

    function into(): online_user_info = this
        .toMap()
        .put("community.general.online_user_info", this.options)
        .toTyped(online_user_info)
}

//

class open_iscsi_options {
    
    
    auto_node_startup: Boolean?
    
    
    
    auto_portal_startup: Boolean?
    
    
    
    discover: Boolean?
    
    
    
    login: Boolean?
    
    
    
    node_auth: String?
    
    
    
    node_pass: String?
    
    
    
    node_pass_in: String?
    
    
    
    node_user: String?
    
    
    
    node_user_in: String?
    
    
    
    port: String?
    
    
    
    portal: String?
    
    
    
    rescan: Boolean?
    
    
    
    show_nodes: Boolean?
    
    
    
    target: String?
    
    
}

class open_iscsi extends playbook.task {
    hidden options: open_iscsi_options

    `community.general.open_iscsi`: open_iscsi_options?

    function into(): open_iscsi = this
        .toMap()
        .put("community.general.open_iscsi", this.options)
        .toTyped(open_iscsi)
}

//

class openbsd_pkg_options {
    
    
    build: Boolean?
    
    
    
    clean: Boolean?
    
    
    
    name: Listing<String>
    
    
    
    ports_dir: String?
    
    
    
    quick: Boolean?
    
    
    
    snapshot: Boolean?
    
    
    
    state: ("absent"|"latest"|"present"|"installed"|"removed")?
    
    
}

class openbsd_pkg extends playbook.task {
    hidden options: openbsd_pkg_options

    `community.general.openbsd_pkg`: openbsd_pkg_options?

    function into(): openbsd_pkg = this
        .toMap()
        .put("community.general.openbsd_pkg", this.options)
        .toTyped(openbsd_pkg)
}

//

class opendj_backendprop_options {
    
    
    backend: String
    
    
    
    hostname: String
    
    
    
    name: String
    
    
    
    opendj_bindir: String?
    
    
    
    password: String?
    
    
    
    passwordfile: String?
    
    
    
    port: String
    
    
    
    state: String?
    
    
    
    username: String?
    
    
    
    value: String
    
    
}

class opendj_backendprop extends playbook.task {
    hidden options: opendj_backendprop_options

    `community.general.opendj_backendprop`: opendj_backendprop_options?

    function into(): opendj_backendprop = this
        .toMap()
        .put("community.general.opendj_backendprop", this.options)
        .toTyped(opendj_backendprop)
}

//

class openwrt_init_options {
    
    
    enabled: Boolean?
    
    
    
    name: String
    
    
    
    pattern: String?
    
    
    
    state: ("started"|"stopped"|"restarted"|"reloaded")?
    
    
}

class openwrt_init extends playbook.task {
    hidden options: openwrt_init_options

    `community.general.openwrt_init`: openwrt_init_options?

    function into(): openwrt_init = this
        .toMap()
        .put("community.general.openwrt_init", this.options)
        .toTyped(openwrt_init)
}

//

class opkg_options {
    
    
    executable: String?
    
    
    
    force: (""|"depends"|"maintainer"|"reinstall"|"overwrite"|"downgrade"|"space"|"postinstall"|"remove"|"checksum"|"removal-of-dependent-packages")?
    
    
    
    name: Listing<String>
    
    
    
    state: ("present"|"absent"|"installed"|"removed")?
    
    
    
    update_cache: Boolean?
    
    
}

class opkg extends playbook.task {
    hidden options: opkg_options

    `community.general.opkg`: opkg_options?

    function into(): opkg = this
        .toMap()
        .put("community.general.opkg", this.options)
        .toTyped(opkg)
}

//

class osx_defaults_options {
    
    
    array_add: Boolean?
    
    
    
    domain: String?
    
    
    
    host: String?
    
    
    
    key: String?
    
    
    
    path: String?
    
    
    
    state: ("absent"|"list"|"present")?
    
    
    
    type: ("array"|"bool"|"boolean"|"date"|"float"|"int"|"integer"|"string")?
    
    
    
    value: String?
    
    
}

class osx_defaults extends playbook.task {
    hidden options: osx_defaults_options

    `community.general.osx_defaults`: osx_defaults_options?

    function into(): osx_defaults = this
        .toMap()
        .put("community.general.osx_defaults", this.options)
        .toTyped(osx_defaults)
}

//

class ovh_ip_failover_options {
    
    
    application_key: String
    
    
    
    application_secret: String
    
    
    
    consumer_key: String
    
    
    
    endpoint: String
    
    
    
    name: String
    
    
    
    service: String
    
    
    
    timeout: Int?
    
    
    
    wait_completion: Boolean?
    
    
    
    wait_task_completion: Int?
    
    
}

class ovh_ip_failover extends playbook.task {
    hidden options: ovh_ip_failover_options

    `community.general.ovh_ip_failover`: ovh_ip_failover_options?

    function into(): ovh_ip_failover = this
        .toMap()
        .put("community.general.ovh_ip_failover", this.options)
        .toTyped(ovh_ip_failover)
}

//

class ovh_ip_loadbalancing_backend_options {
    
    
    application_key: String
    
    
    
    application_secret: String
    
    
    
    backend: String
    
    
    
    consumer_key: String
    
    
    
    endpoint: String
    
    
    
    name: String
    
    
    
    probe: ("none"|"http"|"icmp"|"oco")?
    
    
    
    state: ("present"|"absent")?
    
    
    
    timeout: Int?
    
    
    
    weight: Int?
    
    
}

class ovh_ip_loadbalancing_backend extends playbook.task {
    hidden options: ovh_ip_loadbalancing_backend_options

    `community.general.ovh_ip_loadbalancing_backend`: ovh_ip_loadbalancing_backend_options?

    function into(): ovh_ip_loadbalancing_backend = this
        .toMap()
        .put("community.general.ovh_ip_loadbalancing_backend", this.options)
        .toTyped(ovh_ip_loadbalancing_backend)
}

//

class ovh_monthly_billing_options {
    
    
    application_key: String?
    
    
    
    application_secret: String?
    
    
    
    consumer_key: String?
    
    
    
    endpoint: String?
    
    
    
    instance_id: String
    
    
    
    project_id: String
    
    
}

class ovh_monthly_billing extends playbook.task {
    hidden options: ovh_monthly_billing_options

    `community.general.ovh_monthly_billing`: ovh_monthly_billing_options?

    function into(): ovh_monthly_billing = this
        .toMap()
        .put("community.general.ovh_monthly_billing", this.options)
        .toTyped(ovh_monthly_billing)
}

//

class pacemaker_cluster_options {
    
    
    force: Boolean?
    
    
    
    node: String?
    
    
    
    state: ("cleanup"|"offline"|"online"|"restart")?
    
    
    
    timeout: Int?
    
    
}

class pacemaker_cluster extends playbook.task {
    hidden options: pacemaker_cluster_options

    `community.general.pacemaker_cluster`: pacemaker_cluster_options?

    function into(): pacemaker_cluster = this
        .toMap()
        .put("community.general.pacemaker_cluster", this.options)
        .toTyped(pacemaker_cluster)
}

//

class packet_device_options {
    
    
    always_pxe: Boolean?
    
    
    
    auth_token: String?
    
    
    
    count: Int?
    
    
    
    count_offset: Int?
    
    
    
    device_ids: Listing<String>?
    
    
    
    facility: String?
    
    
    
    features: String?
    
    
    
    hostnames: Listing<String>?
    
    
    
    ipxe_script_url: String?
    
    
    
    locked: Boolean?
    
    
    
    operating_system: String?
    
    
    
    plan: String?
    
    
    
    project_id: String
    
    
    
    state: ("present"|"absent"|"active"|"inactive"|"rebooted")?
    
    
    
    tags: Listing<String>?
    
    
    
    user_data: String?
    
    
    
    wait_for_public_IPv: Int?
    
    
    
    wait_timeout: Int?
    
    
}

class packet_device extends playbook.task {
    hidden options: packet_device_options

    `community.general.packet_device`: packet_device_options?

    function into(): packet_device = this
        .toMap()
        .put("community.general.packet_device", this.options)
        .toTyped(packet_device)
}

//

class packet_ip_subnet_options {
    
    
    auth_token: String?
    
    
    
    cidr: String
    
    
    
    device_count: Int?
    
    
    
    device_id: String?
    
    
    
    hostname: String?
    
    
    
    project_id: String?
    
    
    
    state: ("present"|"absent")?
    
    
}

class packet_ip_subnet extends playbook.task {
    hidden options: packet_ip_subnet_options

    `community.general.packet_ip_subnet`: packet_ip_subnet_options?

    function into(): packet_ip_subnet = this
        .toMap()
        .put("community.general.packet_ip_subnet", this.options)
        .toTyped(packet_ip_subnet)
}

//

class packet_project_options {
    
    
    auth_token: String?
    
    
    
    custom_data: String?
    
    
    
    id: String?
    
    
    
    name: String?
    
    
    
    org_id: String?
    
    
    
    payment_method: String?
    
    
    
    state: ("present"|"absent")?
    
    
}

class packet_project extends playbook.task {
    hidden options: packet_project_options

    `community.general.packet_project`: packet_project_options?

    function into(): packet_project = this
        .toMap()
        .put("community.general.packet_project", this.options)
        .toTyped(packet_project)
}

//

class packet_sshkey_options {
    
    
    auth_token: String?
    
    
    
    fingerprint: String?
    
    
    
    id: String?
    
    
    
    key: String?
    
    
    
    key_file: String?
    
    
    
    label: String?
    
    
    
    state: ("present"|"absent")?
    
    
}

class packet_sshkey extends playbook.task {
    hidden options: packet_sshkey_options

    `community.general.packet_sshkey`: packet_sshkey_options?

    function into(): packet_sshkey = this
        .toMap()
        .put("community.general.packet_sshkey", this.options)
        .toTyped(packet_sshkey)
}

//

class packet_volume_options {
    
    
    auth_token: String?
    
    
    
    billing_cycle: ("hourly"|"monthly")?
    
    
    
    description: String?
    
    
    
    facility: String?
    
    
    
    id: String?
    
    
    
    locked: Boolean?
    
    
    
    name: String?
    
    
    
    plan: ("storage_1"|"storage_2")?
    
    
    
    project_id: String
    
    
    
    size: Int?
    
    
    
    snapshot_policy: String?
    
    
    
    state: ("present"|"absent")?
    
    
}

class packet_volume extends playbook.task {
    hidden options: packet_volume_options

    `community.general.packet_volume`: packet_volume_options?

    function into(): packet_volume = this
        .toMap()
        .put("community.general.packet_volume", this.options)
        .toTyped(packet_volume)
}

//

class packet_volume_attachment_options {
    
    
    auth_token: String?
    
    
    
    device: String?
    
    
    
    project_id: String
    
    
    
    state: ("present"|"absent")?
    
    
    
    volume: String
    
    
}

class packet_volume_attachment extends playbook.task {
    hidden options: packet_volume_attachment_options

    `community.general.packet_volume_attachment`: packet_volume_attachment_options?

    function into(): packet_volume_attachment = this
        .toMap()
        .put("community.general.packet_volume_attachment", this.options)
        .toTyped(packet_volume_attachment)
}

//

class pacman_options {
    
    
    executable: String?
    
    
    
    extra_args: String?
    
    
    
    force: Boolean?
    
    
    
    name: Listing<String>?
    
    
    
    reason: ("dependency"|"explicit")?
    
    
    
    reason_for: ("all"|"new")?
    
    
    
    remove_nosave: Boolean?
    
    
    
    state: ("absent"|"installed"|"latest"|"present"|"removed")?
    
    
    
    update_cache: Boolean?
    
    
    
    update_cache_extra_args: String?
    
    
    
    upgrade: Boolean?
    
    
    
    upgrade_extra_args: String?
    
    
}

class pacman extends playbook.task {
    hidden options: pacman_options

    `community.general.pacman`: pacman_options?

    function into(): pacman = this
        .toMap()
        .put("community.general.pacman", this.options)
        .toTyped(pacman)
}

//

class pacman_key_options {
    
    
    data: String?
    
    
    
    file: String?
    
    
    
    force_update: Boolean?
    
    
    
    id: String
    
    
    
    keyring: String?
    
    
    
    keyserver: String?
    
    
    
    state: ("absent"|"present")?
    
    
    
    url: String?
    
    
    
    verify: Boolean?
    
    
}

class pacman_key extends playbook.task {
    hidden options: pacman_key_options

    `community.general.pacman_key`: pacman_key_options?

    function into(): pacman_key = this
        .toMap()
        .put("community.general.pacman_key", this.options)
        .toTyped(pacman_key)
}

//

class pagerduty_options {
    
    
    desc: String?
    
    
    
    hours: String?
    
    
    
    minutes: String?
    
    
    
    name: String?
    
    
    
    requester_id: String?
    
    
    
    service: Listing<String>?
    
    
    
    state: ("running"|"started"|"ongoing"|"absent")
    
    
    
    token: String
    
    
    
    user: String?
    
    
    
    validate_certs: Boolean?
    
    
    
    window_id: String?
    
    
}

class pagerduty extends playbook.task {
    hidden options: pagerduty_options

    `community.general.pagerduty`: pagerduty_options?

    function into(): pagerduty = this
        .toMap()
        .put("community.general.pagerduty", this.options)
        .toTyped(pagerduty)
}

//

class pagerduty_alert_options {
    
    
    api_key: String?
    
    
    
    api_version: ("v1"|"v2")?
    
    
    
    client: String?
    
    
    
    client_url: String?
    
    
    
    component: String?
    
    
    
    custom_details: String?
    
    
    
    desc: String?
    
    
    
    incident_class: String?
    
    
    
    incident_key: String?
    
    
    
    integration_key: String?
    
    
    
    link_text: String?
    
    
    
    link_url: String?
    
    
    
    name: String?
    
    
    
    service_id: String?
    
    
    
    service_key: String?
    
    
    
    severity: ("critical"|"warning"|"error"|"info")?
    
    
    
    source: String?
    
    
    
    state: ("triggered"|"acknowledged"|"resolved")
    
    
}

class pagerduty_alert extends playbook.task {
    hidden options: pagerduty_alert_options

    `community.general.pagerduty_alert`: pagerduty_alert_options?

    function into(): pagerduty_alert = this
        .toMap()
        .put("community.general.pagerduty_alert", this.options)
        .toTyped(pagerduty_alert)
}

//

class pagerduty_change_options {
    
    
    environment: String?
    
    
    
    integration_key: String
    
    
    
    link_text: String?
    
    
    
    link_url: String?
    
    
    
    repo: String?
    
    
    
    revision: String?
    
    
    
    source: String?
    
    
    
    summary: String
    
    
    
    url: String?
    
    
    
    user: String?
    
    
    
    validate_certs: Boolean?
    
    
}

class pagerduty_change extends playbook.task {
    hidden options: pagerduty_change_options

    `community.general.pagerduty_change`: pagerduty_change_options?

    function into(): pagerduty_change = this
        .toMap()
        .put("community.general.pagerduty_change", this.options)
        .toTyped(pagerduty_change)
}

//

class pagerduty_user_options {
    
    
    access_token: String
    
    
    
    pd_email: String
    
    
    
    pd_role: ("global_admin"|"manager"|"responder"|"observer"|"stakeholder"|"limited_stakeholder"|"restricted_access")?
    
    
    
    pd_teams: Listing<String>?
    
    
    
    pd_user: String
    
    
    
    state: ("present"|"absent")?
    
    
}

class pagerduty_user extends playbook.task {
    hidden options: pagerduty_user_options

    `community.general.pagerduty_user`: pagerduty_user_options?

    function into(): pagerduty_user = this
        .toMap()
        .put("community.general.pagerduty_user", this.options)
        .toTyped(pagerduty_user)
}

//

class pam_limits_options {
    
    
    backup: Boolean?
    
    
    
    comment: String?
    
    
    
    dest: String?
    
    
    
    domain: String
    
    
    
    limit_item: ("core"|"data"|"fsize"|"memlock"|"nofile"|"rss"|"stack"|"cpu"|"nproc"|"as"|"maxlogins"|"maxsyslogins"|"priority"|"locks"|"sigpending"|"msgqueue"|"nice"|"rtprio"|"chroot")
    
    
    
    limit_type: ("hard"|"soft"|"-")
    
    
    
    use_max: Boolean?
    
    
    
    use_min: Boolean?
    
    
    
    value: String
    
    
}

class pam_limits extends playbook.task {
    hidden options: pam_limits_options

    `community.general.pam_limits`: pam_limits_options?

    function into(): pam_limits = this
        .toMap()
        .put("community.general.pam_limits", this.options)
        .toTyped(pam_limits)
}

//

class pamd_options {
    
    
    backup: Boolean?
    
    
    
    control: String
    
    
    
    module_arguments: Listing<String>?
    
    
    
    module_path: String
    
    
    
    name: String
    
    
    
    new_control: String?
    
    
    
    new_module_path: String?
    
    
    
    new_type: ("account"|"-account"|"auth"|"-auth"|"password"|"-password"|"session"|"-session")?
    
    
    
    path: String?
    
    
    
    state: ("absent"|"before"|"after"|"args_absent"|"args_present"|"updated")?
    
    
    
    type: ("account"|"-account"|"auth"|"-auth"|"password"|"-password"|"session"|"-session")
    
    
}

class pamd extends playbook.task {
    hidden options: pamd_options

    `community.general.pamd`: pamd_options?

    function into(): pamd = this
        .toMap()
        .put("community.general.pamd", this.options)
        .toTyped(pamd)
}

//

class parted_options {
    
    
    align: ("cylinder"|"minimal"|"none"|"optimal"|"undefined")?
    
    
    
    device: String
    
    
    
    flags: Listing<String>?
    
    
    
    fs_type: String?
    
    
    
    label: ("aix"|"amiga"|"bsd"|"dvh"|"gpt"|"loop"|"mac"|"msdos"|"pc98"|"sun")?
    
    
    
    name: String?
    
    
    
    number: Int?
    
    
    
    part_end: String?
    
    
    
    part_start: String?
    
    
    
    part_type: ("extended"|"logical"|"primary")?
    
    
    
    resize: Boolean?
    
    
    
    state: ("absent"|"present"|"info")?
    
    
    
    unit: ("s"|"B"|"KB"|"KiB"|"MB"|"MiB"|"GB"|"GiB"|"TB"|"TiB"|"%"|"cyl"|"chs"|"compact")?
    
    
}

class parted extends playbook.task {
    hidden options: parted_options

    `community.general.parted`: parted_options?

    function into(): parted = this
        .toMap()
        .put("community.general.parted", this.options)
        .toTyped(parted)
}

//

class pear_options {
    
    
    executable: String?
    
    
    
    name: String
    
    
    
    prompts: Listing<String>?
    
    
    
    state: ("present"|"installed"|"latest"|"absent"|"removed")?
    
    
}

class pear extends playbook.task {
    hidden options: pear_options

    `community.general.pear`: pear_options?

    function into(): pear = this
        .toMap()
        .put("community.general.pear", this.options)
        .toTyped(pear)
}

//

class pids_options {
    
    
    ignore_case: Boolean?
    
    
    
    name: String?
    
    
    
    pattern: String?
    
    
}

class pids extends playbook.task {
    hidden options: pids_options

    `community.general.pids`: pids_options?

    function into(): pids = this
        .toMap()
        .put("community.general.pids", this.options)
        .toTyped(pids)
}

//

class pingdom_options {
    
    
    checkid: String
    
    
    
    key: String
    
    
    
    passwd: String
    
    
    
    state: ("running"|"paused"|"started"|"stopped")
    
    
    
    uid: String
    
    
}

class pingdom extends playbook.task {
    hidden options: pingdom_options

    `community.general.pingdom`: pingdom_options?

    function into(): pingdom = this
        .toMap()
        .put("community.general.pingdom", this.options)
        .toTyped(pingdom)
}

//

class pip_package_info_options {
    
    
    clients: Listing<String>?
    
    
}

class pip_package_info extends playbook.task {
    hidden options: pip_package_info_options

    `community.general.pip_package_info`: pip_package_info_options?

    function into(): pip_package_info = this
        .toMap()
        .put("community.general.pip_package_info", this.options)
        .toTyped(pip_package_info)
}

//

class pipx_options {
    
    
    editable: Boolean?
    
    
    
    executable: String?
    
    
    
    force: Boolean?
    
    
    
    include_injected: Boolean?
    
    
    
    index_url: String?
    
    
    
    inject_packages: Listing<String>?
    
    
    
    install_apps: Boolean?
    
    
    
    install_deps: Boolean?
    
    
    
    name: String?
    
    
    
    pip_args: String?
    
    
    
    python: String?
    
    
    
    source: String?
    
    
    
    state: ("present"|"absent"|"install"|"uninstall"|"uninstall_all"|"inject"|"upgrade"|"upgrade_all"|"reinstall"|"reinstall_all"|"latest")?
    
    
    
    system_site_packages: Boolean?
    
    
}

class pipx extends playbook.task {
    hidden options: pipx_options

    `community.general.pipx`: pipx_options?

    function into(): pipx = this
        .toMap()
        .put("community.general.pipx", this.options)
        .toTyped(pipx)
}

//

class pipx_info_options {
    
    
    executable: String?
    
    
    
    include_deps: Boolean?
    
    
    
    include_injected: Boolean?
    
    
    
    include_raw: Boolean?
    
    
    
    name: String?
    
    
}

class pipx_info extends playbook.task {
    hidden options: pipx_info_options

    `community.general.pipx_info`: pipx_info_options?

    function into(): pipx_info = this
        .toMap()
        .put("community.general.pipx_info", this.options)
        .toTyped(pipx_info)
}

//

class pkg5_options {
    
    
    accept_licenses: Boolean?
    
    
    
    be_name: String?
    
    
    
    name: Listing<String>
    
    
    
    refresh: Boolean?
    
    
    
    state: ("absent"|"latest"|"present"|"installed"|"removed"|"uninstalled")?
    
    
}

class pkg5 extends playbook.task {
    hidden options: pkg5_options

    `community.general.pkg5`: pkg5_options?

    function into(): pkg5 = this
        .toMap()
        .put("community.general.pkg5", this.options)
        .toTyped(pkg5)
}

//

class pkg5_publisher_options {
    
    
    enabled: Boolean?
    
    
    
    mirror: Listing<String>?
    
    
    
    name: String
    
    
    
    origin: Listing<String>?
    
    
    
    state: ("present"|"absent")?
    
    
    
    sticky: Boolean?
    
    
}

class pkg5_publisher extends playbook.task {
    hidden options: pkg5_publisher_options

    `community.general.pkg5_publisher`: pkg5_publisher_options?

    function into(): pkg5_publisher = this
        .toMap()
        .put("community.general.pkg5_publisher", this.options)
        .toTyped(pkg5_publisher)
}

//

class pkgin_options {
    
    
    clean: Boolean?
    
    
    
    force: Boolean?
    
    
    
    full_upgrade: Boolean?
    
    
    
    name: Listing<String>?
    
    
    
    state: ("present"|"absent")?
    
    
    
    update_cache: Boolean?
    
    
    
    upgrade: Boolean?
    
    
}

class pkgin extends playbook.task {
    hidden options: pkgin_options

    `community.general.pkgin`: pkgin_options?

    function into(): pkgin = this
        .toMap()
        .put("community.general.pkgin", this.options)
        .toTyped(pkgin)
}

//

class pkgng_options {
    
    
    annotation: Listing<String>?
    
    
    
    autoremove: Boolean?
    
    
    
    cached: Boolean?
    
    
    
    chroot: String?
    
    
    
    ignore_osver: Boolean?
    
    
    
    jail: String?
    
    
    
    name: Listing<String>
    
    
    
    pkgsite: String?
    
    
    
    rootdir: String?
    
    
    
    state: ("present"|"latest"|"absent")?
    
    
}

class pkgng extends playbook.task {
    hidden options: pkgng_options

    `community.general.pkgng`: pkgng_options?

    function into(): pkgng = this
        .toMap()
        .put("community.general.pkgng", this.options)
        .toTyped(pkgng)
}

//

class pkgutil_options {
    
    
    force: Boolean?
    
    
    
    name: Listing<String>
    
    
    
    site: String?
    
    
    
    state: ("absent"|"installed"|"latest"|"present"|"removed")
    
    
    
    update_catalog: Boolean?
    
    
}

class pkgutil extends playbook.task {
    hidden options: pkgutil_options

    `community.general.pkgutil`: pkgutil_options?

    function into(): pkgutil = this
        .toMap()
        .put("community.general.pkgutil", this.options)
        .toTyped(pkgutil)
}

//

class pmem_options {
    
    
    appdirect: Int?
    
    
    
    appdirect_interleaved: Boolean?
    
    
    
    memorymode: Int?
    
    
    
    namespace: Listing<String>?
    
    
    
    namespace_append: Boolean?
    
    
    
    reserved: Int?
    
    
    
    socket: Listing<String>?
    
    
}

class pmem extends playbook.task {
    hidden options: pmem_options

    `community.general.pmem`: pmem_options?

    function into(): pmem = this
        .toMap()
        .put("community.general.pmem", this.options)
        .toTyped(pmem)
}

//

class pnpm_options {
    
    
    alias: String?
    
    
    
    dev: Boolean?
    
    
    
    executable: String?
    
    
    
    global: Boolean?
    
    
    
    ignore_scripts: Boolean?
    
    
    
    name: String?
    
    
    
    no_optional: Boolean?
    
    
    
    optional: Boolean?
    
    
    
    path: String?
    
    
    
    production: Boolean?
    
    
    
    state: ("present"|"absent"|"latest")?
    
    
    
    version: String?
    
    
}

class pnpm extends playbook.task {
    hidden options: pnpm_options

    `community.general.pnpm`: pnpm_options?

    function into(): pnpm = this
        .toMap()
        .put("community.general.pnpm", this.options)
        .toTyped(pnpm)
}

//

class portage_options {
    
    
    backtrack: Int?
    
    
    
    changed_use: Boolean?
    
    
    
    deep: Boolean?
    
    
    
    depclean: Boolean?
    
    
    
    getbinpkg: Boolean?
    
    
    
    getbinpkgonly: Boolean?
    
    
    
    jobs: Int?
    
    
    
    keepgoing: Boolean?
    
    
    
    loadavg: String?
    
    
    
    newuse: Boolean?
    
    
    
    nodeps: Boolean?
    
    
    
    noreplace: Boolean?
    
    
    
    oneshot: Boolean?
    
    
    
    onlydeps: Boolean?
    
    
    
    package: Listing<String>?
    
    
    
    quiet: Boolean?
    
    
    
    quietbuild: Boolean?
    
    
    
    quietfail: Boolean?
    
    
    
    state: ("present"|"installed"|"emerged"|"absent"|"removed"|"unmerged"|"latest")?
    
    
    
    sync: ("web"|"yes"|"no")?
    
    
    
    update: Boolean?
    
    
    
    usepkg: Boolean?
    
    
    
    usepkgonly: Boolean?
    
    
    
    verbose: Boolean?
    
    
    
    withbdeps: Boolean?
    
    
}

class portage extends playbook.task {
    hidden options: portage_options

    `community.general.portage`: portage_options?

    function into(): portage = this
        .toMap()
        .put("community.general.portage", this.options)
        .toTyped(portage)
}

//

class portinstall_options {
    
    
    name: String
    
    
    
    state: ("present"|"absent")?
    
    
    
    use_packages: Boolean?
    
    
}

class portinstall extends playbook.task {
    hidden options: portinstall_options

    `community.general.portinstall`: portinstall_options?

    function into(): portinstall = this
        .toMap()
        .put("community.general.portinstall", this.options)
        .toTyped(portinstall)
}

//

class pritunl_org_options {
    
    
    force: Boolean?
    
    
    
    name: String
    
    
    
    state: ("present"|"absent")?
    
    
}

class pritunl_org extends playbook.task {
    hidden options: pritunl_org_options

    `community.general.pritunl_org`: pritunl_org_options?

    function into(): pritunl_org = this
        .toMap()
        .put("community.general.pritunl_org", this.options)
        .toTyped(pritunl_org)
}

//

class pritunl_org_info_options {
    
    
    organization: String?
    
    
}

class pritunl_org_info extends playbook.task {
    hidden options: pritunl_org_info_options

    `community.general.pritunl_org_info`: pritunl_org_info_options?

    function into(): pritunl_org_info = this
        .toMap()
        .put("community.general.pritunl_org_info", this.options)
        .toTyped(pritunl_org_info)
}

//

class pritunl_user_options {
    
    
    organization: String
    
    
    
    state: ("present"|"absent")?
    
    
    
    user_disabled: Boolean?
    
    
    
    user_email: String?
    
    
    
    user_gravatar: Boolean?
    
    
    
    user_groups: Listing<String>?
    
    
    
    user_mac_addresses: Listing<String>?
    
    
    
    user_name: String
    
    
    
    user_type: ("client"|"server")?
    
    
}

class pritunl_user extends playbook.task {
    hidden options: pritunl_user_options

    `community.general.pritunl_user`: pritunl_user_options?

    function into(): pritunl_user = this
        .toMap()
        .put("community.general.pritunl_user", this.options)
        .toTyped(pritunl_user)
}

//

class pritunl_user_info_options {
    
    
    organization: String
    
    
    
    user_name: String?
    
    
    
    user_type: ("client"|"server")?
    
    
}

class pritunl_user_info extends playbook.task {
    hidden options: pritunl_user_info_options

    `community.general.pritunl_user_info`: pritunl_user_info_options?

    function into(): pritunl_user_info = this
        .toMap()
        .put("community.general.pritunl_user_info", this.options)
        .toTyped(pritunl_user_info)
}

//

class profitbricks_options {
    
    
    assign_public_ip: Boolean?
    
    
    
    auto_increment: Boolean?
    
    
    
    bus: ("IDE"|"VIRTIO")?
    
    
    
    cores: Int?
    
    
    
    count: Int?
    
    
    
    cpu_family: ("AMD_OPTERON"|"INTEL_XEON")?
    
    
    
    datacenter: String?
    
    
    
    disk_type: ("SSD"|"HDD")?
    
    
    
    image: String?
    
    
    
    image_password: String?
    
    
    
    instance_ids: Listing<String>?
    
    
    
    lan: Int?
    
    
    
    location: ("us/las"|"de/fra"|"de/fkb")?
    
    
    
    name: String?
    
    
    
    ram: Int?
    
    
    
    remove_boot_volume: Boolean?
    
    
    
    ssh_keys: Listing<String>?
    
    
    
    state: String?
    
    
    
    subscription_password: String?
    
    
    
    subscription_user: String?
    
    
    
    volume_size: Int?
    
    
    
    wait: Boolean?
    
    
    
    wait_timeout: Int?
    
    
}

class profitbricks extends playbook.task {
    hidden options: profitbricks_options

    `community.general.profitbricks`: profitbricks_options?

    function into(): profitbricks = this
        .toMap()
        .put("community.general.profitbricks", this.options)
        .toTyped(profitbricks)
}

//

class profitbricks_datacenter_options {
    
    
    description: String?
    
    
    
    location: ("us/las"|"de/fra"|"de/fkb")?
    
    
    
    name: String?
    
    
    
    state: String?
    
    
    
    subscription_password: String?
    
    
    
    subscription_user: String?
    
    
    
    wait: Boolean?
    
    
    
    wait_timeout: Int?
    
    
}

class profitbricks_datacenter extends playbook.task {
    hidden options: profitbricks_datacenter_options

    `community.general.profitbricks_datacenter`: profitbricks_datacenter_options?

    function into(): profitbricks_datacenter = this
        .toMap()
        .put("community.general.profitbricks_datacenter", this.options)
        .toTyped(profitbricks_datacenter)
}

//

class profitbricks_nic_options {
    
    
    datacenter: String
    
    
    
    lan: String?
    
    
    
    name: String?
    
    
    
    server: String
    
    
    
    state: String?
    
    
    
    subscription_password: String
    
    
    
    subscription_user: String
    
    
    
    wait: Boolean?
    
    
    
    wait_timeout: Int?
    
    
}

class profitbricks_nic extends playbook.task {
    hidden options: profitbricks_nic_options

    `community.general.profitbricks_nic`: profitbricks_nic_options?

    function into(): profitbricks_nic = this
        .toMap()
        .put("community.general.profitbricks_nic", this.options)
        .toTyped(profitbricks_nic)
}

//

class profitbricks_volume_options {
    
    
    auto_increment: Boolean?
    
    
    
    bus: ("IDE"|"VIRTIO")?
    
    
    
    count: Int?
    
    
    
    datacenter: String?
    
    
    
    disk_type: ("HDD"|"SSD")?
    
    
    
    image: String?
    
    
    
    image_password: String?
    
    
    
    instance_ids: Listing<String>?
    
    
    
    licence_type: String?
    
    
    
    name: String?
    
    
    
    server: String?
    
    
    
    size: Int?
    
    
    
    ssh_keys: Listing<String>?
    
    
    
    state: String?
    
    
    
    subscription_password: String?
    
    
    
    subscription_user: String?
    
    
    
    wait: Boolean?
    
    
    
    wait_timeout: Int?
    
    
}

class profitbricks_volume extends playbook.task {
    hidden options: profitbricks_volume_options

    `community.general.profitbricks_volume`: profitbricks_volume_options?

    function into(): profitbricks_volume = this
        .toMap()
        .put("community.general.profitbricks_volume", this.options)
        .toTyped(profitbricks_volume)
}

//

class profitbricks_volume_attachments_options {
    
    
    datacenter: String?
    
    
    
    server: String?
    
    
    
    state: String?
    
    
    
    subscription_password: String?
    
    
    
    subscription_user: String?
    
    
    
    volume: String?
    
    
    
    wait: Boolean?
    
    
    
    wait_timeout: Int?
    
    
}

class profitbricks_volume_attachments extends playbook.task {
    hidden options: profitbricks_volume_attachments_options

    `community.general.profitbricks_volume_attachments`: profitbricks_volume_attachments_options?

    function into(): profitbricks_volume_attachments = this
        .toMap()
        .put("community.general.profitbricks_volume_attachments", this.options)
        .toTyped(profitbricks_volume_attachments)
}

//

class proxmox_options {
    
    
    clone: Int?
    
    
    
    clone_type: ("full"|"linked"|"opportunistic")?
    
    
    
    cores: Int?
    
    
    
    cpus: Int?
    
    
    
    cpuunits: Int?
    
    
    
    description: String?
    
    
    
    disk: String?
    
    
    
    features: Listing<String>?
    
    
    
    force: Boolean?
    
    
    
    hookscript: String?
    
    
    
    hostname: String?
    
    
    
    ip_address: String?
    
    
    
    memory: Int?
    
    
    
    mounts: String?
    
    
    
    nameserver: String?
    
    
    
    netif: String?
    
    
    
    onboot: Boolean?
    
    
    
    ostemplate: String?
    
    
    
    ostype: ("auto"|"debian"|"devuan"|"ubuntu"|"centos"|"fedora"|"opensuse"|"archlinux"|"alpine"|"gentoo"|"nixos"|"unmanaged")?
    
    
    
    password: String?
    
    
    
    proxmox_default_behavior: ("compatibility"|"no_defaults")?
    
    
    
    pubkey: String?
    
    
    
    purge: Boolean?
    
    
    
    searchdomain: String?
    
    
    
    state: ("present"|"started"|"absent"|"stopped"|"restarted"|"template")?
    
    
    
    storage: String?
    
    
    
    swap: Int?
    
    
    
    tags: Listing<String>?
    
    
    
    timeout: Int?
    
    
    
    timezone: String?
    
    
    
    unprivileged: Boolean?
    
    
    
    update: Boolean?
    
    
}

class proxmox extends playbook.task {
    hidden options: proxmox_options

    `community.general.proxmox`: proxmox_options?

    function into(): proxmox = this
        .toMap()
        .put("community.general.proxmox", this.options)
        .toTyped(proxmox)
}

//

class proxmox_disk_options {
    
    
    aio: ("native"|"threads"|"io_uring")?
    
    
    
    backup: Boolean?
    
    
    
    bps_max_length: Int?
    
    
    
    bps_rd_max_length: Int?
    
    
    
    bps_wr_max_length: Int?
    
    
    
    bwlimit: Int?
    
    
    
    cache: ("none"|"writethrough"|"writeback"|"unsafe"|"directsync")?
    
    
    
    create: ("disabled"|"regular"|"forced")?
    
    
    
    cyls: Int?
    
    
    
    delete_moved: Boolean?
    
    
    
    detect_zeroes: Boolean?
    
    
    
    discard: ("ignore"|"on")?
    
    
    
    disk: String
    
    
    
    format: ("raw"|"cow"|"qcow"|"qed"|"qcow2"|"vmdk"|"cloop")?
    
    
    
    heads: Int?
    
    
    
    import_from: String?
    
    
    
    iops: Int?
    
    
    
    iops_max: Int?
    
    
    
    iops_max_length: Int?
    
    
    
    iops_rd: Int?
    
    
    
    iops_rd_max: Int?
    
    
    
    iops_rd_max_length: Int?
    
    
    
    iops_wr: Int?
    
    
    
    iops_wr_max: Int?
    
    
    
    iops_wr_max_length: Int?
    
    
    
    iothread: Boolean?
    
    
    
    iso_image: String?
    
    
    
    mbps: String?
    
    
    
    mbps_max: String?
    
    
    
    mbps_rd: String?
    
    
    
    mbps_rd_max: String?
    
    
    
    mbps_wr: String?
    
    
    
    mbps_wr_max: String?
    
    
    
    media: ("cdrom"|"disk")?
    
    
    
    name: String?
    
    
    
    queues: Int?
    
    
    
    replicate: Boolean?
    
    
    
    rerror: ("ignore"|"report"|"stop")?
    
    
    
    ro: Boolean?
    
    
    
    scsiblock: Boolean?
    
    
    
    secs: Int?
    
    
    
    serial: String?
    
    
    
    shared: Boolean?
    
    
    
    size: String?
    
    
    
    snapshot: Boolean?
    
    
    
    ssd: Boolean?
    
    
    
    state: ("present"|"resized"|"detached"|"moved"|"absent")?
    
    
    
    storage: String?
    
    
    
    target_disk: String?
    
    
    
    target_storage: String?
    
    
    
    target_vmid: Int?
    
    
    
    timeout: Int?
    
    
    
    trans: ("auto"|"lba"|"none")?
    
    
    
    vmid: Int?
    
    
    
    werror: ("enospc"|"ignore"|"report"|"stop")?
    
    
    
    wwn: String?
    
    
}

class proxmox_disk extends playbook.task {
    hidden options: proxmox_disk_options

    `community.general.proxmox_disk`: proxmox_disk_options?

    function into(): proxmox_disk = this
        .toMap()
        .put("community.general.proxmox_disk", this.options)
        .toTyped(proxmox_disk)
}

//

class proxmox_domain_info_options {
    
    
    domain: String?
    
    
}

class proxmox_domain_info extends playbook.task {
    hidden options: proxmox_domain_info_options

    `community.general.proxmox_domain_info`: proxmox_domain_info_options?

    function into(): proxmox_domain_info = this
        .toMap()
        .put("community.general.proxmox_domain_info", this.options)
        .toTyped(proxmox_domain_info)
}

//

class proxmox_group_info_options {
    
    
    group: String?
    
    
}

class proxmox_group_info extends playbook.task {
    hidden options: proxmox_group_info_options

    `community.general.proxmox_group_info`: proxmox_group_info_options?

    function into(): proxmox_group_info = this
        .toMap()
        .put("community.general.proxmox_group_info", this.options)
        .toTyped(proxmox_group_info)
}

//

class proxmox_kvm_options {
    
    
    acpi: Boolean?
    
    
    
    agent: String?
    
    
    
    archive: String?
    
    
    
    args: String?
    
    
    
    autostart: Boolean?
    
    
    
    balloon: Int?
    
    
    
    bios: ("seabios"|"ovmf")?
    
    
    
    boot: String?
    
    
    
    bootdisk: String?
    
    
    
    cicustom: String?
    
    
    
    cipassword: String?
    
    
    
    citype: ("nocloud"|"configdrive2")?
    
    
    
    ciuser: String?
    
    
    
    clone: String?
    
    
    
    cores: Int?
    
    
    
    cpu: String?
    
    
    
    cpulimit: Int?
    
    
    
    cpuunits: Int?
    
    
    
    `delete`: String?
    
    
    
    description: String?
    
    
    
    digest: String?
    
    
    
    efidisk0: String?
    
    
    
    force: Boolean?
    
    
    
    format: ("cloop"|"cow"|"qcow"|"qcow2"|"qed"|"raw"|"vmdk"|"unspecified")?
    
    
    
    freeze: Boolean?
    
    
    
    full: Boolean?
    
    
    
    hookscript: String?
    
    
    
    hostpci: String?
    
    
    
    hotplug: String?
    
    
    
    hugepages: ("any"|"2"|"1024")?
    
    
    
    ide: String?
    
    
    
    ipconfig: String?
    
    
    
    keyboard: String?
    
    
    
    kvm: Boolean?
    
    
    
    localtime: Boolean?
    
    
    
    lock: ("migrate"|"backup"|"snapshot"|"rollback")?
    
    
    
    machine: String?
    
    
    
    memory: Int?
    
    
    
    migrate: Boolean?
    
    
    
    migrate_downtime: Int?
    
    
    
    migrate_speed: Int?
    
    
    
    name: String?
    
    
    
    nameservers: Listing<String>?
    
    
    
    net: String?
    
    
    
    newid: Int?
    
    
    
    numa: String?
    
    
    
    numa_enabled: Boolean?
    
    
    
    onboot: Boolean?
    
    
    
    ostype: ("other"|"wxp"|"w2k"|"w2k3"|"w2k8"|"wvista"|"win7"|"win8"|"win10"|"win11"|"l24"|"l26"|"solaris")?
    
    
    
    parallel: String?
    
    
    
    protection: Boolean?
    
    
    
    proxmox_default_behavior: ("compatibility"|"no_defaults")?
    
    
    
    reboot: Boolean?
    
    
    
    revert: String?
    
    
    
    sata: String?
    
    
    
    scsi: String?
    
    
    
    scsihw: ("lsi"|"lsi53c810"|"virtio-scsi-pci"|"virtio-scsi-single"|"megasas"|"pvscsi")?
    
    
    
    searchdomains: Listing<String>?
    
    
    
    serial: String?
    
    
    
    shares: Int?
    
    
    
    skiplock: Boolean?
    
    
    
    smbios: String?
    
    
    
    snapname: String?
    
    
    
    sockets: Int?
    
    
    
    sshkeys: String?
    
    
    
    startdate: String?
    
    
    
    startup: String?
    
    
    
    state: ("present"|"started"|"absent"|"stopped"|"restarted"|"current"|"template")?
    
    
    
    storage: String?
    
    
    
    tablet: Boolean?
    
    
    
    tags: Listing<String>?
    
    
    
    target: String?
    
    
    
    tdf: Boolean?
    
    
    
    template: Boolean?
    
    
    
    timeout: Int?
    
    
    
    tpmstate0: String?
    
    
    
    update: Boolean?
    
    
    
    update_unsafe: Boolean?
    
    
    
    vcpus: Int?
    
    
    
    vga: ("std"|"cirrus"|"vmware"|"qxl"|"serial0"|"serial1"|"serial2"|"serial3"|"qxl2"|"qxl3"|"qxl4")?
    
    
    
    virtio: String?
    
    
    
    watchdog: String?
    
    
}

class proxmox_kvm extends playbook.task {
    hidden options: proxmox_kvm_options

    `community.general.proxmox_kvm`: proxmox_kvm_options?

    function into(): proxmox_kvm = this
        .toMap()
        .put("community.general.proxmox_kvm", this.options)
        .toTyped(proxmox_kvm)
}

//

class proxmox_nic_options {
    
    
    bridge: String?
    
    
    
    firewall: Boolean?
    
    
    
    interface: String
    
    
    
    link_down: Boolean?
    
    
    
    mac: String?
    
    
    
    model: ("e1000"|"e1000-82540em"|"e1000-82544gc"|"e1000-82545em"|"i82551"|"i82557b"|"i82559er"|"ne2k_isa"|"ne2k_pci"|"pcnet"|"rtl8139"|"virtio"|"vmxnet3")?
    
    
    
    mtu: Int?
    
    
    
    name: String?
    
    
    
    queues: Int?
    
    
    
    rate: String?
    
    
    
    state: ("present"|"absent")?
    
    
    
    tag: Int?
    
    
    
    trunks: Listing<Int>?
    
    
    
    vmid: Int?
    
    
}

class proxmox_nic extends playbook.task {
    hidden options: proxmox_nic_options

    `community.general.proxmox_nic`: proxmox_nic_options?

    function into(): proxmox_nic = this
        .toMap()
        .put("community.general.proxmox_nic", this.options)
        .toTyped(proxmox_nic)
}

//

class proxmox_node_info_options {
    
}

class proxmox_node_info extends playbook.task {
    hidden options: proxmox_node_info_options

    `community.general.proxmox_node_info`: proxmox_node_info_options?

    function into(): proxmox_node_info = this
        .toMap()
        .put("community.general.proxmox_node_info", this.options)
        .toTyped(proxmox_node_info)
}

//

class proxmox_pool_options {
    
    
    comment: String?
    
    
    
    poolid: String
    
    
    
    state: ("present"|"absent")?
    
    
}

class proxmox_pool extends playbook.task {
    hidden options: proxmox_pool_options

    `community.general.proxmox_pool`: proxmox_pool_options?

    function into(): proxmox_pool = this
        .toMap()
        .put("community.general.proxmox_pool", this.options)
        .toTyped(proxmox_pool)
}

//

class proxmox_pool_member_options {
    
    
    member: String
    
    
    
    poolid: String
    
    
    
    state: ("present"|"absent")?
    
    
    
    type: ("vm"|"storage")?
    
    
}

class proxmox_pool_member extends playbook.task {
    hidden options: proxmox_pool_member_options

    `community.general.proxmox_pool_member`: proxmox_pool_member_options?

    function into(): proxmox_pool_member = this
        .toMap()
        .put("community.general.proxmox_pool_member", this.options)
        .toTyped(proxmox_pool_member)
}

//

class proxmox_snap_options {
    
    
    description: String?
    
    
    
    force: Boolean?
    
    
    
    hostname: String?
    
    
    
    retention: Int?
    
    
    
    snapname: String?
    
    
    
    state: ("present"|"absent"|"rollback")?
    
    
    
    timeout: Int?
    
    
    
    unbind: Boolean?
    
    
    
    vmid: String?
    
    
    
    vmstate: Boolean?
    
    
}

class proxmox_snap extends playbook.task {
    hidden options: proxmox_snap_options

    `community.general.proxmox_snap`: proxmox_snap_options?

    function into(): proxmox_snap = this
        .toMap()
        .put("community.general.proxmox_snap", this.options)
        .toTyped(proxmox_snap)
}

//

class proxmox_storage_contents_info_options {
    
    
    content: ("all"|"backup"|"rootdir"|"images"|"iso")?
    
    
    
    node: String
    
    
    
    storage: String
    
    
    
    vmid: Int?
    
    
}

class proxmox_storage_contents_info extends playbook.task {
    hidden options: proxmox_storage_contents_info_options

    `community.general.proxmox_storage_contents_info`: proxmox_storage_contents_info_options?

    function into(): proxmox_storage_contents_info = this
        .toMap()
        .put("community.general.proxmox_storage_contents_info", this.options)
        .toTyped(proxmox_storage_contents_info)
}

//

class proxmox_storage_info_options {
    
    
    storage: String?
    
    
    
    type: String?
    
    
}

class proxmox_storage_info extends playbook.task {
    hidden options: proxmox_storage_info_options

    `community.general.proxmox_storage_info`: proxmox_storage_info_options?

    function into(): proxmox_storage_info = this
        .toMap()
        .put("community.general.proxmox_storage_info", this.options)
        .toTyped(proxmox_storage_info)
}

//

class proxmox_tasks_info_options {
    
    
    node: String
    
    
    
    task: String?
    
    
}

class proxmox_tasks_info extends playbook.task {
    hidden options: proxmox_tasks_info_options

    `community.general.proxmox_tasks_info`: proxmox_tasks_info_options?

    function into(): proxmox_tasks_info = this
        .toMap()
        .put("community.general.proxmox_tasks_info", this.options)
        .toTyped(proxmox_tasks_info)
}

//

class proxmox_template_options {
    
    
    content_type: ("vztmpl"|"iso")?
    
    
    
    force: Boolean?
    
    
    
    node: String?
    
    
    
    src: String?
    
    
    
    state: ("present"|"absent")?
    
    
    
    storage: String?
    
    
    
    template: String?
    
    
    
    timeout: Int?
    
    
}

class proxmox_template extends playbook.task {
    hidden options: proxmox_template_options

    `community.general.proxmox_template`: proxmox_template_options?

    function into(): proxmox_template = this
        .toMap()
        .put("community.general.proxmox_template", this.options)
        .toTyped(proxmox_template)
}

//

class proxmox_user_info_options {
    
    
    domain: String?
    
    
    
    user: String?
    
    
    
    userid: String?
    
    
}

class proxmox_user_info extends playbook.task {
    hidden options: proxmox_user_info_options

    `community.general.proxmox_user_info`: proxmox_user_info_options?

    function into(): proxmox_user_info = this
        .toMap()
        .put("community.general.proxmox_user_info", this.options)
        .toTyped(proxmox_user_info)
}

//

class proxmox_vm_info_options {
    
    
    config: ("none"|"current"|"pending")?
    
    
    
    name: String?
    
    
    
    node: String?
    
    
    
    type: ("all"|"qemu"|"lxc")?
    
    
    
    vmid: Int?
    
    
}

class proxmox_vm_info extends playbook.task {
    hidden options: proxmox_vm_info_options

    `community.general.proxmox_vm_info`: proxmox_vm_info_options?

    function into(): proxmox_vm_info = this
        .toMap()
        .put("community.general.proxmox_vm_info", this.options)
        .toTyped(proxmox_vm_info)
}

//

class pubnub_blocks_options {
    
    
    account: String?
    
    
    
    application: String
    
    
    
    cache: String?
    
    
    
    changes: String?
    
    
    
    description: String?
    
    
    
    email: String?
    
    
    
    event_handlers: Listing<String>?
    
    
    
    keyset: String
    
    
    
    name: String
    
    
    
    password: String?
    
    
    
    state: ("started"|"stopped"|"present"|"absent")?
    
    
    
    validate_certs: Boolean?
    
    
}

class pubnub_blocks extends playbook.task {
    hidden options: pubnub_blocks_options

    `community.general.pubnub_blocks`: pubnub_blocks_options?

    function into(): pubnub_blocks = this
        .toMap()
        .put("community.general.pubnub_blocks", this.options)
        .toTyped(pubnub_blocks)
}

//

class pulp_repo_options {
    
    
    add_export_distributor: Boolean?
    
    
    
    feed: String?
    
    
    
    feed_ca_cert: String?
    
    
    
    feed_client_cert: String?
    
    
    
    feed_client_key: String?
    
    
    
    force_basic_auth: Boolean?
    
    
    
    generate_sqlite: Boolean?
    
    
    
    name: String
    
    
    
    proxy_host: String?
    
    
    
    proxy_password: String?
    
    
    
    proxy_port: String?
    
    
    
    proxy_username: String?
    
    
    
    publish_distributor: String?
    
    
    
    pulp_host: String?
    
    
    
    relative_url: String?
    
    
    
    repo_type: String?
    
    
    
    repoview: Boolean?
    
    
    
    serve_http: Boolean?
    
    
    
    serve_https: Boolean?
    
    
    
    state: ("present"|"absent"|"sync"|"publish")?
    
    
    
    url_password: String?
    
    
    
    url_username: String?
    
    
    
    validate_certs: Boolean?
    
    
    
    wait_for_completion: Boolean?
    
    
}

class pulp_repo extends playbook.task {
    hidden options: pulp_repo_options

    `community.general.pulp_repo`: pulp_repo_options?

    function into(): pulp_repo = this
        .toMap()
        .put("community.general.pulp_repo", this.options)
        .toTyped(pulp_repo)
}

//

class puppet_options {
    
    
    certname: String?
    
    
    
    confdir: String?
    
    
    
    debug: Boolean?
    
    
    
    environment: String?
    
    
    
    execute: String?
    
    
    
    facter_basename: String?
    
    
    
    facts: String?
    
    
    
    logdest: ("all"|"stdout"|"syslog")?
    
    
    
    manifest: String?
    
    
    
    modulepath: String?
    
    
    
    noop: Boolean?
    
    
    
    puppetmaster: String?
    
    
    
    show_diff: Boolean?
    
    
    
    skip_tags: Listing<String>?
    
    
    
    summarize: Boolean?
    
    
    
    tags: Listing<String>?
    
    
    
    timeout: String?
    
    
    
    use_srv_records: Boolean?
    
    
    
    verbose: Boolean?
    
    
}

class puppet extends playbook.task {
    hidden options: puppet_options

    `community.general.puppet`: puppet_options?

    function into(): puppet = this
        .toMap()
        .put("community.general.puppet", this.options)
        .toTyped(puppet)
}

//

class pushbullet_options {
    
    
    api_key: String
    
    
    
    body: String?
    
    
    
    channel: String?
    
    
    
    device: String?
    
    
    
    push_type: ("note"|"link")?
    
    
    
    title: String
    
    
    
    url: String?
    
    
}

class pushbullet extends playbook.task {
    hidden options: pushbullet_options

    `community.general.pushbullet`: pushbullet_options?

    function into(): pushbullet = this
        .toMap()
        .put("community.general.pushbullet", this.options)
        .toTyped(pushbullet)
}

//

class pushover_options {
    
    
    app_token: String
    
    
    
    device: String?
    
    
    
    msg: String
    
    
    
    pri: ("-2"|"-1"|"0"|"1"|"2")?
    
    
    
    title: String?
    
    
    
    user_key: String
    
    
}

class pushover extends playbook.task {
    hidden options: pushover_options

    `community.general.pushover`: pushover_options?

    function into(): pushover = this
        .toMap()
        .put("community.general.pushover", this.options)
        .toTyped(pushover)
}

//

class python_requirements_info_options {
    
    
    dependencies: Listing<String>?
    
    
}

class python_requirements_info extends playbook.task {
    hidden options: python_requirements_info_options

    `community.general.python_requirements_info`: python_requirements_info_options?

    function into(): python_requirements_info = this
        .toMap()
        .put("community.general.python_requirements_info", this.options)
        .toTyped(python_requirements_info)
}

//

class rax_options {
    
    
    auto_increment: Boolean?
    
    
    
    boot_from_volume: Boolean?
    
    
    
    boot_volume: String?
    
    
    
    boot_volume_size: Int?
    
    
    
    boot_volume_terminate: Boolean?
    
    
    
    config_drive: Boolean?
    
    
    
    count: Int?
    
    
    
    count_offset: Int?
    
    
    
    disk_config: ("auto"|"manual")?
    
    
    
    exact_count: Boolean?
    
    
    
    extra_client_args: String?
    
    
    
    extra_create_args: String?
    
    
    
    files: String?
    
    
    
    flavor: String?
    
    
    
    group: String?
    
    
    
    image: String?
    
    
    
    instance_ids: Listing<String>?
    
    
    
    key_name: String?
    
    
    
    meta: String?
    
    
    
    name: String?
    
    
    
    networks: Listing<String>?
    
    
    
    state: ("present"|"absent")?
    
    
    
    user_data: String?
    
    
    
    wait: Boolean?
    
    
    
    wait_timeout: Int?
    
    
}

class rax extends playbook.task {
    hidden options: rax_options

    `community.general.rax`: rax_options?

    function into(): rax = this
        .toMap()
        .put("community.general.rax", this.options)
        .toTyped(rax)
}

//

class rax_cbs_options {
    
    
    description: String?
    
    
    
    image: String?
    
    
    
    meta: String?
    
    
    
    name: String
    
    
    
    size: Int?
    
    
    
    snapshot_id: String?
    
    
    
    state: ("present"|"absent")?
    
    
    
    volume_type: ("SATA"|"SSD")?
    
    
    
    wait: Boolean?
    
    
    
    wait_timeout: Int?
    
    
}

class rax_cbs extends playbook.task {
    hidden options: rax_cbs_options

    `community.general.rax_cbs`: rax_cbs_options?

    function into(): rax_cbs = this
        .toMap()
        .put("community.general.rax_cbs", this.options)
        .toTyped(rax_cbs)
}

//

class rax_cbs_attachments_options {
    
    
    device: String?
    
    
    
    server: String
    
    
    
    state: ("present"|"absent")?
    
    
    
    volume: String
    
    
    
    wait: Boolean?
    
    
    
    wait_timeout: Int?
    
    
}

class rax_cbs_attachments extends playbook.task {
    hidden options: rax_cbs_attachments_options

    `community.general.rax_cbs_attachments`: rax_cbs_attachments_options?

    function into(): rax_cbs_attachments = this
        .toMap()
        .put("community.general.rax_cbs_attachments", this.options)
        .toTyped(rax_cbs_attachments)
}

//

class rax_cdb_options {
    
    
    cdb_type: String?
    
    
    
    cdb_version: String?
    
    
    
    flavor: Int?
    
    
    
    name: String
    
    
    
    state: ("present"|"absent")?
    
    
    
    volume: Int?
    
    
    
    wait: Boolean?
    
    
    
    wait_timeout: Int?
    
    
}

class rax_cdb extends playbook.task {
    hidden options: rax_cdb_options

    `community.general.rax_cdb`: rax_cdb_options?

    function into(): rax_cdb = this
        .toMap()
        .put("community.general.rax_cdb", this.options)
        .toTyped(rax_cdb)
}

//

class rax_cdb_database_options {
    
    
    cdb_id: String
    
    
    
    character_set: String?
    
    
    
    collate: String?
    
    
    
    name: String
    
    
    
    state: ("present"|"absent")?
    
    
}

class rax_cdb_database extends playbook.task {
    hidden options: rax_cdb_database_options

    `community.general.rax_cdb_database`: rax_cdb_database_options?

    function into(): rax_cdb_database = this
        .toMap()
        .put("community.general.rax_cdb_database", this.options)
        .toTyped(rax_cdb_database)
}

//

class rax_cdb_user_options {
    
    
    cdb_id: String
    
    
    
    databases: Listing<String>?
    
    
    
    db_password: String
    
    
    
    db_username: String
    
    
    
    host: String?
    
    
    
    state: ("present"|"absent")?
    
    
}

class rax_cdb_user extends playbook.task {
    hidden options: rax_cdb_user_options

    `community.general.rax_cdb_user`: rax_cdb_user_options?

    function into(): rax_cdb_user = this
        .toMap()
        .put("community.general.rax_cdb_user", this.options)
        .toTyped(rax_cdb_user)
}

//

class rax_clb_options {
    
    
    algorithm: ("RANDOM"|"LEAST_CONNECTIONS"|"ROUND_ROBIN"|"WEIGHTED_LEAST_CONNECTIONS"|"WEIGHTED_ROUND_ROBIN")?
    
    
    
    meta: String?
    
    
    
    name: String
    
    
    
    port: Int?
    
    
    
    protocol: ("DNS_TCP"|"DNS_UDP"|"FTP"|"HTTP"|"HTTPS"|"IMAPS"|"IMAPv4"|"LDAP"|"LDAPS"|"MYSQL"|"POP3"|"POP3S"|"SMTP"|"TCP"|"TCP_CLIENT_FIRST"|"UDP"|"UDP_STREAM"|"SFTP")?
    
    
    
    state: ("present"|"absent")?
    
    
    
    timeout: Int?
    
    
    
    type: ("PUBLIC"|"SERVICENET")?
    
    
    
    vip_id: String?
    
    
    
    wait: Boolean?
    
    
    
    wait_timeout: Int?
    
    
}

class rax_clb extends playbook.task {
    hidden options: rax_clb_options

    `community.general.rax_clb`: rax_clb_options?

    function into(): rax_clb = this
        .toMap()
        .put("community.general.rax_clb", this.options)
        .toTyped(rax_clb)
}

//

class rax_clb_nodes_options {
    
    
    address: String?
    
    
    
    condition: ("enabled"|"disabled"|"draining")?
    
    
    
    load_balancer_id: Int
    
    
    
    node_id: Int?
    
    
    
    port: Int?
    
    
    
    state: ("present"|"absent")?
    
    
    
    type: ("primary"|"secondary")?
    
    
    
    virtualenv: String?
    
    
    
    wait: Boolean?
    
    
    
    wait_timeout: Int?
    
    
    
    weight: Int?
    
    
}

class rax_clb_nodes extends playbook.task {
    hidden options: rax_clb_nodes_options

    `community.general.rax_clb_nodes`: rax_clb_nodes_options?

    function into(): rax_clb_nodes = this
        .toMap()
        .put("community.general.rax_clb_nodes", this.options)
        .toTyped(rax_clb_nodes)
}

//

class rax_clb_ssl_options {
    
    
    certificate: String?
    
    
    
    enabled: Boolean?
    
    
    
    https_redirect: Boolean?
    
    
    
    intermediate_certificate: String?
    
    
    
    loadbalancer: String
    
    
    
    private_key: String?
    
    
    
    secure_port: Int?
    
    
    
    secure_traffic_only: Boolean?
    
    
    
    state: ("present"|"absent")?
    
    
    
    wait: Boolean?
    
    
    
    wait_timeout: Int?
    
    
}

class rax_clb_ssl extends playbook.task {
    hidden options: rax_clb_ssl_options

    `community.general.rax_clb_ssl`: rax_clb_ssl_options?

    function into(): rax_clb_ssl = this
        .toMap()
        .put("community.general.rax_clb_ssl", this.options)
        .toTyped(rax_clb_ssl)
}

//

class rax_dns_options {
    
    
    comment: String?
    
    
    
    email: String?
    
    
    
    name: String?
    
    
    
    state: ("present"|"absent")?
    
    
    
    ttl: Int?
    
    
}

class rax_dns extends playbook.task {
    hidden options: rax_dns_options

    `community.general.rax_dns`: rax_dns_options?

    function into(): rax_dns = this
        .toMap()
        .put("community.general.rax_dns", this.options)
        .toTyped(rax_dns)
}

//

class rax_dns_record_options {
    
    
    comment: String?
    
    
    
    data: String
    
    
    
    domain: String?
    
    
    
    loadbalancer: String?
    
    
    
    name: String
    
    
    
    overwrite: Boolean?
    
    
    
    priority: Int?
    
    
    
    server: String?
    
    
    
    state: ("present"|"absent")?
    
    
    
    ttl: Int?
    
    
    
    type: ("A"|"AAAA"|"CNAME"|"MX"|"NS"|"SRV"|"TXT"|"PTR")
    
    
}

class rax_dns_record extends playbook.task {
    hidden options: rax_dns_record_options

    `community.general.rax_dns_record`: rax_dns_record_options?

    function into(): rax_dns_record = this
        .toMap()
        .put("community.general.rax_dns_record", this.options)
        .toTyped(rax_dns_record)
}

//

class rax_facts_options {
    
    
    address: String?
    
    
    
    id: String?
    
    
    
    name: String?
    
    
}

class rax_facts extends playbook.task {
    hidden options: rax_facts_options

    `community.general.rax_facts`: rax_facts_options?

    function into(): rax_facts = this
        .toMap()
        .put("community.general.rax_facts", this.options)
        .toTyped(rax_facts)
}

//

class rax_files_options {
    
    
    clear_meta: Boolean?
    
    
    
    container: String?
    
    
    
    meta: String?
    
    
    
    private: Boolean?
    
    
    
    public: Boolean?
    
    
    
    region: String?
    
    
    
    state: ("present"|"absent"|"list")?
    
    
    
    ttl: Int?
    
    
    
    type: ("container"|"meta")?
    
    
    
    web_error: String?
    
    
    
    web_index: String?
    
    
}

class rax_files extends playbook.task {
    hidden options: rax_files_options

    `community.general.rax_files`: rax_files_options?

    function into(): rax_files = this
        .toMap()
        .put("community.general.rax_files", this.options)
        .toTyped(rax_files)
}

//

class rax_files_objects_options {
    
    
    clear_meta: Boolean?
    
    
    
    container: String
    
    
    
    dest: String?
    
    
    
    expires: Int?
    
    
    
    meta: String?
    
    
    
    method: ("get"|"put"|"delete")?
    
    
    
    src: String?
    
    
    
    structure: Boolean?
    
    
    
    type: ("file"|"meta")?
    
    
}

class rax_files_objects extends playbook.task {
    hidden options: rax_files_objects_options

    `community.general.rax_files_objects`: rax_files_objects_options?

    function into(): rax_files_objects = this
        .toMap()
        .put("community.general.rax_files_objects", this.options)
        .toTyped(rax_files_objects)
}

//

class rax_identity_options {
    
    
    state: ("present")?
    
    
}

class rax_identity extends playbook.task {
    hidden options: rax_identity_options

    `community.general.rax_identity`: rax_identity_options?

    function into(): rax_identity = this
        .toMap()
        .put("community.general.rax_identity", this.options)
        .toTyped(rax_identity)
}

//

class rax_keypair_options {
    
    
    name: String
    
    
    
    public_key: String?
    
    
    
    state: ("present"|"absent")?
    
    
}

class rax_keypair extends playbook.task {
    hidden options: rax_keypair_options

    `community.general.rax_keypair`: rax_keypair_options?

    function into(): rax_keypair = this
        .toMap()
        .put("community.general.rax_keypair", this.options)
        .toTyped(rax_keypair)
}

//

class rax_meta_options {
    
    
    address: String?
    
    
    
    id: String?
    
    
    
    meta: String?
    
    
    
    name: String?
    
    
}

class rax_meta extends playbook.task {
    hidden options: rax_meta_options

    `community.general.rax_meta`: rax_meta_options?

    function into(): rax_meta = this
        .toMap()
        .put("community.general.rax_meta", this.options)
        .toTyped(rax_meta)
}

//

class rax_mon_alarm_options {
    
    
    check_id: String
    
    
    
    criteria: String?
    
    
    
    disabled: Boolean?
    
    
    
    entity_id: String
    
    
    
    label: String
    
    
    
    metadata: String?
    
    
    
    notification_plan_id: String
    
    
    
    state: ("present"|"absent")?
    
    
}

class rax_mon_alarm extends playbook.task {
    hidden options: rax_mon_alarm_options

    `community.general.rax_mon_alarm`: rax_mon_alarm_options?

    function into(): rax_mon_alarm = this
        .toMap()
        .put("community.general.rax_mon_alarm", this.options)
        .toTyped(rax_mon_alarm)
}

//

class rax_mon_check_options {
    
    
    check_type: String
    
    
    
    details: String?
    
    
    
    disabled: Boolean?
    
    
    
    entity_id: String
    
    
    
    label: String
    
    
    
    metadata: String?
    
    
    
    monitoring_zones_poll: String?
    
    
    
    period: Int?
    
    
    
    state: ("present"|"absent")?
    
    
    
    target_alias: String?
    
    
    
    target_hostname: String?
    
    
    
    timeout: Int?
    
    
}

class rax_mon_check extends playbook.task {
    hidden options: rax_mon_check_options

    `community.general.rax_mon_check`: rax_mon_check_options?

    function into(): rax_mon_check = this
        .toMap()
        .put("community.general.rax_mon_check", this.options)
        .toTyped(rax_mon_check)
}

//

class rax_mon_entity_options {
    
    
    agent_id: String?
    
    
    
    label: String
    
    
    
    metadata: String?
    
    
    
    named_ip_addresses: String?
    
    
    
    state: ("present"|"absent")?
    
    
}

class rax_mon_entity extends playbook.task {
    hidden options: rax_mon_entity_options

    `community.general.rax_mon_entity`: rax_mon_entity_options?

    function into(): rax_mon_entity = this
        .toMap()
        .put("community.general.rax_mon_entity", this.options)
        .toTyped(rax_mon_entity)
}

//

class rax_mon_notification_options {
    
    
    details: String
    
    
    
    label: String
    
    
    
    notification_type: ("webhook"|"email"|"pagerduty")
    
    
    
    state: ("present"|"absent")?
    
    
}

class rax_mon_notification extends playbook.task {
    hidden options: rax_mon_notification_options

    `community.general.rax_mon_notification`: rax_mon_notification_options?

    function into(): rax_mon_notification = this
        .toMap()
        .put("community.general.rax_mon_notification", this.options)
        .toTyped(rax_mon_notification)
}

//

class rax_mon_notification_plan_options {
    
    
    critical_state: Listing<String>?
    
    
    
    label: String
    
    
    
    ok_state: Listing<String>?
    
    
    
    state: ("present"|"absent")?
    
    
    
    warning_state: Listing<String>?
    
    
}

class rax_mon_notification_plan extends playbook.task {
    hidden options: rax_mon_notification_plan_options

    `community.general.rax_mon_notification_plan`: rax_mon_notification_plan_options?

    function into(): rax_mon_notification_plan = this
        .toMap()
        .put("community.general.rax_mon_notification_plan", this.options)
        .toTyped(rax_mon_notification_plan)
}

//

class rax_network_options {
    
    
    cidr: String?
    
    
    
    label: String
    
    
    
    state: ("present"|"absent")?
    
    
}

class rax_network extends playbook.task {
    hidden options: rax_network_options

    `community.general.rax_network`: rax_network_options?

    function into(): rax_network = this
        .toMap()
        .put("community.general.rax_network", this.options)
        .toTyped(rax_network)
}

//

class rax_queue_options {
    
    
    name: String?
    
    
    
    state: ("present"|"absent")?
    
    
}

class rax_queue extends playbook.task {
    hidden options: rax_queue_options

    `community.general.rax_queue`: rax_queue_options?

    function into(): rax_queue = this
        .toMap()
        .put("community.general.rax_queue", this.options)
        .toTyped(rax_queue)
}

//

class rax_scaling_group_options {
    
    
    config_drive: Boolean?
    
    
    
    cooldown: Int?
    
    
    
    disk_config: ("auto"|"manual")?
    
    
    
    files: String?
    
    
    
    flavor: String
    
    
    
    image: String
    
    
    
    key_name: String?
    
    
    
    loadbalancers: Listing<String>?
    
    
    
    max_entities: Int
    
    
    
    meta: String?
    
    
    
    min_entities: Int
    
    
    
    name: String
    
    
    
    networks: Listing<String>?
    
    
    
    server_name: String
    
    
    
    state: ("present"|"absent")?
    
    
    
    user_data: String?
    
    
    
    wait: Boolean?
    
    
    
    wait_timeout: Int?
    
    
}

class rax_scaling_group extends playbook.task {
    hidden options: rax_scaling_group_options

    `community.general.rax_scaling_group`: rax_scaling_group_options?

    function into(): rax_scaling_group = this
        .toMap()
        .put("community.general.rax_scaling_group", this.options)
        .toTyped(rax_scaling_group)
}

//

class rax_scaling_policy_options {
    
    
    at: String?
    
    
    
    change: Int?
    
    
    
    cooldown: Int?
    
    
    
    cron: String?
    
    
    
    desired_capacity: Int?
    
    
    
    is_percent: Boolean?
    
    
    
    name: String
    
    
    
    policy_type: ("webhook"|"schedule")
    
    
    
    scaling_group: String
    
    
    
    state: ("present"|"absent")?
    
    
}

class rax_scaling_policy extends playbook.task {
    hidden options: rax_scaling_policy_options

    `community.general.rax_scaling_policy`: rax_scaling_policy_options?

    function into(): rax_scaling_policy = this
        .toMap()
        .put("community.general.rax_scaling_policy", this.options)
        .toTyped(rax_scaling_policy)
}

//

class read_csv_options {
    
    
    delimiter: String?
    
    
    
    dialect: String?
    
    
    
    fieldnames: Listing<String>?
    
    
    
    key: String?
    
    
    
    path: String
    
    
    
    skipinitialspace: Boolean?
    
    
    
    strict: Boolean?
    
    
    
    unique: Boolean?
    
    
}

class read_csv extends playbook.task {
    hidden options: read_csv_options

    `community.general.read_csv`: read_csv_options?

    function into(): read_csv = this
        .toMap()
        .put("community.general.read_csv", this.options)
        .toTyped(read_csv)
}

//

class redfish_command_options {
    
    
    account_properties: String?
    
    
    
    account_types: Listing<String>?
    
    
    
    auth_token: String?
    
    
    
    baseuri: String
    
    
    
    bios_attributes: String?
    
    
    
    boot_next: String?
    
    
    
    boot_override_mode: ("Legacy"|"UEFI")?
    
    
    
    bootdevice: String?
    
    
    
    category: String
    
    
    
    command: Listing<String>
    
    
    
    id: String?
    
    
    
    new_password: String?
    
    
    
    new_username: String?
    
    
    
    oem_account_types: Listing<String>?
    
    
    
    password: String?
    
    
    
    resource_id: String?
    
    
    
    roleid: String?
    
    
    
    session_uri: String?
    
    
    
    strip_etag_quotes: Boolean?
    
    
    
    timeout: Int?
    
    
    
    uefi_target: String?
    
    
    
    update_apply_time: ("Immediate"|"OnReset"|"AtMaintenanceWindowStart"|"InMaintenanceWindowOnReset"|"OnStartUpdateRequest")?
    
    
    
    update_creds: String?
    
    
    
    update_handle: String?
    
    
    
    update_image_file: String?
    
    
    
    update_image_uri: String?
    
    
    
    update_oem_params: String?
    
    
    
    update_protocol: String?
    
    
    
    update_targets: Listing<String>?
    
    
    
    update_username: String?
    
    
    
    username: String?
    
    
    
    virtual_media: String?
    
    
}

class redfish_command extends playbook.task {
    hidden options: redfish_command_options

    `community.general.redfish_command`: redfish_command_options?

    function into(): redfish_command = this
        .toMap()
        .put("community.general.redfish_command", this.options)
        .toTyped(redfish_command)
}

//

class redfish_config_options {
    
    
    auth_token: String?
    
    
    
    baseuri: String
    
    
    
    bios_attributes: String?
    
    
    
    boot_order: Listing<String>?
    
    
    
    category: String
    
    
    
    command: Listing<String>
    
    
    
    hostinterface_config: String?
    
    
    
    hostinterface_id: String?
    
    
    
    network_protocols: String?
    
    
    
    nic_addr: String?
    
    
    
    nic_config: String?
    
    
    
    password: String?
    
    
    
    resource_id: String?
    
    
    
    secure_boot_enable: Boolean?
    
    
    
    service_id: String?
    
    
    
    sessions_config: String?
    
    
    
    storage_subsystem_id: String?
    
    
    
    strip_etag_quotes: Boolean?
    
    
    
    timeout: Int?
    
    
    
    username: String?
    
    
    
    volume_details: String?
    
    
    
    volume_ids: Listing<String>?
    
    
}

class redfish_config extends playbook.task {
    hidden options: redfish_config_options

    `community.general.redfish_config`: redfish_config_options?

    function into(): redfish_config = this
        .toMap()
        .put("community.general.redfish_config", this.options)
        .toTyped(redfish_config)
}

//

class redfish_info_options {
    
    
    auth_token: String?
    
    
    
    baseuri: String
    
    
    
    category: Listing<String>?
    
    
    
    command: Listing<String>?
    
    
    
    manager: String?
    
    
    
    password: String?
    
    
    
    timeout: Int?
    
    
    
    update_handle: String?
    
    
    
    username: String?
    
    
}

class redfish_info extends playbook.task {
    hidden options: redfish_info_options

    `community.general.redfish_info`: redfish_info_options?

    function into(): redfish_info = this
        .toMap()
        .put("community.general.redfish_info", this.options)
        .toTyped(redfish_info)
}

//

class redhat_subscription_options {
    
    
    activationkey: String?
    
    
    
    auto_attach: Boolean?
    
    
    
    consumer_id: String?
    
    
    
    consumer_name: String?
    
    
    
    consumer_type: String?
    
    
    
    environment: String?
    
    
    
    force_register: Boolean?
    
    
    
    org_id: String?
    
    
    
    password: String?
    
    
    
    pool: String?
    
    
    
    pool_ids: Listing<String>?
    
    
    
    release: String?
    
    
    
    rhsm_baseurl: String?
    
    
    
    rhsm_repo_ca_cert: String?
    
    
    
    server_hostname: String?
    
    
    
    server_insecure: String?
    
    
    
    server_port: String?
    
    
    
    server_prefix: String?
    
    
    
    server_proxy_hostname: String?
    
    
    
    server_proxy_password: String?
    
    
    
    server_proxy_port: String?
    
    
    
    server_proxy_scheme: String?
    
    
    
    server_proxy_user: String?
    
    
    
    state: ("present"|"absent")?
    
    
    
    syspurpose: String?
    
    
    
    token: String?
    
    
    
    username: String?
    
    
}

class redhat_subscription extends playbook.task {
    hidden options: redhat_subscription_options

    `community.general.redhat_subscription`: redhat_subscription_options?

    function into(): redhat_subscription = this
        .toMap()
        .put("community.general.redhat_subscription", this.options)
        .toTyped(redhat_subscription)
}

//

class redis_options {
    
    
    ca_certs: String?
    
    
    
    command: ("config"|"flush"|"replica"|"slave")?
    
    
    
    db: Int?
    
    
    
    flush_mode: ("all"|"db")?
    
    
    
    login_user: String?
    
    
    
    master_host: String?
    
    
    
    master_port: Int?
    
    
    
    name: String?
    
    
    
    replica_mode: ("master"|"replica"|"slave")?
    
    
    
    tls: String?
    
    
    
    validate_certs: String?
    
    
    
    value: String?
    
    
}

class redis extends playbook.task {
    hidden options: redis_options

    `community.general.redis`: redis_options?

    function into(): redis = this
        .toMap()
        .put("community.general.redis", this.options)
        .toTyped(redis)
}

//

class redis_data_options {
    
    
    existing: Boolean?
    
    
    
    expiration: Int?
    
    
    
    keep_ttl: Boolean?
    
    
    
    key: String
    
    
    
    non_existing: Boolean?
    
    
    
    state: ("present"|"absent")?
    
    
    
    value: String?
    
    
}

class redis_data extends playbook.task {
    hidden options: redis_data_options

    `community.general.redis_data`: redis_data_options?

    function into(): redis_data = this
        .toMap()
        .put("community.general.redis_data", this.options)
        .toTyped(redis_data)
}

//

class redis_data_incr_options {
    
    
    increment_float: String?
    
    
    
    increment_int: Int?
    
    
    
    key: String
    
    
}

class redis_data_incr extends playbook.task {
    hidden options: redis_data_incr_options

    `community.general.redis_data_incr`: redis_data_incr_options?

    function into(): redis_data_incr = this
        .toMap()
        .put("community.general.redis_data_incr", this.options)
        .toTyped(redis_data_incr)
}

//

class redis_data_info_options {
    
    
    key: String
    
    
}

class redis_data_info extends playbook.task {
    hidden options: redis_data_info_options

    `community.general.redis_data_info`: redis_data_info_options?

    function into(): redis_data_info = this
        .toMap()
        .put("community.general.redis_data_info", this.options)
        .toTyped(redis_data_info)
}

//

class redis_info_options {
    
    
    ca_certs: String?
    
    
    
    login_user: String?
    
    
    
    tls: String?
    
    
    
    validate_certs: String?
    
    
}

class redis_info extends playbook.task {
    hidden options: redis_info_options

    `community.general.redis_info`: redis_info_options?

    function into(): redis_info = this
        .toMap()
        .put("community.general.redis_info", this.options)
        .toTyped(redis_info)
}

//

class rhevm_options {
    
    
    boot_order: Listing<String>?
    
    
    
    cd_drive: String?
    
    
    
    cluster: String?
    
    
    
    cpu_share: Int?
    
    
    
    datacenter: String?
    
    
    
    del_prot: Boolean?
    
    
    
    disks: Listing<String>?
    
    
    
    ifaces: Listing<String>?
    
    
    
    image: String?
    
    
    
    insecure_api: Boolean?
    
    
    
    mempol: Int?
    
    
    
    name: String?
    
    
    
    osver: String?
    
    
    
    password: String
    
    
    
    port: Int?
    
    
    
    server: String?
    
    
    
    state: ("absent"|"cd"|"down"|"info"|"ping"|"present"|"restarted"|"up")?
    
    
    
    timeout: Int?
    
    
    
    type: ("desktop"|"host"|"server")?
    
    
    
    user: String?
    
    
    
    vm_ha: Boolean?
    
    
    
    vmcpu: Int?
    
    
    
    vmhost: String?
    
    
    
    vmmem: Int?
    
    
}

class rhevm extends playbook.task {
    hidden options: rhevm_options

    `community.general.rhevm`: rhevm_options?

    function into(): rhevm = this
        .toMap()
        .put("community.general.rhevm", this.options)
        .toTyped(rhevm)
}

//

class rhn_channel_options {
    
    
    name: String
    
    
    
    password: String
    
    
    
    state: ("present"|"absent")?
    
    
    
    sysname: String
    
    
    
    url: String
    
    
    
    user: String
    
    
    
    validate_certs: Boolean?
    
    
}

class rhn_channel extends playbook.task {
    hidden options: rhn_channel_options

    `community.general.rhn_channel`: rhn_channel_options?

    function into(): rhn_channel = this
        .toMap()
        .put("community.general.rhn_channel", this.options)
        .toTyped(rhn_channel)
}

//

class rhn_register_options {
    
    
    activationkey: String?
    
    
    
    ca_cert: String?
    
    
    
    channels: Listing<String>?
    
    
    
    enable_eus: Boolean?
    
    
    
    force: Boolean?
    
    
    
    nopackages: Boolean?
    
    
    
    password: String?
    
    
    
    profilename: String?
    
    
    
    server_url: String?
    
    
    
    state: ("absent"|"present")?
    
    
    
    systemorgid: String?
    
    
    
    username: String?
    
    
}

class rhn_register extends playbook.task {
    hidden options: rhn_register_options

    `community.general.rhn_register`: rhn_register_options?

    function into(): rhn_register = this
        .toMap()
        .put("community.general.rhn_register", this.options)
        .toTyped(rhn_register)
}

//

class rhsm_release_options {
    
    
    release: String?
    
    
}

class rhsm_release extends playbook.task {
    hidden options: rhsm_release_options

    `community.general.rhsm_release`: rhsm_release_options?

    function into(): rhsm_release = this
        .toMap()
        .put("community.general.rhsm_release", this.options)
        .toTyped(rhsm_release)
}

//

class rhsm_repository_options {
    
    
    name: Listing<String>
    
    
    
    purge: Boolean?
    
    
    
    state: ("present"|"enabled"|"absent"|"disabled")?
    
    
}

class rhsm_repository extends playbook.task {
    hidden options: rhsm_repository_options

    `community.general.rhsm_repository`: rhsm_repository_options?

    function into(): rhsm_repository = this
        .toMap()
        .put("community.general.rhsm_repository", this.options)
        .toTyped(rhsm_repository)
}

//

class riak_options {
    
    
    command: ("ping"|"kv_test"|"join"|"plan"|"commit")?
    
    
    
    config_dir: String?
    
    
    
    http_conn: String?
    
    
    
    target_node: String?
    
    
    
    validate_certs: Boolean?
    
    
    
    wait_for_handoffs: Int?
    
    
    
    wait_for_ring: Int?
    
    
    
    wait_for_service: ("kv")?
    
    
}

class riak extends playbook.task {
    hidden options: riak_options

    `community.general.riak`: riak_options?

    function into(): riak = this
        .toMap()
        .put("community.general.riak", this.options)
        .toTyped(riak)
}

//

class rocketchat_options {
    
    
    attachments: Listing<String>?
    
    
    
    channel: String?
    
    
    
    color: ("normal"|"good"|"warning"|"danger")?
    
    
    
    domain: String
    
    
    
    icon_emoji: String?
    
    
    
    icon_url: String?
    
    
    
    link_names: Int?
    
    
    
    msg: String?
    
    
    
    protocol: ("http"|"https")?
    
    
    
    token: String
    
    
    
    username: String?
    
    
    
    validate_certs: Boolean?
    
    
}

class rocketchat extends playbook.task {
    hidden options: rocketchat_options

    `community.general.rocketchat`: rocketchat_options?

    function into(): rocketchat = this
        .toMap()
        .put("community.general.rocketchat", this.options)
        .toTyped(rocketchat)
}

//

class rollbar_deployment_options {
    
    
    comment: String?
    
    
    
    environment: String
    
    
    
    revision: String
    
    
    
    rollbar_user: String?
    
    
    
    token: String
    
    
    
    url: String?
    
    
    
    user: String?
    
    
    
    validate_certs: Boolean?
    
    
}

class rollbar_deployment extends playbook.task {
    hidden options: rollbar_deployment_options

    `community.general.rollbar_deployment`: rollbar_deployment_options?

    function into(): rollbar_deployment = this
        .toMap()
        .put("community.general.rollbar_deployment", this.options)
        .toTyped(rollbar_deployment)
}

//

class rpm_ostree_pkg_options {
    
    
    name: Listing<String>
    
    
    
    state: ("absent"|"present")?
    
    
}

class rpm_ostree_pkg extends playbook.task {
    hidden options: rpm_ostree_pkg_options

    `community.general.rpm_ostree_pkg`: rpm_ostree_pkg_options?

    function into(): rpm_ostree_pkg = this
        .toMap()
        .put("community.general.rpm_ostree_pkg", this.options)
        .toTyped(rpm_ostree_pkg)
}

//

class rundeck_acl_policy_options {
    
    
    api_token: String?
    
    
    
    client_cert: String?
    
    
    
    client_key: String?
    
    
    
    force: String?
    
    
    
    force_basic_auth: String?
    
    
    
    http_agent: String?
    
    
    
    name: String
    
    
    
    policy: String?
    
    
    
    project: String?
    
    
    
    state: ("present"|"absent")?
    
    
    
    url_password: String?
    
    
    
    url_username: String?
    
    
    
    use_proxy: String?
    
    
    
    validate_certs: String?
    
    
}

class rundeck_acl_policy extends playbook.task {
    hidden options: rundeck_acl_policy_options

    `community.general.rundeck_acl_policy`: rundeck_acl_policy_options?

    function into(): rundeck_acl_policy = this
        .toMap()
        .put("community.general.rundeck_acl_policy", this.options)
        .toTyped(rundeck_acl_policy)
}

//

class rundeck_job_executions_info_options {
    
    
    job_id: String
    
    
    
    max: Int?
    
    
    
    offset: Int?
    
    
    
    status: ("succeeded"|"failed"|"aborted"|"running")?
    
    
}

class rundeck_job_executions_info extends playbook.task {
    hidden options: rundeck_job_executions_info_options

    `community.general.rundeck_job_executions_info`: rundeck_job_executions_info_options?

    function into(): rundeck_job_executions_info = this
        .toMap()
        .put("community.general.rundeck_job_executions_info", this.options)
        .toTyped(rundeck_job_executions_info)
}

//

class rundeck_job_run_options {
    
    
    abort_on_timeout: Boolean?
    
    
    
    filter_nodes: String?
    
    
    
    job_id: String
    
    
    
    job_options: String?
    
    
    
    loglevel: ("debug"|"verbose"|"info"|"warn"|"error")?
    
    
    
    run_at_time: String?
    
    
    
    wait_execution: Boolean?
    
    
    
    wait_execution_delay: Int?
    
    
    
    wait_execution_timeout: Int?
    
    
}

class rundeck_job_run extends playbook.task {
    hidden options: rundeck_job_run_options

    `community.general.rundeck_job_run`: rundeck_job_run_options?

    function into(): rundeck_job_run = this
        .toMap()
        .put("community.general.rundeck_job_run", this.options)
        .toTyped(rundeck_job_run)
}

//

class rundeck_project_options {
    
    
    api_token: String?
    
    
    
    client_cert: String?
    
    
    
    client_key: String?
    
    
    
    force: String?
    
    
    
    force_basic_auth: String?
    
    
    
    http_agent: String?
    
    
    
    name: String
    
    
    
    state: ("present"|"absent")?
    
    
    
    url_password: String?
    
    
    
    url_username: String?
    
    
    
    use_proxy: String?
    
    
    
    validate_certs: String?
    
    
}

class rundeck_project extends playbook.task {
    hidden options: rundeck_project_options

    `community.general.rundeck_project`: rundeck_project_options?

    function into(): rundeck_project = this
        .toMap()
        .put("community.general.rundeck_project", this.options)
        .toTyped(rundeck_project)
}

//

class runit_options {
    
    
    enabled: Boolean?
    
    
    
    name: String
    
    
    
    service_dir: String?
    
    
    
    service_src: String?
    
    
    
    state: ("killed"|"once"|"reloaded"|"restarted"|"started"|"stopped")?
    
    
}

class runit extends playbook.task {
    hidden options: runit_options

    `community.general.runit`: runit_options?

    function into(): runit = this
        .toMap()
        .put("community.general.runit", this.options)
        .toTyped(runit)
}

//

class say_options {
    
    
    msg: String
    
    
    
    voice: String?
    
    
}

class say extends playbook.task {
    hidden options: say_options

    `community.general.say`: say_options?

    function into(): say = this
        .toMap()
        .put("community.general.say", this.options)
        .toTyped(say)
}

//

class scaleway_compute_options {
    
    
    commercial_type: String
    
    
    
    enable_ipv6: Boolean?
    
    
    
    image: String
    
    
    
    name: String?
    
    
    
    organization: String?
    
    
    
    project: String?
    
    
    
    public_ip: String?
    
    
    
    region: ("ams1"|"EMEA-NL-EVS"|"par1"|"EMEA-FR-PAR1"|"par2"|"EMEA-FR-PAR2"|"waw1"|"EMEA-PL-WAW1")
    
    
    
    security_group: String?
    
    
    
    state: ("present"|"absent"|"running"|"restarted"|"stopped")?
    
    
    
    tags: Listing<String>?
    
    
    
    wait: Boolean?
    
    
    
    wait_sleep_time: Int?
    
    
    
    wait_timeout: Int?
    
    
}

class scaleway_compute extends playbook.task {
    hidden options: scaleway_compute_options

    `community.general.scaleway_compute`: scaleway_compute_options?

    function into(): scaleway_compute = this
        .toMap()
        .put("community.general.scaleway_compute", this.options)
        .toTyped(scaleway_compute)
}

//

class scaleway_compute_private_network_options {
    
    
    compute_id: String
    
    
    
    private_network_id: String
    
    
    
    project: String
    
    
    
    region: ("ams1"|"EMEA-NL-EVS"|"par1"|"EMEA-FR-PAR1"|"par2"|"EMEA-FR-PAR2"|"waw1"|"EMEA-PL-WAW1")
    
    
    
    state: ("present"|"absent")?
    
    
}

class scaleway_compute_private_network extends playbook.task {
    hidden options: scaleway_compute_private_network_options

    `community.general.scaleway_compute_private_network`: scaleway_compute_private_network_options?

    function into(): scaleway_compute_private_network = this
        .toMap()
        .put("community.general.scaleway_compute_private_network", this.options)
        .toTyped(scaleway_compute_private_network)
}

//

class scaleway_container_options {
    
    
    container_timeout: String?
    
    
    
    description: String?
    
    
    
    environment_variables: String?
    
    
    
    max_concurrency: Int?
    
    
    
    max_scale: Int?
    
    
    
    memory_limit: Int?
    
    
    
    min_scale: Int?
    
    
    
    name: String
    
    
    
    namespace_id: String
    
    
    
    port: Int?
    
    
    
    privacy: ("public"|"private")?
    
    
    
    protocol: ("http1"|"h2c")?
    
    
    
    redeploy: Boolean?
    
    
    
    region: ("fr-par"|"nl-ams"|"pl-waw")
    
    
    
    registry_image: String
    
    
    
    secret_environment_variables: String?
    
    
    
    state: ("present"|"absent")?
    
    
}

class scaleway_container extends playbook.task {
    hidden options: scaleway_container_options

    `community.general.scaleway_container`: scaleway_container_options?

    function into(): scaleway_container = this
        .toMap()
        .put("community.general.scaleway_container", this.options)
        .toTyped(scaleway_container)
}

//

class scaleway_container_info_options {
    
    
    name: String
    
    
    
    namespace_id: String
    
    
    
    region: ("fr-par"|"nl-ams"|"pl-waw")
    
    
}

class scaleway_container_info extends playbook.task {
    hidden options: scaleway_container_info_options

    `community.general.scaleway_container_info`: scaleway_container_info_options?

    function into(): scaleway_container_info = this
        .toMap()
        .put("community.general.scaleway_container_info", this.options)
        .toTyped(scaleway_container_info)
}

//

class scaleway_container_namespace_options {
    
    
    description: String?
    
    
    
    environment_variables: String?
    
    
    
    name: String
    
    
    
    project_id: String
    
    
    
    region: ("fr-par"|"nl-ams"|"pl-waw")
    
    
    
    secret_environment_variables: String?
    
    
    
    state: ("present"|"absent")?
    
    
}

class scaleway_container_namespace extends playbook.task {
    hidden options: scaleway_container_namespace_options

    `community.general.scaleway_container_namespace`: scaleway_container_namespace_options?

    function into(): scaleway_container_namespace = this
        .toMap()
        .put("community.general.scaleway_container_namespace", this.options)
        .toTyped(scaleway_container_namespace)
}

//

class scaleway_container_namespace_info_options {
    
    
    name: String
    
    
    
    project_id: String
    
    
    
    region: ("fr-par"|"nl-ams"|"pl-waw")
    
    
}

class scaleway_container_namespace_info extends playbook.task {
    hidden options: scaleway_container_namespace_info_options

    `community.general.scaleway_container_namespace_info`: scaleway_container_namespace_info_options?

    function into(): scaleway_container_namespace_info = this
        .toMap()
        .put("community.general.scaleway_container_namespace_info", this.options)
        .toTyped(scaleway_container_namespace_info)
}

//

class scaleway_container_registry_options {
    
    
    description: String?
    
    
    
    name: String
    
    
    
    privacy_policy: ("public"|"private")?
    
    
    
    project_id: String
    
    
    
    region: ("fr-par"|"nl-ams"|"pl-waw")
    
    
    
    state: ("present"|"absent")?
    
    
}

class scaleway_container_registry extends playbook.task {
    hidden options: scaleway_container_registry_options

    `community.general.scaleway_container_registry`: scaleway_container_registry_options?

    function into(): scaleway_container_registry = this
        .toMap()
        .put("community.general.scaleway_container_registry", this.options)
        .toTyped(scaleway_container_registry)
}

//

class scaleway_container_registry_info_options {
    
    
    name: String
    
    
    
    project_id: String
    
    
    
    region: ("fr-par"|"nl-ams"|"pl-waw")
    
    
}

class scaleway_container_registry_info extends playbook.task {
    hidden options: scaleway_container_registry_info_options

    `community.general.scaleway_container_registry_info`: scaleway_container_registry_info_options?

    function into(): scaleway_container_registry_info = this
        .toMap()
        .put("community.general.scaleway_container_registry_info", this.options)
        .toTyped(scaleway_container_registry_info)
}

//

class scaleway_database_backup_options {
    
    
    database_name: String?
    
    
    
    expires_at: String?
    
    
    
    id: String?
    
    
    
    instance_id: String?
    
    
    
    name: String?
    
    
    
    region: ("fr-par"|"nl-ams"|"pl-waw")
    
    
    
    state: ("present"|"absent"|"exported"|"restored")?
    
    
    
    wait: Boolean?
    
    
    
    wait_sleep_time: Int?
    
    
    
    wait_timeout: Int?
    
    
}

class scaleway_database_backup extends playbook.task {
    hidden options: scaleway_database_backup_options

    `community.general.scaleway_database_backup`: scaleway_database_backup_options?

    function into(): scaleway_database_backup = this
        .toMap()
        .put("community.general.scaleway_database_backup", this.options)
        .toTyped(scaleway_database_backup)
}

//

class scaleway_function_options {
    
    
    description: String?
    
    
    
    environment_variables: String?
    
    
    
    function_timeout: String?
    
    
    
    handler: String?
    
    
    
    max_scale: Int?
    
    
    
    memory_limit: Int?
    
    
    
    min_scale: Int?
    
    
    
    name: String
    
    
    
    namespace_id: String
    
    
    
    privacy: ("public"|"private")?
    
    
    
    redeploy: Boolean?
    
    
    
    region: ("fr-par"|"nl-ams"|"pl-waw")
    
    
    
    runtime: String
    
    
    
    secret_environment_variables: String?
    
    
    
    state: ("present"|"absent")?
    
    
}

class scaleway_function extends playbook.task {
    hidden options: scaleway_function_options

    `community.general.scaleway_function`: scaleway_function_options?

    function into(): scaleway_function = this
        .toMap()
        .put("community.general.scaleway_function", this.options)
        .toTyped(scaleway_function)
}

//

class scaleway_function_info_options {
    
    
    name: String
    
    
    
    namespace_id: String
    
    
    
    region: ("fr-par"|"nl-ams"|"pl-waw")
    
    
}

class scaleway_function_info extends playbook.task {
    hidden options: scaleway_function_info_options

    `community.general.scaleway_function_info`: scaleway_function_info_options?

    function into(): scaleway_function_info = this
        .toMap()
        .put("community.general.scaleway_function_info", this.options)
        .toTyped(scaleway_function_info)
}

//

class scaleway_function_namespace_options {
    
    
    description: String?
    
    
    
    environment_variables: String?
    
    
    
    name: String
    
    
    
    project_id: String
    
    
    
    region: ("fr-par"|"nl-ams"|"pl-waw")
    
    
    
    secret_environment_variables: String?
    
    
    
    state: ("present"|"absent")?
    
    
}

class scaleway_function_namespace extends playbook.task {
    hidden options: scaleway_function_namespace_options

    `community.general.scaleway_function_namespace`: scaleway_function_namespace_options?

    function into(): scaleway_function_namespace = this
        .toMap()
        .put("community.general.scaleway_function_namespace", this.options)
        .toTyped(scaleway_function_namespace)
}

//

class scaleway_function_namespace_info_options {
    
    
    name: String
    
    
    
    project_id: String
    
    
    
    region: ("fr-par"|"nl-ams"|"pl-waw")
    
    
}

class scaleway_function_namespace_info extends playbook.task {
    hidden options: scaleway_function_namespace_info_options

    `community.general.scaleway_function_namespace_info`: scaleway_function_namespace_info_options?

    function into(): scaleway_function_namespace_info = this
        .toMap()
        .put("community.general.scaleway_function_namespace_info", this.options)
        .toTyped(scaleway_function_namespace_info)
}

//

class scaleway_image_info_options {
    
    
    region: ("ams1"|"EMEA-NL-EVS"|"par1"|"EMEA-FR-PAR1"|"par2"|"EMEA-FR-PAR2"|"waw1"|"EMEA-PL-WAW1")
    
    
}

class scaleway_image_info extends playbook.task {
    hidden options: scaleway_image_info_options

    `community.general.scaleway_image_info`: scaleway_image_info_options?

    function into(): scaleway_image_info = this
        .toMap()
        .put("community.general.scaleway_image_info", this.options)
        .toTyped(scaleway_image_info)
}

//

class scaleway_ip_options {
    
    
    id: String?
    
    
    
    organization: String
    
    
    
    region: ("ams1"|"EMEA-NL-EVS"|"par1"|"EMEA-FR-PAR1"|"par2"|"EMEA-FR-PAR2"|"waw1"|"EMEA-PL-WAW1")
    
    
    
    reverse: String?
    
    
    
    server: String?
    
    
    
    state: ("present"|"absent")?
    
    
}

class scaleway_ip extends playbook.task {
    hidden options: scaleway_ip_options

    `community.general.scaleway_ip`: scaleway_ip_options?

    function into(): scaleway_ip = this
        .toMap()
        .put("community.general.scaleway_ip", this.options)
        .toTyped(scaleway_ip)
}

//

class scaleway_ip_info_options {
    
    
    region: ("ams1"|"EMEA-NL-EVS"|"par1"|"EMEA-FR-PAR1"|"par2"|"EMEA-FR-PAR2"|"waw1"|"EMEA-PL-WAW1")
    
    
}

class scaleway_ip_info extends playbook.task {
    hidden options: scaleway_ip_info_options

    `community.general.scaleway_ip_info`: scaleway_ip_info_options?

    function into(): scaleway_ip_info = this
        .toMap()
        .put("community.general.scaleway_ip_info", this.options)
        .toTyped(scaleway_ip_info)
}

//

class scaleway_lb_options {
    
    
    description: String
    
    
    
    name: String
    
    
    
    organization_id: String
    
    
    
    region: ("nl-ams"|"fr-par"|"pl-waw")
    
    
    
    state: ("present"|"absent")?
    
    
    
    tags: Listing<String>?
    
    
    
    wait: Boolean?
    
    
    
    wait_sleep_time: Int?
    
    
    
    wait_timeout: Int?
    
    
}

class scaleway_lb extends playbook.task {
    hidden options: scaleway_lb_options

    `community.general.scaleway_lb`: scaleway_lb_options?

    function into(): scaleway_lb = this
        .toMap()
        .put("community.general.scaleway_lb", this.options)
        .toTyped(scaleway_lb)
}

//

class scaleway_organization_info_options {
    
    
    api_url: String?
    
    
}

class scaleway_organization_info extends playbook.task {
    hidden options: scaleway_organization_info_options

    `community.general.scaleway_organization_info`: scaleway_organization_info_options?

    function into(): scaleway_organization_info = this
        .toMap()
        .put("community.general.scaleway_organization_info", this.options)
        .toTyped(scaleway_organization_info)
}

//

class scaleway_private_network_options {
    
    
    name: String?
    
    
    
    project: String
    
    
    
    region: ("ams1"|"EMEA-NL-EVS"|"par1"|"EMEA-FR-PAR1"|"par2"|"EMEA-FR-PAR2"|"waw1"|"EMEA-PL-WAW1")
    
    
    
    state: ("present"|"absent")?
    
    
    
    tags: Listing<String>?
    
    
}

class scaleway_private_network extends playbook.task {
    hidden options: scaleway_private_network_options

    `community.general.scaleway_private_network`: scaleway_private_network_options?

    function into(): scaleway_private_network = this
        .toMap()
        .put("community.general.scaleway_private_network", this.options)
        .toTyped(scaleway_private_network)
}

//

class scaleway_security_group_options {
    
    
    description: String?
    
    
    
    inbound_default_policy: ("accept"|"drop")?
    
    
    
    name: String
    
    
    
    organization: String
    
    
    
    organization_default: Boolean?
    
    
    
    outbound_default_policy: ("accept"|"drop")?
    
    
    
    region: ("ams1"|"EMEA-NL-EVS"|"par1"|"EMEA-FR-PAR1"|"par2"|"EMEA-FR-PAR2"|"waw1"|"EMEA-PL-WAW1")
    
    
    
    state: ("absent"|"present")?
    
    
    
    stateful: Boolean
    
    
}

class scaleway_security_group extends playbook.task {
    hidden options: scaleway_security_group_options

    `community.general.scaleway_security_group`: scaleway_security_group_options?

    function into(): scaleway_security_group = this
        .toMap()
        .put("community.general.scaleway_security_group", this.options)
        .toTyped(scaleway_security_group)
}

//

class scaleway_security_group_info_options {
    
    
    region: ("ams1"|"EMEA-NL-EVS"|"par1"|"EMEA-FR-PAR1"|"par2"|"EMEA-FR-PAR2"|"waw1"|"EMEA-PL-WAW1")
    
    
}

class scaleway_security_group_info extends playbook.task {
    hidden options: scaleway_security_group_info_options

    `community.general.scaleway_security_group_info`: scaleway_security_group_info_options?

    function into(): scaleway_security_group_info = this
        .toMap()
        .put("community.general.scaleway_security_group_info", this.options)
        .toTyped(scaleway_security_group_info)
}

//

class scaleway_security_group_rule_options {
    
    
    action: ("accept"|"drop")
    
    
    
    direction: ("inbound"|"outbound")
    
    
    
    ip_range: String?
    
    
    
    port: Int
    
    
    
    protocol: ("TCP"|"UDP"|"ICMP")
    
    
    
    region: ("ams1"|"EMEA-NL-EVS"|"par1"|"EMEA-FR-PAR1"|"par2"|"EMEA-FR-PAR2"|"waw1"|"EMEA-PL-WAW1")
    
    
    
    security_group: String
    
    
    
    state: ("present"|"absent")?
    
    
}

class scaleway_security_group_rule extends playbook.task {
    hidden options: scaleway_security_group_rule_options

    `community.general.scaleway_security_group_rule`: scaleway_security_group_rule_options?

    function into(): scaleway_security_group_rule = this
        .toMap()
        .put("community.general.scaleway_security_group_rule", this.options)
        .toTyped(scaleway_security_group_rule)
}

//

class scaleway_server_info_options {
    
    
    region: ("ams1"|"EMEA-NL-EVS"|"par1"|"EMEA-FR-PAR1"|"par2"|"EMEA-FR-PAR2"|"waw1"|"EMEA-PL-WAW1")
    
    
}

class scaleway_server_info extends playbook.task {
    hidden options: scaleway_server_info_options

    `community.general.scaleway_server_info`: scaleway_server_info_options?

    function into(): scaleway_server_info = this
        .toMap()
        .put("community.general.scaleway_server_info", this.options)
        .toTyped(scaleway_server_info)
}

//

class scaleway_snapshot_info_options {
    
    
    region: ("ams1"|"EMEA-NL-EVS"|"par1"|"EMEA-FR-PAR1"|"par2"|"EMEA-FR-PAR2"|"waw1"|"EMEA-PL-WAW1")
    
    
}

class scaleway_snapshot_info extends playbook.task {
    hidden options: scaleway_snapshot_info_options

    `community.general.scaleway_snapshot_info`: scaleway_snapshot_info_options?

    function into(): scaleway_snapshot_info = this
        .toMap()
        .put("community.general.scaleway_snapshot_info", this.options)
        .toTyped(scaleway_snapshot_info)
}

//

class scaleway_sshkey_options {
    
    
    api_url: String?
    
    
    
    ssh_pub_key: String
    
    
    
    state: ("present"|"absent")?
    
    
}

class scaleway_sshkey extends playbook.task {
    hidden options: scaleway_sshkey_options

    `community.general.scaleway_sshkey`: scaleway_sshkey_options?

    function into(): scaleway_sshkey = this
        .toMap()
        .put("community.general.scaleway_sshkey", this.options)
        .toTyped(scaleway_sshkey)
}

//

class scaleway_user_data_options {
    
    
    region: ("ams1"|"EMEA-NL-EVS"|"par1"|"EMEA-FR-PAR1"|"par2"|"EMEA-FR-PAR2"|"waw1"|"EMEA-PL-WAW1")
    
    
    
    server_id: String
    
    
    
    user_data: String?
    
    
}

class scaleway_user_data extends playbook.task {
    hidden options: scaleway_user_data_options

    `community.general.scaleway_user_data`: scaleway_user_data_options?

    function into(): scaleway_user_data = this
        .toMap()
        .put("community.general.scaleway_user_data", this.options)
        .toTyped(scaleway_user_data)
}

//

class scaleway_volume_options {
    
    
    name: String
    
    
    
    organization: String?
    
    
    
    project: String?
    
    
    
    region: ("ams1"|"EMEA-NL-EVS"|"par1"|"EMEA-FR-PAR1"|"par2"|"EMEA-FR-PAR2"|"waw1"|"EMEA-PL-WAW1")
    
    
    
    size: Int?
    
    
    
    state: ("present"|"absent")?
    
    
    
    volume_type: String?
    
    
}

class scaleway_volume extends playbook.task {
    hidden options: scaleway_volume_options

    `community.general.scaleway_volume`: scaleway_volume_options?

    function into(): scaleway_volume = this
        .toMap()
        .put("community.general.scaleway_volume", this.options)
        .toTyped(scaleway_volume)
}

//

class scaleway_volume_info_options {
    
    
    region: ("ams1"|"EMEA-NL-EVS"|"par1"|"EMEA-FR-PAR1"|"par2"|"EMEA-FR-PAR2"|"waw1"|"EMEA-PL-WAW1")
    
    
}

class scaleway_volume_info extends playbook.task {
    hidden options: scaleway_volume_info_options

    `community.general.scaleway_volume_info`: scaleway_volume_info_options?

    function into(): scaleway_volume_info = this
        .toMap()
        .put("community.general.scaleway_volume_info", this.options)
        .toTyped(scaleway_volume_info)
}

//

class sefcontext_options {
    
    
    ftype: ("a"|"b"|"c"|"d"|"f"|"l"|"p"|"s")?
    
    
    
    ignore_selinux_state: Boolean?
    
    
    
    reload: Boolean?
    
    
    
    selevel: String?
    
    
    
    setype: String?
    
    
    
    seuser: String?
    
    
    
    state: ("absent"|"present")?
    
    
    
    substitute: String?
    
    
    
    target: String
    
    
}

class sefcontext extends playbook.task {
    hidden options: sefcontext_options

    `community.general.sefcontext`: sefcontext_options?

    function into(): sefcontext = this
        .toMap()
        .put("community.general.sefcontext", this.options)
        .toTyped(sefcontext)
}

//

class selinux_permissive_options {
    
    
    domain: String
    
    
    
    no_reload: Boolean?
    
    
    
    permissive: Boolean
    
    
    
    store: String?
    
    
}

class selinux_permissive extends playbook.task {
    hidden options: selinux_permissive_options

    `community.general.selinux_permissive`: selinux_permissive_options?

    function into(): selinux_permissive = this
        .toMap()
        .put("community.general.selinux_permissive", this.options)
        .toTyped(selinux_permissive)
}

//

class selogin_options {
    
    
    ignore_selinux_state: Boolean?
    
    
    
    login: String
    
    
    
    reload: Boolean?
    
    
    
    selevel: String?
    
    
    
    seuser: String?
    
    
    
    state: ("present"|"absent")?
    
    
}

class selogin extends playbook.task {
    hidden options: selogin_options

    `community.general.selogin`: selogin_options?

    function into(): selogin = this
        .toMap()
        .put("community.general.selogin", this.options)
        .toTyped(selogin)
}

//

class sendgrid_options {
    
    
    api_key: String?
    
    
    
    attachments: Listing<String>?
    
    
    
    bcc: Listing<String>?
    
    
    
    body: String
    
    
    
    cc: Listing<String>?
    
    
    
    from_address: String
    
    
    
    from_name: String?
    
    
    
    headers: String?
    
    
    
    html_body: Boolean?
    
    
    
    password: String?
    
    
    
    subject: String
    
    
    
    to_addresses: Listing<String>
    
    
    
    username: String?
    
    
}

class sendgrid extends playbook.task {
    hidden options: sendgrid_options

    `community.general.sendgrid`: sendgrid_options?

    function into(): sendgrid = this
        .toMap()
        .put("community.general.sendgrid", this.options)
        .toTyped(sendgrid)
}

//

class sensu_check_options {
    
    
    aggregate: Boolean?
    
    
    
    backup: Boolean?
    
    
    
    command: String?
    
    
    
    custom: String?
    
    
    
    dependencies: Listing<String>?
    
    
    
    handle: Boolean?
    
    
    
    handlers: Listing<String>?
    
    
    
    high_flap_threshold: Int?
    
    
    
    interval: Int?
    
    
    
    low_flap_threshold: Int?
    
    
    
    metric: Boolean?
    
    
    
    name: String
    
    
    
    occurrences: Int?
    
    
    
    path: String?
    
    
    
    publish: Boolean?
    
    
    
    refresh: Int?
    
    
    
    source: String?
    
    
    
    standalone: Boolean?
    
    
    
    state: ("present"|"absent")?
    
    
    
    subdue_begin: String?
    
    
    
    subdue_end: String?
    
    
    
    subscribers: Listing<String>?
    
    
    
    timeout: Int?
    
    
    
    ttl: Int?
    
    
}

class sensu_check extends playbook.task {
    hidden options: sensu_check_options

    `community.general.sensu_check`: sensu_check_options?

    function into(): sensu_check = this
        .toMap()
        .put("community.general.sensu_check", this.options)
        .toTyped(sensu_check)
}

//

class sensu_client_options {
    
    
    address: String?
    
    
    
    chef: String?
    
    
    
    deregister: Boolean?
    
    
    
    deregistration: String?
    
    
    
    ec2: String?
    
    
    
    keepalive: String?
    
    
    
    keepalives: Boolean?
    
    
    
    name: String?
    
    
    
    puppet: String?
    
    
    
    redact: Listing<String>?
    
    
    
    registration: String?
    
    
    
    safe_mode: Boolean?
    
    
    
    servicenow: String?
    
    
    
    socket: String?
    
    
    
    state: ("present"|"absent")?
    
    
    
    subscriptions: Listing<String>?
    
    
}

class sensu_client extends playbook.task {
    hidden options: sensu_client_options

    `community.general.sensu_client`: sensu_client_options?

    function into(): sensu_client = this
        .toMap()
        .put("community.general.sensu_client", this.options)
        .toTyped(sensu_client)
}

//

class sensu_handler_options {
    
    
    command: String?
    
    
    
    filter: String?
    
    
    
    filters: Listing<String>?
    
    
    
    handle_flapping: Boolean?
    
    
    
    handle_silenced: Boolean?
    
    
    
    handlers: Listing<String>?
    
    
    
    mutator: String?
    
    
    
    name: String
    
    
    
    pipe: String?
    
    
    
    severities: Listing<String>?
    
    
    
    socket: String?
    
    
    
    state: ("present"|"absent")?
    
    
    
    timeout: Int?
    
    
    
    type: ("pipe"|"tcp"|"udp"|"transport"|"set")?
    
    
}

class sensu_handler extends playbook.task {
    hidden options: sensu_handler_options

    `community.general.sensu_handler`: sensu_handler_options?

    function into(): sensu_handler = this
        .toMap()
        .put("community.general.sensu_handler", this.options)
        .toTyped(sensu_handler)
}

//

class sensu_silence_options {
    
    
    check: String?
    
    
    
    creator: String?
    
    
    
    expire: Int?
    
    
    
    expire_on_resolve: Boolean?
    
    
    
    reason: String?
    
    
    
    state: ("present"|"absent")?
    
    
    
    subscription: String
    
    
    
    url: String?
    
    
}

class sensu_silence extends playbook.task {
    hidden options: sensu_silence_options

    `community.general.sensu_silence`: sensu_silence_options?

    function into(): sensu_silence = this
        .toMap()
        .put("community.general.sensu_silence", this.options)
        .toTyped(sensu_silence)
}

//

class sensu_subscription_options {
    
    
    backup: Boolean?
    
    
    
    name: String
    
    
    
    path: String?
    
    
    
    state: ("present"|"absent")?
    
    
}

class sensu_subscription extends playbook.task {
    hidden options: sensu_subscription_options

    `community.general.sensu_subscription`: sensu_subscription_options?

    function into(): sensu_subscription = this
        .toMap()
        .put("community.general.sensu_subscription", this.options)
        .toTyped(sensu_subscription)
}

//

class seport_options {
    
    
    ignore_selinux_state: Boolean?
    
    
    
    `local`: Boolean?
    
    
    
    ports: Listing<String>
    
    
    
    proto: ("tcp"|"udp")
    
    
    
    reload: Boolean?
    
    
    
    setype: String
    
    
    
    state: ("absent"|"present")?
    
    
}

class seport extends playbook.task {
    hidden options: seport_options

    `community.general.seport`: seport_options?

    function into(): seport = this
        .toMap()
        .put("community.general.seport", this.options)
        .toTyped(seport)
}

//

class serverless_options {
    
    
    deploy: Boolean?
    
    
    
    force: Boolean?
    
    
    
    region: String?
    
    
    
    serverless_bin_path: String?
    
    
    
    service_path: String
    
    
    
    stage: String?
    
    
    
    state: ("absent"|"present")?
    
    
    
    verbose: Boolean?
    
    
}

class serverless extends playbook.task {
    hidden options: serverless_options

    `community.general.serverless`: serverless_options?

    function into(): serverless = this
        .toMap()
        .put("community.general.serverless", this.options)
        .toTyped(serverless)
}

//

class shutdown_options {
    
    
    delay: Int?
    
    
    
    msg: String?
    
    
    
    search_paths: Listing<String>?
    
    
}

class shutdown extends playbook.task {
    hidden options: shutdown_options

    `community.general.shutdown`: shutdown_options?

    function into(): shutdown = this
        .toMap()
        .put("community.general.shutdown", this.options)
        .toTyped(shutdown)
}

//

class simpleinit_msb_options {
    
    
    enabled: Boolean?
    
    
    
    name: String
    
    
    
    state: ("running"|"started"|"stopped"|"restarted"|"reloaded")?
    
    
}

class simpleinit_msb extends playbook.task {
    hidden options: simpleinit_msb_options

    `community.general.simpleinit_msb`: simpleinit_msb_options?

    function into(): simpleinit_msb = this
        .toMap()
        .put("community.general.simpleinit_msb", this.options)
        .toTyped(simpleinit_msb)
}

//

class sl_vm_options {
    
    
    cpus: Int?
    
    
    
    datacenter: ("ams01"|"ams03"|"che01"|"dal01"|"dal05"|"dal06"|"dal09"|"dal10"|"dal12"|"dal13"|"fra02"|"fra04"|"fra05"|"hkg02"|"hou02"|"lon02"|"lon04"|"lon06"|"mel01"|"mex01"|"mil01"|"mon01"|"osl01"|"par01"|"sao01"|"sea01"|"seo01"|"sjc01"|"sjc03"|"sjc04"|"sng01"|"syd01"|"syd04"|"tok02"|"tor01"|"wdc01"|"wdc04"|"wdc06"|"wdc07")?
    
    
    
    dedicated: Boolean?
    
    
    
    disks: Listing<Int>?
    
    
    
    domain: String?
    
    
    
    flavor: String?
    
    
    
    hostname: String?
    
    
    
    hourly: Boolean?
    
    
    
    image_id: String?
    
    
    
    instance_id: String?
    
    
    
    local_disk: Boolean?
    
    
    
    memory: Int?
    
    
    
    nic_speed: Int?
    
    
    
    os_code: String?
    
    
    
    post_uri: String?
    
    
    
    private: Boolean?
    
    
    
    private_vlan: String?
    
    
    
    public_vlan: String?
    
    
    
    ssh_keys: Listing<String>?
    
    
    
    state: ("absent"|"present")?
    
    
    
    tags: String?
    
    
    
    wait: Boolean?
    
    
    
    wait_time: Int?
    
    
}

class sl_vm extends playbook.task {
    hidden options: sl_vm_options

    `community.general.sl_vm`: sl_vm_options?

    function into(): sl_vm = this
        .toMap()
        .put("community.general.sl_vm", this.options)
        .toTyped(sl_vm)
}

//

class slack_options {
    
    
    attachments: Listing<String>?
    
    
    
    blocks: Listing<String>?
    
    
    
    channel: String?
    
    
    
    color: String?
    
    
    
    domain: String?
    
    
    
    icon_emoji: String?
    
    
    
    icon_url: String?
    
    
    
    link_names: Int?
    
    
    
    message_id: String?
    
    
    
    msg: String?
    
    
    
    parse: ("full"|"none")?
    
    
    
    prepend_hash: ("always"|"never"|"auto")?
    
    
    
    thread_id: String?
    
    
    
    token: String
    
    
    
    username: String?
    
    
    
    validate_certs: Boolean?
    
    
}

class slack extends playbook.task {
    hidden options: slack_options

    `community.general.slack`: slack_options?

    function into(): slack = this
        .toMap()
        .put("community.general.slack", this.options)
        .toTyped(slack)
}

//

class slackpkg_options {
    
    
    name: Listing<String>
    
    
    
    state: ("present"|"absent"|"latest"|"installed"|"removed")?
    
    
    
    update_cache: Boolean?
    
    
}

class slackpkg extends playbook.task {
    hidden options: slackpkg_options

    `community.general.slackpkg`: slackpkg_options?

    function into(): slackpkg = this
        .toMap()
        .put("community.general.slackpkg", this.options)
        .toTyped(slackpkg)
}

//

class smartos_image_info_options {
    
    
    filters: String?
    
    
}

class smartos_image_info extends playbook.task {
    hidden options: smartos_image_info_options

    `community.general.smartos_image_info`: smartos_image_info_options?

    function into(): smartos_image_info = this
        .toMap()
        .put("community.general.smartos_image_info", this.options)
        .toTyped(smartos_image_info)
}

//

class snap_options {
    
    
    channel: String?
    
    
    
    classic: Boolean?
    
    
    
    dangerous: Boolean?
    
    
    
    name: Listing<String>
    
    
    
    options: Listing<String>?
    
    
    
    state: ("absent"|"present"|"enabled"|"disabled")?
    
    
}

class snap extends playbook.task {
    hidden options: snap_options

    `community.general.snap`: snap_options?

    function into(): snap = this
        .toMap()
        .put("community.general.snap", this.options)
        .toTyped(snap)
}

//

class snap_alias_options {
    
    
    alias: Listing<String>?
    
    
    
    name: String?
    
    
    
    state: ("absent"|"present")?
    
    
}

class snap_alias extends playbook.task {
    hidden options: snap_alias_options

    `community.general.snap_alias`: snap_alias_options?

    function into(): snap_alias = this
        .toMap()
        .put("community.general.snap_alias", this.options)
        .toTyped(snap_alias)
}

//

class snmp_facts_options {
    
    
    authkey: String?
    
    
    
    community: String?
    
    
    
    host: String
    
    
    
    integrity: ("md5"|"sha")?
    
    
    
    level: ("authNoPriv"|"authPriv")?
    
    
    
    privacy: ("aes"|"des")?
    
    
    
    privkey: String?
    
    
    
    retries: Int?
    
    
    
    timeout: Int?
    
    
    
    username: String?
    
    
    
    version: ("v2"|"v2c"|"v3")
    
    
}

class snmp_facts extends playbook.task {
    hidden options: snmp_facts_options

    `community.general.snmp_facts`: snmp_facts_options?

    function into(): snmp_facts = this
        .toMap()
        .put("community.general.snmp_facts", this.options)
        .toTyped(snmp_facts)
}

//

class solaris_zone_options {
    
    
    attach_options: String?
    
    
    
    config: String?
    
    
    
    create_options: String?
    
    
    
    install_options: String?
    
    
    
    name: String
    
    
    
    path: String?
    
    
    
    root_password: String?
    
    
    
    sparse: Boolean?
    
    
    
    state: ("absent"|"attached"|"configured"|"detached"|"installed"|"present"|"running"|"started"|"stopped")?
    
    
    
    timeout: Int?
    
    
}

class solaris_zone extends playbook.task {
    hidden options: solaris_zone_options

    `community.general.solaris_zone`: solaris_zone_options?

    function into(): solaris_zone = this
        .toMap()
        .put("community.general.solaris_zone", this.options)
        .toTyped(solaris_zone)
}

//

class sorcery_options {
    
    
    cache_valid_time: Int?
    
    
    
    depends: String?
    
    
    
    name: Listing<String>?
    
    
    
    repository: String?
    
    
    
    state: ("present"|"latest"|"absent"|"cast"|"dispelled"|"rebuild")?
    
    
    
    update: Boolean?
    
    
    
    update_cache: Boolean?
    
    
}

class sorcery extends playbook.task {
    hidden options: sorcery_options

    `community.general.sorcery`: sorcery_options?

    function into(): sorcery = this
        .toMap()
        .put("community.general.sorcery", this.options)
        .toTyped(sorcery)
}

//

class spectrum_device_options {
    
    
    agentport: Int?
    
    
    
    community: String
    
    
    
    device: String
    
    
    
    landscape: String
    
    
    
    state: ("present"|"absent")?
    
    
    
    url: String
    
    
    
    url_password: String
    
    
    
    url_username: String
    
    
    
    use_proxy: Boolean?
    
    
    
    validate_certs: Boolean?
    
    
}

class spectrum_device extends playbook.task {
    hidden options: spectrum_device_options

    `community.general.spectrum_device`: spectrum_device_options?

    function into(): spectrum_device = this
        .toMap()
        .put("community.general.spectrum_device", this.options)
        .toTyped(spectrum_device)
}

//

class spectrum_model_attrs_options {
    
    
    attributes: Listing<String>
    
    
    
    name: String
    
    
    
    type: String
    
    
    
    url: String
    
    
    
    url_password: String
    
    
    
    url_username: String
    
    
    
    use_proxy: Boolean?
    
    
    
    validate_certs: Boolean?
    
    
}

class spectrum_model_attrs extends playbook.task {
    hidden options: spectrum_model_attrs_options

    `community.general.spectrum_model_attrs`: spectrum_model_attrs_options?

    function into(): spectrum_model_attrs = this
        .toMap()
        .put("community.general.spectrum_model_attrs", this.options)
        .toTyped(spectrum_model_attrs)
}

//

class spotinst_aws_elastigroup_options {
    
    
    account_id: String?
    
    
    
    availability_vs_cost: String
    
    
    
    availability_zones: Listing<String>
    
    
    
    block_device_mappings: Listing<String>?
    
    
    
    chef: String?
    
    
    
    credentials_path: String?
    
    
    
    do_not_update: Listing<String>?
    
    
    
    down_scaling_policies: Listing<String>?
    
    
    
    draining_timeout: Int?
    
    
    
    ebs_optimized: Boolean?
    
    
    
    ebs_volume_pool: Listing<String>?
    
    
    
    ecs: String?
    
    
    
    elastic_beanstalk: String?
    
    
    
    elastic_ips: Listing<String>?
    
    
    
    fallback_to_od: Boolean?
    
    
    
    health_check_grace_period: Int?
    
    
    
    health_check_type: String?
    
    
    
    health_check_unhealthy_duration_before_replacement: Int?
    
    
    
    iam_role_arn: String?
    
    
    
    iam_role_name: String?
    
    
    
    id: String?
    
    
    
    image_id: String
    
    
    
    key_pair: String?
    
    
    
    kubernetes: String?
    
    
    
    lifetime_period: Int?
    
    
    
    load_balancers: Listing<String>?
    
    
    
    max_size: Int
    
    
    
    mesosphere: String?
    
    
    
    min_size: Int
    
    
    
    monitoring: String?
    
    
    
    multai_load_balancers: Listing<String>?
    
    
    
    multai_token: String?
    
    
    
    name: String
    
    
    
    network_interfaces: Listing<String>?
    
    
    
    on_demand_count: Int?
    
    
    
    on_demand_instance_type: String?
    
    
    
    opsworks: String?
    
    
    
    persistence: String?
    
    
    
    product: String
    
    
    
    rancher: String?
    
    
    
    right_scale: String?
    
    
    
    risk: Int?
    
    
    
    roll_config: String?
    
    
    
    scheduled_tasks: Listing<String>?
    
    
    
    security_group_ids: Listing<String>
    
    
    
    shutdown_script: String?
    
    
    
    signals: Listing<String>?
    
    
    
    spin_up_time: Int?
    
    
    
    spot_instance_types: Listing<String>
    
    
    
    state: ("present"|"absent")?
    
    
    
    tags: Listing<String>?
    
    
    
    target: Int
    
    
    
    target_group_arns: Listing<String>?
    
    
    
    target_tracking_policies: Listing<String>?
    
    
    
    tenancy: String?
    
    
    
    terminate_at_end_of_billing_hour: Boolean?
    
    
    
    token: String?
    
    
    
    uniqueness_by: ("id"|"name")?
    
    
    
    unit: String?
    
    
    
    up_scaling_policies: Listing<String>?
    
    
    
    user_data: String?
    
    
    
    utilize_reserved_instances: Boolean?
    
    
    
    wait_for_instances: Boolean?
    
    
    
    wait_timeout: Int?
    
    
}

class spotinst_aws_elastigroup extends playbook.task {
    hidden options: spotinst_aws_elastigroup_options

    `community.general.spotinst_aws_elastigroup`: spotinst_aws_elastigroup_options?

    function into(): spotinst_aws_elastigroup = this
        .toMap()
        .put("community.general.spotinst_aws_elastigroup", this.options)
        .toTyped(spotinst_aws_elastigroup)
}

//

class ss_3par_cpg_options {
    
    
    cpg_name: String
    
    
    
    disk_type: ("FC"|"NL"|"SSD")?
    
    
    
    domain: String?
    
    
    
    growth_increment: String?
    
    
    
    growth_limit: String?
    
    
    
    growth_warning: String?
    
    
    
    high_availability: ("PORT"|"CAGE"|"MAG")?
    
    
    
    raid_type: ("R0"|"R1"|"R5"|"R6")?
    
    
    
    secure: Boolean?
    
    
    
    set_size: Int?
    
    
    
    state: ("present"|"absent")
    
    
}

class ss_3par_cpg extends playbook.task {
    hidden options: ss_3par_cpg_options

    `community.general.ss_3par_cpg`: ss_3par_cpg_options?

    function into(): ss_3par_cpg = this
        .toMap()
        .put("community.general.ss_3par_cpg", this.options)
        .toTyped(ss_3par_cpg)
}

//

class ssh_config_options {
    
    
    add_keys_to_agent: Boolean?
    
    
    
    controlmaster: ("yes"|"no"|"ask"|"auto"|"autoask")?
    
    
    
    controlpath: String?
    
    
    
    controlpersist: String?
    
    
    
    forward_agent: Boolean?
    
    
    
    group: String?
    
    
    
    host: String
    
    
    
    host_key_algorithms: String?
    
    
    
    hostname: String?
    
    
    
    identities_only: Boolean?
    
    
    
    identity_file: String?
    
    
    
    port: String?
    
    
    
    proxycommand: String?
    
    
    
    proxyjump: String?
    
    
    
    remote_user: String?
    
    
    
    ssh_config_file: String?
    
    
    
    state: ("present"|"absent")?
    
    
    
    strict_host_key_checking: ("yes"|"no"|"ask")?
    
    
    
    user: String?
    
    
    
    user_known_hosts_file: String?
    
    
}

class ssh_config extends playbook.task {
    hidden options: ssh_config_options

    `community.general.ssh_config`: ssh_config_options?

    function into(): ssh_config = this
        .toMap()
        .put("community.general.ssh_config", this.options)
        .toTyped(ssh_config)
}

//

class stackdriver_options {
    
    
    annotated_by: String?
    
    
    
    deployed_by: String?
    
    
    
    deployed_to: String?
    
    
    
    event: ("annotation"|"deploy")
    
    
    
    event_epoch: String?
    
    
    
    instance_id: String?
    
    
    
    key: String
    
    
    
    level: ("INFO"|"WARN"|"ERROR")?
    
    
    
    msg: String?
    
    
    
    repository: String?
    
    
    
    revision_id: String?
    
    
}

class stackdriver extends playbook.task {
    hidden options: stackdriver_options

    `community.general.stackdriver`: stackdriver_options?

    function into(): stackdriver = this
        .toMap()
        .put("community.general.stackdriver", this.options)
        .toTyped(stackdriver)
}

//

class stacki_host_options {
    
    
    appliance: String?
    
    
    
    force_install: Boolean?
    
    
    
    name: String
    
    
    
    network: String?
    
    
    
    prim_intf: String?
    
    
    
    prim_intf_ip: String?
    
    
    
    prim_intf_mac: String?
    
    
    
    rack: Int?
    
    
    
    rank: Int?
    
    
    
    stacki_endpoint: String
    
    
    
    stacki_password: String
    
    
    
    stacki_user: String
    
    
    
    state: ("absent"|"present")?
    
    
}

class stacki_host extends playbook.task {
    hidden options: stacki_host_options

    `community.general.stacki_host`: stacki_host_options?

    function into(): stacki_host = this
        .toMap()
        .put("community.general.stacki_host", this.options)
        .toTyped(stacki_host)
}

//

class statsd_options {
    
    
    delta: Boolean?
    
    
    
    host: String?
    
    
    
    metric: String
    
    
    
    metric_prefix: String?
    
    
    
    metric_type: ("counter"|"gauge")
    
    
    
    port: Int?
    
    
    
    protocol: ("udp"|"tcp")?
    
    
    
    state: ("present")?
    
    
    
    timeout: String?
    
    
    
    value: Int
    
    
}

class statsd extends playbook.task {
    hidden options: statsd_options

    `community.general.statsd`: statsd_options?

    function into(): statsd = this
        .toMap()
        .put("community.general.statsd", this.options)
        .toTyped(statsd)
}

//

class statusio_maintenance_options {
    
    
    all_infrastructure_affected: Boolean?
    
    
    
    api_id: String
    
    
    
    api_key: String
    
    
    
    automation: Boolean?
    
    
    
    components: Listing<String>?
    
    
    
    containers: Listing<String>?
    
    
    
    desc: String?
    
    
    
    maintenance_id: String?
    
    
    
    maintenance_notify_1_hr: Boolean?
    
    
    
    maintenance_notify_24_hr: Boolean?
    
    
    
    maintenance_notify_72_hr: Boolean?
    
    
    
    maintenance_notify_now: Boolean?
    
    
    
    minutes: Int?
    
    
    
    start_date: String?
    
    
    
    start_time: String?
    
    
    
    state: ("present"|"absent")?
    
    
    
    statuspage: String
    
    
    
    title: String?
    
    
    
    url: String?
    
    
}

class statusio_maintenance extends playbook.task {
    hidden options: statusio_maintenance_options

    `community.general.statusio_maintenance`: statusio_maintenance_options?

    function into(): statusio_maintenance = this
        .toMap()
        .put("community.general.statusio_maintenance", this.options)
        .toTyped(statusio_maintenance)
}

//

class sudoers_options {
    
    
    commands: Listing<String>?
    
    
    
    group: String?
    
    
    
    host: String?
    
    
    
    name: String
    
    
    
    noexec: Boolean?
    
    
    
    nopassword: Boolean?
    
    
    
    runas: String?
    
    
    
    setenv: Boolean?
    
    
    
    state: ("present"|"absent")?
    
    
    
    sudoers_path: String?
    
    
    
    user: String?
    
    
    
    validation: ("absent"|"detect"|"required")?
    
    
}

class sudoers extends playbook.task {
    hidden options: sudoers_options

    `community.general.sudoers`: sudoers_options?

    function into(): sudoers = this
        .toMap()
        .put("community.general.sudoers", this.options)
        .toTyped(sudoers)
}

//

class supervisorctl_options {
    
    
    config: String?
    
    
    
    name: String
    
    
    
    password: String?
    
    
    
    server_url: String?
    
    
    
    signal: String?
    
    
    
    state: ("present"|"started"|"stopped"|"restarted"|"absent"|"signalled")
    
    
    
    stop_before_removing: Boolean?
    
    
    
    supervisorctl_path: String?
    
    
    
    username: String?
    
    
}

class supervisorctl extends playbook.task {
    hidden options: supervisorctl_options

    `community.general.supervisorctl`: supervisorctl_options?

    function into(): supervisorctl = this
        .toMap()
        .put("community.general.supervisorctl", this.options)
        .toTyped(supervisorctl)
}

//

class svc_options {
    
    
    downed: Boolean?
    
    
    
    enabled: Boolean?
    
    
    
    name: String
    
    
    
    service_dir: String?
    
    
    
    service_src: String?
    
    
    
    state: ("killed"|"once"|"reloaded"|"restarted"|"started"|"stopped")?
    
    
}

class svc extends playbook.task {
    hidden options: svc_options

    `community.general.svc`: svc_options?

    function into(): svc = this
        .toMap()
        .put("community.general.svc", this.options)
        .toTyped(svc)
}

//

class svr4pkg_options {
    
    
    category: Boolean?
    
    
    
    name: String
    
    
    
    proxy: String?
    
    
    
    response_file: String?
    
    
    
    src: String?
    
    
    
    state: ("present"|"absent")
    
    
    
    zone: ("current"|"all")?
    
    
}

class svr4pkg extends playbook.task {
    hidden options: svr4pkg_options

    `community.general.svr4pkg`: svr4pkg_options?

    function into(): svr4pkg = this
        .toMap()
        .put("community.general.svr4pkg", this.options)
        .toTyped(svr4pkg)
}

//

class swdepot_options {
    
    
    depot: String?
    
    
    
    name: String
    
    
    
    state: ("present"|"latest"|"absent")
    
    
}

class swdepot extends playbook.task {
    hidden options: swdepot_options

    `community.general.swdepot`: swdepot_options?

    function into(): swdepot = this
        .toMap()
        .put("community.general.swdepot", this.options)
        .toTyped(swdepot)
}

//

class swupd_options {
    
    
    contenturl: String?
    
    
    
    format: String?
    
    
    
    manifest: Int?
    
    
    
    name: String?
    
    
    
    state: ("present"|"absent")?
    
    
    
    update: Boolean?
    
    
    
    url: String?
    
    
    
    verify: Boolean?
    
    
    
    versionurl: String?
    
    
}

class swupd extends playbook.task {
    hidden options: swupd_options

    `community.general.swupd`: swupd_options?

    function into(): swupd = this
        .toMap()
        .put("community.general.swupd", this.options)
        .toTyped(swupd)
}

//

class syslogger_options {
    
    
    facility: ("kern"|"user"|"mail"|"daemon"|"auth"|"lpr"|"news"|"uucp"|"cron"|"syslog"|"local0"|"local1"|"local2"|"local3"|"local4"|"local5"|"local6"|"local7")?
    
    
    
    ident: String?
    
    
    
    log_pid: Boolean?
    
    
    
    msg: String
    
    
    
    priority: ("emerg"|"alert"|"crit"|"err"|"warning"|"notice"|"info"|"debug")?
    
    
}

class syslogger extends playbook.task {
    hidden options: syslogger_options

    `community.general.syslogger`: syslogger_options?

    function into(): syslogger = this
        .toMap()
        .put("community.general.syslogger", this.options)
        .toTyped(syslogger)
}

//

class syspatch_options {
    
    
    revert: ("all"|"one")?
    
    
}

class syspatch extends playbook.task {
    hidden options: syspatch_options

    `community.general.syspatch`: syspatch_options?

    function into(): syspatch = this
        .toMap()
        .put("community.general.syspatch", this.options)
        .toTyped(syspatch)
}

//

class sysrc_options {
    
    
    delim: String?
    
    
    
    jail: String?
    
    
    
    name: String
    
    
    
    path: String?
    
    
    
    state: ("absent"|"present"|"value_present"|"value_absent")?
    
    
    
    value: String?
    
    
}

class sysrc extends playbook.task {
    hidden options: sysrc_options

    `community.general.sysrc`: sysrc_options?

    function into(): sysrc = this
        .toMap()
        .put("community.general.sysrc", this.options)
        .toTyped(sysrc)
}

//

class sysupgrade_options {
    
    
    fetch_only: Boolean?
    
    
    
    force: Boolean?
    
    
    
    installurl: String?
    
    
    
    keep_files: Boolean?
    
    
    
    snapshot: Boolean?
    
    
}

class sysupgrade extends playbook.task {
    hidden options: sysupgrade_options

    `community.general.sysupgrade`: sysupgrade_options?

    function into(): sysupgrade = this
        .toMap()
        .put("community.general.sysupgrade", this.options)
        .toTyped(sysupgrade)
}

//

class taiga_issue_options {
    
    
    attachment: String?
    
    
    
    attachment_description: String?
    
    
    
    description: String?
    
    
    
    issue_type: String
    
    
    
    priority: String?
    
    
    
    project: String
    
    
    
    severity: String?
    
    
    
    state: ("present"|"absent")?
    
    
    
    status: String?
    
    
    
    subject: String
    
    
    
    tags: Listing<String>?
    
    
    
    taiga_host: String?
    
    
}

class taiga_issue extends playbook.task {
    hidden options: taiga_issue_options

    `community.general.taiga_issue`: taiga_issue_options?

    function into(): taiga_issue = this
        .toMap()
        .put("community.general.taiga_issue", this.options)
        .toTyped(taiga_issue)
}

//

class telegram_options {
    
    
    api_args: String?
    
    
    
    api_method: String?
    
    
    
    token: String
    
    
}

class telegram extends playbook.task {
    hidden options: telegram_options

    `community.general.telegram`: telegram_options?

    function into(): telegram = this
        .toMap()
        .put("community.general.telegram", this.options)
        .toTyped(telegram)
}

//

class terraform_options {
    
    
    backend_config: String?
    
    
    
    backend_config_files: Listing<String>?
    
    
    
    binary_path: String?
    
    
    
    check_destroy: Boolean?
    
    
    
    complex_vars: Boolean?
    
    
    
    force_init: Boolean?
    
    
    
    init_reconfigure: Boolean?
    
    
    
    lock: Boolean?
    
    
    
    lock_timeout: Int?
    
    
    
    overwrite_init: Boolean?
    
    
    
    parallelism: Int?
    
    
    
    plan_file: String?
    
    
    
    plugin_paths: Listing<String>?
    
    
    
    project_path: String
    
    
    
    provider_upgrade: Boolean?
    
    
    
    purge_workspace: Boolean?
    
    
    
    state: ("planned"|"present"|"absent")?
    
    
    
    state_file: String?
    
    
    
    targets: Listing<String>?
    
    
    
    variables: String?
    
    
    
    variables_files: Listing<String>?
    
    
    
    workspace: String?
    
    
}

class terraform extends playbook.task {
    hidden options: terraform_options

    `community.general.terraform`: terraform_options?

    function into(): terraform = this
        .toMap()
        .put("community.general.terraform", this.options)
        .toTyped(terraform)
}

//

class timezone_options {
    
    
    hwclock: ("local"|"UTC")?
    
    
    
    name: String?
    
    
}

class timezone extends playbook.task {
    hidden options: timezone_options

    `community.general.timezone`: timezone_options?

    function into(): timezone = this
        .toMap()
        .put("community.general.timezone", this.options)
        .toTyped(timezone)
}

//

class twilio_options {
    
    
    account_sid: String
    
    
    
    auth_token: String
    
    
    
    from_number: String
    
    
    
    media_url: String?
    
    
    
    msg: String
    
    
    
    to_numbers: Listing<String>
    
    
}

class twilio extends playbook.task {
    hidden options: twilio_options

    `community.general.twilio`: twilio_options?

    function into(): twilio = this
        .toMap()
        .put("community.general.twilio", this.options)
        .toTyped(twilio)
}

//

class typetalk_options {
    
    
    client_id: String
    
    
    
    client_secret: String
    
    
    
    msg: String
    
    
    
    topic: Int
    
    
}

class typetalk extends playbook.task {
    hidden options: typetalk_options

    `community.general.typetalk`: typetalk_options?

    function into(): typetalk = this
        .toMap()
        .put("community.general.typetalk", this.options)
        .toTyped(typetalk)
}

//

class udm_dns_record_options {
    
    
    data: String?
    
    
    
    name: String
    
    
    
    state: ("present"|"absent")?
    
    
    
    type: String
    
    
    
    zone: String
    
    
}

class udm_dns_record extends playbook.task {
    hidden options: udm_dns_record_options

    `community.general.udm_dns_record`: udm_dns_record_options?

    function into(): udm_dns_record = this
        .toMap()
        .put("community.general.udm_dns_record", this.options)
        .toTyped(udm_dns_record)
}

//

class udm_dns_zone_options {
    
    
    contact: String?
    
    
    
    expire: Int?
    
    
    
    interfaces: Listing<String>?
    
    
    
    mx: Listing<String>?
    
    
    
    nameserver: Listing<String>?
    
    
    
    refresh: Int?
    
    
    
    retry: Int?
    
    
    
    state: ("present"|"absent")?
    
    
    
    ttl: Int?
    
    
    
    type: String
    
    
    
    zone: String
    
    
}

class udm_dns_zone extends playbook.task {
    hidden options: udm_dns_zone_options

    `community.general.udm_dns_zone`: udm_dns_zone_options?

    function into(): udm_dns_zone = this
        .toMap()
        .put("community.general.udm_dns_zone", this.options)
        .toTyped(udm_dns_zone)
}

//

class udm_group_options {
    
    
    description: String?
    
    
    
    name: String
    
    
    
    ou: String?
    
    
    
    position: String?
    
    
    
    state: ("present"|"absent")?
    
    
    
    subpath: String?
    
    
}

class udm_group extends playbook.task {
    hidden options: udm_group_options

    `community.general.udm_group`: udm_group_options?

    function into(): udm_group = this
        .toMap()
        .put("community.general.udm_group", this.options)
        .toTyped(udm_group)
}

//

class udm_share_options {
    
    
    directorymode: String?
    
    
    
    group: String?
    
    
    
    host: String?
    
    
    
    name: String
    
    
    
    nfsCustomSettings: Listing<String>?
    
    
    
    nfs_hosts: Listing<String>?
    
    
    
    ou: String
    
    
    
    owner: String?
    
    
    
    path: String?
    
    
    
    root_squash: Boolean?
    
    
    
    sambaBlockSize: String?
    
    
    
    sambaBlockingLocks: Boolean?
    
    
    
    sambaBrowseable: Boolean?
    
    
    
    sambaCreateMode: String?
    
    
    
    sambaCscPolicy: String?
    
    
    
    sambaCustomSettings: Listing<String>?
    
    
    
    sambaDirectoryMode: String?
    
    
    
    sambaDirectorySecurityMode: String?
    
    
    
    sambaDosFilemode: Boolean?
    
    
    
    sambaFakeOplocks: Boolean?
    
    
    
    sambaForceCreateMode: Boolean?
    
    
    
    sambaForceDirectoryMode: Boolean?
    
    
    
    sambaForceDirectorySecurityMode: Boolean?
    
    
    
    sambaForceGroup: String?
    
    
    
    sambaForceSecurityMode: Boolean?
    
    
    
    sambaForceUser: String?
    
    
    
    sambaHideFiles: String?
    
    
    
    sambaHideUnreadable: Boolean?
    
    
    
    sambaHostsAllow: Listing<String>?
    
    
    
    sambaHostsDeny: Listing<String>?
    
    
    
    sambaInheritAcls: Boolean?
    
    
    
    sambaInheritOwner: Boolean?
    
    
    
    sambaInheritPermissions: Boolean?
    
    
    
    sambaInvalidUsers: String?
    
    
    
    sambaLevel2Oplocks: Boolean?
    
    
    
    sambaLocking: Boolean?
    
    
    
    sambaMSDFSRoot: Boolean?
    
    
    
    sambaName: String?
    
    
    
    sambaNtAclSupport: Boolean?
    
    
    
    sambaOplocks: Boolean?
    
    
    
    sambaPostexec: String?
    
    
    
    sambaPreexec: String?
    
    
    
    sambaPublic: Boolean?
    
    
    
    sambaSecurityMode: String?
    
    
    
    sambaStrictLocking: String?
    
    
    
    sambaVFSObjects: String?
    
    
    
    sambaValidUsers: String?
    
    
    
    sambaWriteList: String?
    
    
    
    sambaWriteable: Boolean?
    
    
    
    state: ("present"|"absent")?
    
    
    
    subtree_checking: Boolean?
    
    
    
    sync: String?
    
    
    
    writeable: Boolean?
    
    
}

class udm_share extends playbook.task {
    hidden options: udm_share_options

    `community.general.udm_share`: udm_share_options?

    function into(): udm_share = this
        .toMap()
        .put("community.general.udm_share", this.options)
        .toTyped(udm_share)
}

//

class udm_user_options {
    
    
    birthday: String?
    
    
    
    city: String?
    
    
    
    country: String?
    
    
    
    department_number: String?
    
    
    
    description: String?
    
    
    
    display_name: String?
    
    
    
    email: Listing<String>?
    
    
    
    employee_number: String?
    
    
    
    employee_type: String?
    
    
    
    firstname: String?
    
    
    
    gecos: String?
    
    
    
    groups: Listing<String>?
    
    
    
    home_share: String?
    
    
    
    home_share_path: String?
    
    
    
    home_telephone_number: Listing<String>?
    
    
    
    homedrive: String?
    
    
    
    lastname: String?
    
    
    
    mail_alternative_address: Listing<String>?
    
    
    
    mail_home_server: String?
    
    
    
    mail_primary_address: String?
    
    
    
    mobile_telephone_number: Listing<String>?
    
    
    
    organisation: String?
    
    
    
    ou: String?
    
    
    
    overridePWHistory: Boolean?
    
    
    
    overridePWLength: Boolean?
    
    
    
    pager_telephonenumber: Listing<String>?
    
    
    
    password: String?
    
    
    
    phone: Listing<String>?
    
    
    
    position: String?
    
    
    
    postcode: String?
    
    
    
    primary_group: String?
    
    
    
    profilepath: String?
    
    
    
    pwd_change_next_login: ("0"|"1")?
    
    
    
    room_number: String?
    
    
    
    samba_privileges: Listing<String>?
    
    
    
    samba_user_workstations: Listing<String>?
    
    
    
    sambahome: String?
    
    
    
    scriptpath: String?
    
    
    
    secretary: Listing<String>?
    
    
    
    serviceprovider: Listing<String>?
    
    
    
    shell: String?
    
    
    
    state: ("present"|"absent")?
    
    
    
    street: String?
    
    
    
    subpath: String?
    
    
    
    title: String?
    
    
    
    unixhome: String?
    
    
    
    update_password: ("always"|"on_create")?
    
    
    
    userexpiry: String?
    
    
    
    username: String
    
    
}

class udm_user extends playbook.task {
    hidden options: udm_user_options

    `community.general.udm_user`: udm_user_options?

    function into(): udm_user = this
        .toMap()
        .put("community.general.udm_user", this.options)
        .toTyped(udm_user)
}

//

class ufw_options {
    
    
    comment: String?
    
    
    
    default: ("allow"|"deny"|"reject")?
    
    
    
    `delete`: Boolean?
    
    
    
    direction: ("in"|"incoming"|"out"|"outgoing"|"routed")?
    
    
    
    from_ip: String?
    
    
    
    from_port: String?
    
    
    
    insert: Int?
    
    
    
    insert_relative_to: ("first-ipv4"|"first-ipv6"|"last-ipv4"|"last-ipv6"|"zero")?
    
    
    
    interface: String?
    
    
    
    interface_in: String?
    
    
    
    interface_out: String?
    
    
    
    log: Boolean?
    
    
    
    logging: ("on"|"off"|"low"|"medium"|"high"|"full")?
    
    
    
    name: String?
    
    
    
    proto: ("any"|"tcp"|"udp"|"ipv6"|"esp"|"ah"|"gre"|"igmp")?
    
    
    
    route: Boolean?
    
    
    
    rule: ("allow"|"deny"|"limit"|"reject")?
    
    
    
    state: ("disabled"|"enabled"|"reloaded"|"reset")?
    
    
    
    to_ip: String?
    
    
    
    to_port: String?
    
    
}

class ufw extends playbook.task {
    hidden options: ufw_options

    `community.general.ufw`: ufw_options?

    function into(): ufw = this
        .toMap()
        .put("community.general.ufw", this.options)
        .toTyped(ufw)
}

//

class uptimerobot_options {
    
    
    apikey: String
    
    
    
    monitorid: String
    
    
    
    state: ("started"|"paused")
    
    
}

class uptimerobot extends playbook.task {
    hidden options: uptimerobot_options

    `community.general.uptimerobot`: uptimerobot_options?

    function into(): uptimerobot = this
        .toMap()
        .put("community.general.uptimerobot", this.options)
        .toTyped(uptimerobot)
}

//

class urpmi_options {
    
    
    force: Boolean?
    
    
    
    name: Listing<String>
    
    
    
    no_recommends: Boolean?
    
    
    
    root: String?
    
    
    
    state: ("absent"|"present"|"installed"|"removed")?
    
    
    
    update_cache: Boolean?
    
    
}

class urpmi extends playbook.task {
    hidden options: urpmi_options

    `community.general.urpmi`: urpmi_options?

    function into(): urpmi = this
        .toMap()
        .put("community.general.urpmi", this.options)
        .toTyped(urpmi)
}

//

class utm_aaa_group_options {
    
    
    adirectory_groups: Listing<String>?
    
    
    
    adirectory_groups_sids: String?
    
    
    
    backend_match: ("none"|"adirectory"|"edirectory"|"radius"|"tacacs"|"ldap")?
    
    
    
    comment: String?
    
    
    
    dynamic: ("none"|"ipsec_dn"|"directory_groups")?
    
    
    
    edirectory_groups: Listing<String>?
    
    
    
    ipsec_dn: String?
    
    
    
    ldap_attribute: String?
    
    
    
    ldap_attribute_value: String?
    
    
    
    members: Listing<String>?
    
    
    
    name: String
    
    
    
    network: String?
    
    
    
    radius_groups: Listing<String>?
    
    
    
    tacacs_groups: Listing<String>?
    
    
}

class utm_aaa_group extends playbook.task {
    hidden options: utm_aaa_group_options

    `community.general.utm_aaa_group`: utm_aaa_group_options?

    function into(): utm_aaa_group = this
        .toMap()
        .put("community.general.utm_aaa_group", this.options)
        .toTyped(utm_aaa_group)
}

//

class utm_aaa_group_info_options {
    
    
    name: String
    
    
}

class utm_aaa_group_info extends playbook.task {
    hidden options: utm_aaa_group_info_options

    `community.general.utm_aaa_group_info`: utm_aaa_group_info_options?

    function into(): utm_aaa_group_info = this
        .toMap()
        .put("community.general.utm_aaa_group_info", this.options)
        .toTyped(utm_aaa_group_info)
}

//

class utm_ca_host_key_cert_options {
    
    
    ca: String
    
    
    
    certificate: String
    
    
    
    comment: String?
    
    
    
    encrypted: Boolean?
    
    
    
    key: String?
    
    
    
    meta: String
    
    
    
    name: String
    
    
}

class utm_ca_host_key_cert extends playbook.task {
    hidden options: utm_ca_host_key_cert_options

    `community.general.utm_ca_host_key_cert`: utm_ca_host_key_cert_options?

    function into(): utm_ca_host_key_cert = this
        .toMap()
        .put("community.general.utm_ca_host_key_cert", this.options)
        .toTyped(utm_ca_host_key_cert)
}

//

class utm_ca_host_key_cert_info_options {
    
    
    name: String
    
    
}

class utm_ca_host_key_cert_info extends playbook.task {
    hidden options: utm_ca_host_key_cert_info_options

    `community.general.utm_ca_host_key_cert_info`: utm_ca_host_key_cert_info_options?

    function into(): utm_ca_host_key_cert_info = this
        .toMap()
        .put("community.general.utm_ca_host_key_cert_info", this.options)
        .toTyped(utm_ca_host_key_cert_info)
}

//

class utm_dns_host_options {
    
    
    address: String?
    
    
    
    address6: String?
    
    
    
    comment: String?
    
    
    
    hostname: String?
    
    
    
    interface: String?
    
    
    
    name: String
    
    
    
    resolved: Boolean?
    
    
    
    resolved6: Boolean?
    
    
    
    timeout: Int?
    
    
}

class utm_dns_host extends playbook.task {
    hidden options: utm_dns_host_options

    `community.general.utm_dns_host`: utm_dns_host_options?

    function into(): utm_dns_host = this
        .toMap()
        .put("community.general.utm_dns_host", this.options)
        .toTyped(utm_dns_host)
}

//

class utm_network_interface_address_options {
    
    
    address: String
    
    
    
    address6: String?
    
    
    
    comment: String?
    
    
    
    name: String
    
    
    
    resolved: Boolean?
    
    
    
    resolved6: Boolean?
    
    
}

class utm_network_interface_address extends playbook.task {
    hidden options: utm_network_interface_address_options

    `community.general.utm_network_interface_address`: utm_network_interface_address_options?

    function into(): utm_network_interface_address = this
        .toMap()
        .put("community.general.utm_network_interface_address", this.options)
        .toTyped(utm_network_interface_address)
}

//

class utm_network_interface_address_info_options {
    
    
    name: String
    
    
}

class utm_network_interface_address_info extends playbook.task {
    hidden options: utm_network_interface_address_info_options

    `community.general.utm_network_interface_address_info`: utm_network_interface_address_info_options?

    function into(): utm_network_interface_address_info = this
        .toMap()
        .put("community.general.utm_network_interface_address_info", this.options)
        .toTyped(utm_network_interface_address_info)
}

//

class utm_proxy_auth_profile_options {
    
    
    aaa: Listing<String>
    
    
    
    backend_mode: ("Basic"|"None")?
    
    
    
    backend_strip_basic_auth: Boolean?
    
    
    
    backend_user_prefix: String?
    
    
    
    backend_user_suffix: String?
    
    
    
    basic_prompt: String
    
    
    
    comment: String?
    
    
    
    frontend_cookie: String?
    
    
    
    frontend_cookie_secret: String?
    
    
    
    frontend_form: String?
    
    
    
    frontend_form_template: String?
    
    
    
    frontend_login: String?
    
    
    
    frontend_logout: String?
    
    
    
    frontend_mode: ("Basic"|"Form")?
    
    
    
    frontend_realm: String?
    
    
    
    frontend_session_allow_persistency: Boolean?
    
    
    
    frontend_session_lifetime: Int
    
    
    
    frontend_session_lifetime_limited: Boolean?
    
    
    
    frontend_session_lifetime_scope: ("days"|"hours"|"minutes")?
    
    
    
    frontend_session_timeout: Int
    
    
    
    frontend_session_timeout_enabled: Boolean?
    
    
    
    frontend_session_timeout_scope: ("days"|"hours"|"minutes")?
    
    
    
    logout_delegation_urls: Listing<String>?
    
    
    
    logout_mode: ("None"|"Delegation")?
    
    
    
    name: String
    
    
    
    redirect_to_requested_url: Boolean?
    
    
}

class utm_proxy_auth_profile extends playbook.task {
    hidden options: utm_proxy_auth_profile_options

    `community.general.utm_proxy_auth_profile`: utm_proxy_auth_profile_options?

    function into(): utm_proxy_auth_profile = this
        .toMap()
        .put("community.general.utm_proxy_auth_profile", this.options)
        .toTyped(utm_proxy_auth_profile)
}

//

class utm_proxy_exception_options {
    
    
    name: String
    
    
    
    op: ("AND"|"OR")?
    
    
    
    path: Listing<String>?
    
    
    
    skip_custom_threats_filters: Listing<String>?
    
    
    
    skip_threats_filter_categories: Listing<String>?
    
    
    
    skipav: Boolean?
    
    
    
    skipbadclients: Boolean?
    
    
    
    skipcookie: Boolean?
    
    
    
    skipform: Boolean?
    
    
    
    skipform_missingtoken: Boolean?
    
    
    
    skiphtmlrewrite: Boolean?
    
    
    
    skiptft: Boolean?
    
    
    
    skipurl: Boolean?
    
    
    
    source: Listing<String>?
    
    
    
    status: Boolean?
    
    
}

class utm_proxy_exception extends playbook.task {
    hidden options: utm_proxy_exception_options

    `community.general.utm_proxy_exception`: utm_proxy_exception_options?

    function into(): utm_proxy_exception = this
        .toMap()
        .put("community.general.utm_proxy_exception", this.options)
        .toTyped(utm_proxy_exception)
}

//

class utm_proxy_frontend_options {
    
    
    add_content_type_header: Boolean?
    
    
    
    address: String?
    
    
    
    allowed_networks: Listing<String>?
    
    
    
    certificate: String?
    
    
    
    comment: String?
    
    
    
    disable_compression: Boolean?
    
    
    
    domain: Listing<String>?
    
    
    
    exceptions: Listing<String>?
    
    
    
    htmlrewrite: Boolean?
    
    
    
    htmlrewrite_cookies: Boolean?
    
    
    
    implicitredirect: Boolean?
    
    
    
    lbmethod: (""|"bybusyness"|"bytraffic"|"byrequests")?
    
    
    
    locations: Listing<String>?
    
    
    
    name: String
    
    
    
    port: Int?
    
    
    
    preservehost: Boolean?
    
    
    
    profile: String?
    
    
    
    status: Boolean?
    
    
    
    type: ("http"|"https")?
    
    
    
    xheaders: Boolean?
    
    
}

class utm_proxy_frontend extends playbook.task {
    hidden options: utm_proxy_frontend_options

    `community.general.utm_proxy_frontend`: utm_proxy_frontend_options?

    function into(): utm_proxy_frontend = this
        .toMap()
        .put("community.general.utm_proxy_frontend", this.options)
        .toTyped(utm_proxy_frontend)
}

//

class utm_proxy_frontend_info_options {
    
    
    name: String
    
    
}

class utm_proxy_frontend_info extends playbook.task {
    hidden options: utm_proxy_frontend_info_options

    `community.general.utm_proxy_frontend_info`: utm_proxy_frontend_info_options?

    function into(): utm_proxy_frontend_info = this
        .toMap()
        .put("community.general.utm_proxy_frontend_info", this.options)
        .toTyped(utm_proxy_frontend_info)
}

//

class utm_proxy_location_options {
    
    
    access_control: ("0"|"1")?
    
    
    
    allowed_networks: Listing<String>?
    
    
    
    auth_profile: String?
    
    
    
    backend: Listing<String>?
    
    
    
    be_path: String?
    
    
    
    comment: String?
    
    
    
    denied_networks: Listing<String>?
    
    
    
    hot_standby: Boolean?
    
    
    
    name: String
    
    
    
    path: String?
    
    
    
    status: Boolean?
    
    
    
    stickysession_id: String?
    
    
    
    stickysession_status: Boolean?
    
    
    
    websocket_passthrough: Boolean?
    
    
}

class utm_proxy_location extends playbook.task {
    hidden options: utm_proxy_location_options

    `community.general.utm_proxy_location`: utm_proxy_location_options?

    function into(): utm_proxy_location = this
        .toMap()
        .put("community.general.utm_proxy_location", this.options)
        .toTyped(utm_proxy_location)
}

//

class utm_proxy_location_info_options {
    
    
    name: String
    
    
}

class utm_proxy_location_info extends playbook.task {
    hidden options: utm_proxy_location_info_options

    `community.general.utm_proxy_location_info`: utm_proxy_location_info_options?

    function into(): utm_proxy_location_info = this
        .toMap()
        .put("community.general.utm_proxy_location_info", this.options)
        .toTyped(utm_proxy_location_info)
}

//

class vdo_options {
    
    
    ackthreads: String?
    
    
    
    activated: Boolean?
    
    
    
    biothreads: String?
    
    
    
    blockmapcachesize: String?
    
    
    
    compression: ("disabled"|"enabled")?
    
    
    
    cputhreads: String?
    
    
    
    deduplication: ("disabled"|"enabled")?
    
    
    
    device: String?
    
    
    
    emulate512: Boolean?
    
    
    
    force: Boolean?
    
    
    
    growphysical: Boolean?
    
    
    
    indexmem: String?
    
    
    
    indexmode: ("dense"|"sparse")?
    
    
    
    logicalsize: String?
    
    
    
    logicalthreads: String?
    
    
    
    name: String
    
    
    
    physicalthreads: String?
    
    
    
    readcache: ("disabled"|"enabled")?
    
    
    
    readcachesize: String?
    
    
    
    running: Boolean?
    
    
    
    slabsize: String?
    
    
    
    state: ("absent"|"present")?
    
    
    
    writepolicy: ("async"|"auto"|"sync")?
    
    
}

class vdo extends playbook.task {
    hidden options: vdo_options

    `community.general.vdo`: vdo_options?

    function into(): vdo = this
        .toMap()
        .put("community.general.vdo", this.options)
        .toTyped(vdo)
}

//

class vertica_configuration_options {
    
    
    cluster: String?
    
    
    
    db: String?
    
    
    
    login_password: String?
    
    
    
    login_user: String?
    
    
    
    parameter: String
    
    
    
    port: String?
    
    
    
    value: String?
    
    
}

class vertica_configuration extends playbook.task {
    hidden options: vertica_configuration_options

    `community.general.vertica_configuration`: vertica_configuration_options?

    function into(): vertica_configuration = this
        .toMap()
        .put("community.general.vertica_configuration", this.options)
        .toTyped(vertica_configuration)
}

//

class vertica_info_options {
    
    
    cluster: String?
    
    
    
    db: String?
    
    
    
    login_password: String?
    
    
    
    login_user: String?
    
    
    
    port: String?
    
    
}

class vertica_info extends playbook.task {
    hidden options: vertica_info_options

    `community.general.vertica_info`: vertica_info_options?

    function into(): vertica_info = this
        .toMap()
        .put("community.general.vertica_info", this.options)
        .toTyped(vertica_info)
}

//

class vertica_role_options {
    
    
    assigned_roles: String?
    
    
    
    cluster: String?
    
    
    
    db: String?
    
    
    
    login_password: String?
    
    
    
    login_user: String?
    
    
    
    port: String?
    
    
    
    role: String
    
    
    
    state: ("present"|"absent")?
    
    
}

class vertica_role extends playbook.task {
    hidden options: vertica_role_options

    `community.general.vertica_role`: vertica_role_options?

    function into(): vertica_role = this
        .toMap()
        .put("community.general.vertica_role", this.options)
        .toTyped(vertica_role)
}

//

class vertica_schema_options {
    
    
    cluster: String?
    
    
    
    create_roles: String?
    
    
    
    db: String?
    
    
    
    login_password: String?
    
    
    
    login_user: String?
    
    
    
    owner: String?
    
    
    
    port: String?
    
    
    
    schema: String
    
    
    
    state: ("present"|"absent")?
    
    
    
    usage_roles: String?
    
    
}

class vertica_schema extends playbook.task {
    hidden options: vertica_schema_options

    `community.general.vertica_schema`: vertica_schema_options?

    function into(): vertica_schema = this
        .toMap()
        .put("community.general.vertica_schema", this.options)
        .toTyped(vertica_schema)
}

//

class vertica_user_options {
    
    
    cluster: String?
    
    
    
    db: String?
    
    
    
    expired: Boolean?
    
    
    
    ldap: Boolean?
    
    
    
    login_password: String?
    
    
    
    login_user: String?
    
    
    
    password: String?
    
    
    
    port: String?
    
    
    
    profile: String?
    
    
    
    resource_pool: String?
    
    
    
    roles: String?
    
    
    
    state: ("present"|"absent"|"locked")?
    
    
    
    user: String
    
    
}

class vertica_user extends playbook.task {
    hidden options: vertica_user_options

    `community.general.vertica_user`: vertica_user_options?

    function into(): vertica_user = this
        .toMap()
        .put("community.general.vertica_user", this.options)
        .toTyped(vertica_user)
}

//

class vexata_eg_options {
    
    
    ig: String?
    
    
    
    name: String
    
    
    
    pg: String?
    
    
    
    state: ("present"|"absent")?
    
    
    
    vg: String?
    
    
}

class vexata_eg extends playbook.task {
    hidden options: vexata_eg_options

    `community.general.vexata_eg`: vexata_eg_options?

    function into(): vexata_eg = this
        .toMap()
        .put("community.general.vexata_eg", this.options)
        .toTyped(vexata_eg)
}

//

class vexata_volume_options {
    
    
    name: String
    
    
    
    size: String?
    
    
    
    state: ("present"|"absent")?
    
    
}

class vexata_volume extends playbook.task {
    hidden options: vexata_volume_options

    `community.general.vexata_volume`: vexata_volume_options?

    function into(): vexata_volume = this
        .toMap()
        .put("community.general.vexata_volume", this.options)
        .toTyped(vexata_volume)
}

//

class vmadm_options {
    
    
    archive_on_delete: Boolean?
    
    
    
    autoboot: Boolean?
    
    
    
    boot: String?
    
    
    
    brand: ("joyent"|"joyent-minimal"|"lx"|"kvm"|"bhyve")?
    
    
    
    cpu_cap: Int?
    
    
    
    cpu_shares: Int?
    
    
    
    cpu_type: ("qemu64"|"host")?
    
    
    
    customer_metadata: String?
    
    
    
    delegate_dataset: Boolean?
    
    
    
    disk_driver: String?
    
    
    
    disks: Listing<String>?
    
    
    
    dns_domain: String?
    
    
    
    docker: Boolean?
    
    
    
    filesystems: Listing<String>?
    
    
    
    firewall_enabled: Boolean?
    
    
    
    force: Boolean?
    
    
    
    fs_allowed: String?
    
    
    
    hostname: String?
    
    
    
    image_uuid: String?
    
    
    
    indestructible_delegated: Boolean?
    
    
    
    indestructible_zoneroot: Boolean?
    
    
    
    internal_metadata: String?
    
    
    
    internal_metadata_namespace: String?
    
    
    
    kernel_version: String?
    
    
    
    limit_priv: String?
    
    
    
    maintain_resolvers: Boolean?
    
    
    
    max_locked_memory: Int?
    
    
    
    max_lwps: Int?
    
    
    
    max_physical_memory: Int?
    
    
    
    max_swap: Int?
    
    
    
    mdata_exec_timeout: Int?
    
    
    
    name: String?
    
    
    
    nic_driver: String?
    
    
    
    nics: Listing<String>?
    
    
    
    nowait: Boolean?
    
    
    
    qemu_extra_opts: String?
    
    
    
    qemu_opts: String?
    
    
    
    quota: Int?
    
    
    
    ram: Int?
    
    
    
    resolvers: Listing<String>?
    
    
    
    routes: String?
    
    
    
    spice_opts: String?
    
    
    
    spice_password: String?
    
    
    
    state: ("present"|"running"|"absent"|"deleted"|"stopped"|"created"|"restarted"|"rebooted")?
    
    
    
    tmpfs: Int?
    
    
    
    uuid: String?
    
    
    
    vcpus: Int?
    
    
    
    vga: String?
    
    
    
    virtio_txburst: Int?
    
    
    
    virtio_txtimer: Int?
    
    
    
    vnc_password: String?
    
    
    
    vnc_port: Int?
    
    
    
    zfs_data_compression: String?
    
    
    
    zfs_data_recsize: Int?
    
    
    
    zfs_filesystem_limit: Int?
    
    
    
    zfs_io_priority: Int?
    
    
    
    zfs_root_compression: String?
    
    
    
    zfs_root_recsize: Int?
    
    
    
    zfs_snapshot_limit: Int?
    
    
    
    zpool: String?
    
    
}

class vmadm extends playbook.task {
    hidden options: vmadm_options

    `community.general.vmadm`: vmadm_options?

    function into(): vmadm = this
        .toMap()
        .put("community.general.vmadm", this.options)
        .toTyped(vmadm)
}

//

class wakeonlan_options {
    
    
    broadcast: String?
    
    
    
    mac: String
    
    
    
    port: Int?
    
    
}

class wakeonlan extends playbook.task {
    hidden options: wakeonlan_options

    `community.general.wakeonlan`: wakeonlan_options?

    function into(): wakeonlan = this
        .toMap()
        .put("community.general.wakeonlan", this.options)
        .toTyped(wakeonlan)
}

//

class wdc_redfish_command_options {
    
    
    auth_token: String?
    
    
    
    baseuri: String?
    
    
    
    category: String
    
    
    
    command: Listing<String>
    
    
    
    ioms: Listing<String>?
    
    
    
    password: String?
    
    
    
    resource_id: String?
    
    
    
    timeout: Int?
    
    
    
    update_creds: String?
    
    
    
    update_image_uri: String?
    
    
    
    username: String?
    
    
}

class wdc_redfish_command extends playbook.task {
    hidden options: wdc_redfish_command_options

    `community.general.wdc_redfish_command`: wdc_redfish_command_options?

    function into(): wdc_redfish_command = this
        .toMap()
        .put("community.general.wdc_redfish_command", this.options)
        .toTyped(wdc_redfish_command)
}

//

class wdc_redfish_info_options {
    
    
    auth_token: String?
    
    
    
    baseuri: String?
    
    
    
    category: String
    
    
    
    command: Listing<String>
    
    
    
    ioms: Listing<String>?
    
    
    
    password: String?
    
    
    
    timeout: Int?
    
    
    
    username: String?
    
    
}

class wdc_redfish_info extends playbook.task {
    hidden options: wdc_redfish_info_options

    `community.general.wdc_redfish_info`: wdc_redfish_info_options?

    function into(): wdc_redfish_info = this
        .toMap()
        .put("community.general.wdc_redfish_info", this.options)
        .toTyped(wdc_redfish_info)
}

//

class webfaction_app_options {
    
    
    autostart: Boolean?
    
    
    
    extra_info: String?
    
    
    
    login_name: String
    
    
    
    login_password: String
    
    
    
    machine: String?
    
    
    
    name: String
    
    
    
    port_open: Boolean?
    
    
    
    state: ("present"|"absent")?
    
    
    
    type: String
    
    
}

class webfaction_app extends playbook.task {
    hidden options: webfaction_app_options

    `community.general.webfaction_app`: webfaction_app_options?

    function into(): webfaction_app = this
        .toMap()
        .put("community.general.webfaction_app", this.options)
        .toTyped(webfaction_app)
}

//

class webfaction_db_options {
    
    
    login_name: String
    
    
    
    login_password: String
    
    
    
    machine: String?
    
    
    
    name: String
    
    
    
    password: String?
    
    
    
    state: ("present"|"absent")?
    
    
    
    type: ("mysql"|"postgresql")
    
    
}

class webfaction_db extends playbook.task {
    hidden options: webfaction_db_options

    `community.general.webfaction_db`: webfaction_db_options?

    function into(): webfaction_db = this
        .toMap()
        .put("community.general.webfaction_db", this.options)
        .toTyped(webfaction_db)
}

//

class webfaction_domain_options {
    
    
    login_name: String
    
    
    
    login_password: String
    
    
    
    name: String
    
    
    
    state: ("present"|"absent")?
    
    
    
    subdomains: Listing<String>?
    
    
}

class webfaction_domain extends playbook.task {
    hidden options: webfaction_domain_options

    `community.general.webfaction_domain`: webfaction_domain_options?

    function into(): webfaction_domain = this
        .toMap()
        .put("community.general.webfaction_domain", this.options)
        .toTyped(webfaction_domain)
}

//

class webfaction_mailbox_options {
    
    
    login_name: String
    
    
    
    login_password: String
    
    
    
    mailbox_name: String
    
    
    
    mailbox_password: String
    
    
    
    state: ("present"|"absent")?
    
    
}

class webfaction_mailbox extends playbook.task {
    hidden options: webfaction_mailbox_options

    `community.general.webfaction_mailbox`: webfaction_mailbox_options?

    function into(): webfaction_mailbox = this
        .toMap()
        .put("community.general.webfaction_mailbox", this.options)
        .toTyped(webfaction_mailbox)
}

//

class xattr_options {
    
    
    follow: Boolean?
    
    
    
    key: String?
    
    
    
    namespace: String?
    
    
    
    path: String
    
    
    
    state: ("absent"|"all"|"keys"|"present"|"read")?
    
    
    
    value: String?
    
    
}

class xattr extends playbook.task {
    hidden options: xattr_options

    `community.general.xattr`: xattr_options?

    function into(): xattr = this
        .toMap()
        .put("community.general.xattr", this.options)
        .toTyped(xattr)
}

//

class xbps_options {
    
    
    name: Listing<String>?
    
    
    
    recurse: Boolean?
    
    
    
    state: ("present"|"absent"|"latest"|"installed"|"removed")?
    
    
    
    update_cache: Boolean?
    
    
    
    upgrade: Boolean?
    
    
    
    upgrade_xbps: Boolean?
    
    
}

class xbps extends playbook.task {
    hidden options: xbps_options

    `community.general.xbps`: xbps_options?

    function into(): xbps = this
        .toMap()
        .put("community.general.xbps", this.options)
        .toTyped(xbps)
}

//

class xcc_redfish_command_options {
    
    
    auth_token: String?
    
    
    
    baseuri: String
    
    
    
    category: String
    
    
    
    command: Listing<String>
    
    
    
    password: String?
    
    
    
    request_body: String?
    
    
    
    resource_id: String?
    
    
    
    resource_uri: String?
    
    
    
    timeout: Int?
    
    
    
    username: String?
    
    
    
    virtual_media: String?
    
    
}

class xcc_redfish_command extends playbook.task {
    hidden options: xcc_redfish_command_options

    `community.general.xcc_redfish_command`: xcc_redfish_command_options?

    function into(): xcc_redfish_command = this
        .toMap()
        .put("community.general.xcc_redfish_command", this.options)
        .toTyped(xcc_redfish_command)
}

//

class xenserver_facts_options {
    
}

class xenserver_facts extends playbook.task {
    hidden options: xenserver_facts_options

    `community.general.xenserver_facts`: xenserver_facts_options?

    function into(): xenserver_facts = this
        .toMap()
        .put("community.general.xenserver_facts", this.options)
        .toTyped(xenserver_facts)
}

//

class xenserver_guest_options {
    
    
    cdrom: String?
    
    
    
    custom_params: Listing<String>?
    
    
    
    disks: Listing<String>?
    
    
    
    folder: String?
    
    
    
    force: Boolean?
    
    
    
    hardware: String?
    
    
    
    home_server: String?
    
    
    
    is_template: Boolean?
    
    
    
    linked_clone: Boolean?
    
    
    
    name: String?
    
    
    
    name_desc: String?
    
    
    
    networks: Listing<String>?
    
    
    
    state: ("present"|"absent"|"poweredon")?
    
    
    
    state_change_timeout: Int?
    
    
    
    template: String?
    
    
    
    template_uuid: String?
    
    
    
    uuid: String?
    
    
    
    wait_for_ip_address: Boolean?
    
    
}

class xenserver_guest extends playbook.task {
    hidden options: xenserver_guest_options

    `community.general.xenserver_guest`: xenserver_guest_options?

    function into(): xenserver_guest = this
        .toMap()
        .put("community.general.xenserver_guest", this.options)
        .toTyped(xenserver_guest)
}

//

class xenserver_guest_info_options {
    
    
    name: String?
    
    
    
    uuid: String?
    
    
}

class xenserver_guest_info extends playbook.task {
    hidden options: xenserver_guest_info_options

    `community.general.xenserver_guest_info`: xenserver_guest_info_options?

    function into(): xenserver_guest_info = this
        .toMap()
        .put("community.general.xenserver_guest_info", this.options)
        .toTyped(xenserver_guest_info)
}

//

class xenserver_guest_powerstate_options {
    
    
    name: String?
    
    
    
    state: ("powered-on"|"powered-off"|"restarted"|"shutdown-guest"|"reboot-guest"|"suspended"|"present")?
    
    
    
    state_change_timeout: Int?
    
    
    
    uuid: String?
    
    
    
    wait_for_ip_address: Boolean?
    
    
}

class xenserver_guest_powerstate extends playbook.task {
    hidden options: xenserver_guest_powerstate_options

    `community.general.xenserver_guest_powerstate`: xenserver_guest_powerstate_options?

    function into(): xenserver_guest_powerstate = this
        .toMap()
        .put("community.general.xenserver_guest_powerstate", this.options)
        .toTyped(xenserver_guest_powerstate)
}

//

class xfconf_options {
    
    
    channel: String
    
    
    
    force_array: Boolean?
    
    
    
    property: String
    
    
    
    state: ("present"|"absent")?
    
    
    
    value: Listing<String>?
    
    
    
    value_type: Listing<("string"|"int"|"double"|"bool"|"uint"|"uchar"|"char"|"uint64"|"int64"|"float")>?
    
    
}

class xfconf extends playbook.task {
    hidden options: xfconf_options

    `community.general.xfconf`: xfconf_options?

    function into(): xfconf = this
        .toMap()
        .put("community.general.xfconf", this.options)
        .toTyped(xfconf)
}

//

class xfconf_info_options {
    
    
    channel: String?
    
    
    
    property: String?
    
    
}

class xfconf_info extends playbook.task {
    hidden options: xfconf_info_options

    `community.general.xfconf_info`: xfconf_info_options?

    function into(): xfconf_info = this
        .toMap()
        .put("community.general.xfconf_info", this.options)
        .toTyped(xfconf_info)
}

//

class xfs_quota_options {
    
    
    bhard: String?
    
    
    
    bsoft: String?
    
    
    
    ihard: Int?
    
    
    
    isoft: Int?
    
    
    
    mountpoint: String
    
    
    
    name: String?
    
    
    
    rtbhard: String?
    
    
    
    rtbsoft: String?
    
    
    
    state: ("present"|"absent")?
    
    
    
    type: ("user"|"group"|"project")
    
    
}

class xfs_quota extends playbook.task {
    hidden options: xfs_quota_options

    `community.general.xfs_quota`: xfs_quota_options?

    function into(): xfs_quota = this
        .toMap()
        .put("community.general.xfs_quota", this.options)
        .toTyped(xfs_quota)
}

//

class xml_options {
    
    
    add_children: Listing<String>?
    
    
    
    attribute: String?
    
    
    
    backup: Boolean?
    
    
    
    content: ("attribute"|"text")?
    
    
    
    count: Boolean?
    
    
    
    input_type: ("xml"|"yaml")?
    
    
    
    insertafter: Boolean?
    
    
    
    insertbefore: Boolean?
    
    
    
    namespaces: String?
    
    
    
    path: String?
    
    
    
    pretty_print: Boolean?
    
    
    
    print_match: Boolean?
    
    
    
    set_children: Listing<String>?
    
    
    
    state: ("absent"|"present")?
    
    
    
    strip_cdata_tags: Boolean?
    
    
    
    value: String?
    
    
    
    xmlstring: String?
    
    
    
    xpath: String?
    
    
}

class xml extends playbook.task {
    hidden options: xml_options

    `community.general.xml`: xml_options?

    function into(): xml = this
        .toMap()
        .put("community.general.xml", this.options)
        .toTyped(xml)
}

//

class yarn_options {
    
    
    executable: String?
    
    
    
    global: Boolean?
    
    
    
    ignore_scripts: Boolean?
    
    
    
    name: String?
    
    
    
    path: String?
    
    
    
    production: Boolean?
    
    
    
    registry: String?
    
    
    
    state: ("present"|"absent"|"latest")?
    
    
    
    version: String?
    
    
}

class yarn extends playbook.task {
    hidden options: yarn_options

    `community.general.yarn`: yarn_options?

    function into(): yarn = this
        .toMap()
        .put("community.general.yarn", this.options)
        .toTyped(yarn)
}

//

class yum_versionlock_options {
    
    
    name: Listing<String>
    
    
    
    state: ("absent"|"present")?
    
    
}

class yum_versionlock extends playbook.task {
    hidden options: yum_versionlock_options

    `community.general.yum_versionlock`: yum_versionlock_options?

    function into(): yum_versionlock = this
        .toMap()
        .put("community.general.yum_versionlock", this.options)
        .toTyped(yum_versionlock)
}

//

class zfs_options {
    
    
    extra_zfs_properties: String?
    
    
    
    name: String
    
    
    
    origin: String?
    
    
    
    state: ("absent"|"present")
    
    
}

class zfs extends playbook.task {
    hidden options: zfs_options

    `community.general.zfs`: zfs_options?

    function into(): zfs = this
        .toMap()
        .put("community.general.zfs", this.options)
        .toTyped(zfs)
}

//

class zfs_delegate_admin_options {
    
    
    descendents: Boolean?
    
    
    
    everyone: Boolean?
    
    
    
    groups: Listing<String>?
    
    
    
    `local`: Boolean?
    
    
    
    name: String
    
    
    
    permissions: Listing<String>?
    
    
    
    recursive: Boolean?
    
    
    
    state: ("absent"|"present")?
    
    
    
    users: Listing<String>?
    
    
}

class zfs_delegate_admin extends playbook.task {
    hidden options: zfs_delegate_admin_options

    `community.general.zfs_delegate_admin`: zfs_delegate_admin_options?

    function into(): zfs_delegate_admin = this
        .toMap()
        .put("community.general.zfs_delegate_admin", this.options)
        .toTyped(zfs_delegate_admin)
}

//

class zfs_facts_options {
    
    
    depth: Int?
    
    
    
    name: String
    
    
    
    parsable: Boolean?
    
    
    
    properties: String?
    
    
    
    recurse: Boolean?
    
    
    
    type: ("all"|"filesystem"|"volume"|"snapshot"|"bookmark")?
    
    
}

class zfs_facts extends playbook.task {
    hidden options: zfs_facts_options

    `community.general.zfs_facts`: zfs_facts_options?

    function into(): zfs_facts = this
        .toMap()
        .put("community.general.zfs_facts", this.options)
        .toTyped(zfs_facts)
}

//

class znode_options {
    
    
    auth_credential: String?
    
    
    
    auth_scheme: ("digest"|"sasl")?
    
    
    
    hosts: String
    
    
    
    name: String
    
    
    
    op: ("get"|"wait"|"list")?
    
    
    
    recursive: Boolean?
    
    
    
    state: ("present"|"absent")?
    
    
    
    timeout: Int?
    
    
    
    use_tls: Boolean?
    
    
    
    value: String?
    
    
}

class znode extends playbook.task {
    hidden options: znode_options

    `community.general.znode`: znode_options?

    function into(): znode = this
        .toMap()
        .put("community.general.znode", this.options)
        .toTyped(znode)
}

//

class zpool_facts_options {
    
    
    name: String?
    
    
    
    parsable: Boolean?
    
    
    
    properties: String?
    
    
}

class zpool_facts extends playbook.task {
    hidden options: zpool_facts_options

    `community.general.zpool_facts`: zpool_facts_options?

    function into(): zpool_facts = this
        .toMap()
        .put("community.general.zpool_facts", this.options)
        .toTyped(zpool_facts)
}

//

class zypper_options {
    
    
    allow_vendor_change: Boolean?
    
    
    
    clean_deps: Boolean?
    
    
    
    disable_gpg_check: Boolean?
    
    
    
    disable_recommends: Boolean?
    
    
    
    extra_args: String?
    
    
    
    extra_args_precommand: String?
    
    
    
    force: Boolean?
    
    
    
    force_resolution: Boolean?
    
    
    
    name: Listing<String>
    
    
    
    oldpackage: Boolean?
    
    
    
    replacefiles: Boolean?
    
    
    
    state: ("present"|"latest"|"absent"|"dist-upgrade"|"installed"|"removed")?
    
    
    
    type: ("package"|"patch"|"pattern"|"product"|"srcpackage"|"application")?
    
    
    
    update_cache: Boolean?
    
    
}

class zypper extends playbook.task {
    hidden options: zypper_options

    `community.general.zypper`: zypper_options?

    function into(): zypper = this
        .toMap()
        .put("community.general.zypper", this.options)
        .toTyped(zypper)
}

//

class zypper_repository_options {
    
    
    auto_import_keys: Boolean?
    
    
    
    autorefresh: Boolean?
    
    
    
    description: String?
    
    
    
    disable_gpg_check: Boolean?
    
    
    
    enabled: Boolean?
    
    
    
    name: String?
    
    
    
    overwrite_multiple: Boolean?
    
    
    
    priority: Int?
    
    
    
    repo: String?
    
    
    
    runrefresh: Boolean?
    
    
    
    state: ("absent"|"present")?
    
    
}

class zypper_repository extends playbook.task {
    hidden options: zypper_repository_options

    `community.general.zypper_repository`: zypper_repository_options?

    function into(): zypper_repository = this
        .toMap()
        .put("community.general.zypper_repository", this.options)
        .toTyped(zypper_repository)
}
