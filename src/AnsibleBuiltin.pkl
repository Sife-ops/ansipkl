module AnsibleBuiltin

import "./Playbook.pkl"

/// Add a host (and alternatively a group) to the ansible-playbook in-memory inventory
/// Use variables to create new hosts and groups in inventory for use in later plays of the same playbook.
/// Takes variables so you can define the new hosts more fully.
/// This module is also supported for Windows targets.
class AddHostOptions {
    /// The groups to add the hostname to.
    groups: Listing<String>?
    /// The hostname/ip of the host to add to the inventory, can include a colon and a port number.
    name: String
}

/// Task class for add_host
class AddHostTask extends Playbook.Task {

    `ansible.builtin.add_host`: Dynamic

    function GetModuleName(): String = "ansible.builtin.add_host"
    function GetModuleOptions(): Dynamic = this.`ansible.builtin.add_host`
}

/// TaskBuilder class for add_host
class AddHost extends Playbook.TaskBuilder {
    /// Options for ansible.builtin.add_host
    options: AddHostOptions?

    function Task(): AddHostTask = this
        .toMap()
        .put("ansible.builtin.add_host", (this.options.ifNonNull((it) -> it.toDynamic()) ?? new Dynamic {})
            |> (this.options_mixin ?? new Mixin {}))
        .toTyped(AddHostTask)
}

/// Manages apt-packages
/// Manages I(apt) packages (such as for Debian/Ubuntu).
class AptOptions {
    /// Allows changing the version of a package which is on the apt hold list
    allow_change_held_packages: Boolean?
    /// Corresponds to the C(--allow-downgrades) option for I(apt).
    /// This option enables the named package and version to replace an already installed higher version of that package.
    /// Note that setting O(allow_downgrade=true) can make this module behave in a non-idempotent way.
    /// (The task could end up with a set of packages that does not match the complete list of specified packages to install).
    /// O(allow_downgrade) is only supported by C(apt) and will be ignored if C(aptitude) is detected or specified.
    allow_downgrade: Boolean?
    /// Ignore if packages cannot be authenticated. This is useful for bootstrapping environments that manage their own apt-key setup.
    /// O(allow_unauthenticated) is only supported with O(state): V(install)/V(present)
    allow_unauthenticated: Boolean?
    /// If V(true), cleans the local repository of retrieved package files that can no longer be downloaded.
    autoclean: Boolean?
    /// If V(true), remove unused dependency packages for all module states except V(build-dep). It can also be used as the only option.
    /// Previous to version 2.4, autoclean was also an alias for autoremove, now it is its own separate command. See documentation for further information.
    autoremove: Boolean?
    /// Update the apt cache if it is older than the O(cache_valid_time). This option is set in seconds.
    /// As of Ansible 2.4, if explicitly set, this sets O(update_cache=yes).
    cache_valid_time: Int?
    /// Run the equivalent of C(apt-get clean) to clear out the local repository of retrieved package files. It removes everything but the lock file from /var/cache/apt/archives/ and /var/cache/apt/archives/partial/.
    /// Can be run as part of the package installation (clean runs before install) or as a separate step.
    clean: Boolean?
    /// Path to a .deb package on the remote machine.
    /// If :// in the path, ansible will attempt to download deb before installing. (Version added 2.1)
    /// Requires the C(xz-utils) package to extract the control file of the deb package to install.
    deb: String?
    /// Corresponds to the C(-t) option for I(apt) and sets pin priorities
    default_release: String?
    /// Add dpkg options to apt command. Defaults to '-o "Dpkg::Options::=--force-confdef" -o "Dpkg::Options::=--force-confold"'
    /// Options should be supplied as comma separated list
    dpkg_options: String?
    /// Corresponds to the C(--no-remove) option for C(apt).
    /// If V(true), it is ensured that no packages will be removed or the task will fail.
    /// O(fail_on_autoremove) is only supported with O(state) except V(absent).
    /// O(fail_on_autoremove) is only supported by C(apt) and will be ignored if C(aptitude) is detected or specified.
    fail_on_autoremove: Boolean?
    /// Corresponds to the C(--force-yes) to I(apt-get) and implies O(allow_unauthenticated=yes) and O(allow_downgrade=yes)
    /// This option will disable checking both the packages' signatures and the certificates of the web servers they are downloaded from.
    /// This option *is not* the equivalent of passing the C(-f) flag to I(apt-get) on the command line
    /// **This is a destructive operation with the potential to destroy your system, and it should almost never be used.** Please also see C(man apt-get) for more information.
    force: Boolean?
    /// Force usage of apt-get instead of aptitude
    force_apt_get: Boolean?
    /// Corresponds to the C(--no-install-recommends) option for I(apt). V(true) installs recommended packages.  V(false) does not install recommended packages. By default, Ansible will use the same defaults as the operating system. Suggested packages are never installed.
    install_recommends: Boolean?
    /// How many seconds will this action wait to acquire a lock on the apt db.
    /// Sometimes there is a transitory lock and this will retry at least until timeout is hit.
    lock_timeout: Int?
    /// A list of package names, like V(foo), or package specifier with version, like V(foo=1.0) or V(foo>=1.0). Name wildcards (fnmatch) like V(apt*) and version wildcards like V(foo=1.0*) are also supported.
    name: Listing<String>?
    /// Only upgrade a package if it is already installed.
    only_upgrade: Boolean?
    /// Force the exit code of /usr/sbin/policy-rc.d.
    /// For example, if I(policy_rc_d=101) the installed package will not trigger a service start.
    /// If /usr/sbin/policy-rc.d already exists, it is backed up and restored after the package installation.
    /// If V(null), the /usr/sbin/policy-rc.d isn't created/changed.
    policy_rc_d: Int?
    /// Will force purging of configuration files if O(state=absent) or O(autoremove=yes).
    purge: Boolean?
    /// Indicates the desired package state. V(latest) ensures that the latest version is installed. V(build-dep) ensures the package build dependencies are installed. V(fixed) attempt to correct a system with broken dependencies in place.
    state: ("absent"|"build-dep"|"latest"|"present"|"fixed")?
    /// Run the equivalent of C(apt-get update) before the operation. Can be run as part of the package installation or as a separate step.
    /// Default is not to update the cache.
    update_cache: Boolean?
    /// Amount of retries if the cache update fails. Also see O(update_cache_retry_max_delay).
    update_cache_retries: Int?
    /// Use an exponential backoff delay for each retry (see O(update_cache_retries)) up to this max delay in seconds.
    update_cache_retry_max_delay: Int?
    /// If yes or safe, performs an aptitude safe-upgrade.
    /// If full, performs an aptitude full-upgrade.
    /// If dist, performs an apt-get dist-upgrade.
    /// Note: This does not upgrade a specific package, use state=latest for that.
    /// Note: Since 2.4, apt-get is used as a fall-back if aptitude is not present.
    upgrade: ("dist"|"full"|"no"|"safe"|"yes")?
}

/// Task class for apt
class AptTask extends Playbook.Task {

    `ansible.builtin.apt`: Dynamic

    function GetModuleName(): String = "ansible.builtin.apt"
    function GetModuleOptions(): Dynamic = this.`ansible.builtin.apt`
}

/// TaskBuilder class for apt
class Apt extends Playbook.TaskBuilder {
    /// Options for ansible.builtin.apt
    options: AptOptions?

    function Task(): AptTask = this
        .toMap()
        .put("ansible.builtin.apt", (this.options.ifNonNull((it) -> it.toDynamic()) ?? new Dynamic {})
            |> (this.options_mixin ?? new Mixin {}))
        .toTyped(AptTask)
}

/// Add or remove an apt key
/// Add or remove an I(apt) key, optionally downloading it.
class AptKeyOptions {
    /// The keyfile contents to add to the keyring.
    data: String?
    /// The path to a keyfile on the remote server to add to the keyring.
    file: String?
    /// The identifier of the key.
    /// Including this allows check mode to correctly report the changed state.
    /// If specifying a subkey's id be aware that apt-key does not understand how to remove keys via a subkey id.  Specify the primary key's id instead.
    /// This parameter is required when O(state) is set to V(absent).
    id: String?
    /// The full path to specific keyring file in C(/etc/apt/trusted.gpg.d/).
    keyring: String?
    /// The keyserver to retrieve key from.
    keyserver: String?
    /// Ensures that the key is present (added) or absent (revoked).
    state: ("absent"|"present")?
    /// The URL to retrieve key from.
    url: String?
    /// If V(false), SSL certificates for the target url will not be validated. This should only be used on personally controlled sites using self-signed certificates.
    validate_certs: Boolean?
}

/// Task class for apt_key
class AptKeyTask extends Playbook.Task {

    `ansible.builtin.apt_key`: Dynamic

    function GetModuleName(): String = "ansible.builtin.apt_key"
    function GetModuleOptions(): Dynamic = this.`ansible.builtin.apt_key`
}

/// TaskBuilder class for apt_key
class AptKey extends Playbook.TaskBuilder {
    /// Options for ansible.builtin.apt_key
    options: AptKeyOptions?

    function Task(): AptKeyTask = this
        .toMap()
        .put("ansible.builtin.apt_key", (this.options.ifNonNull((it) -> it.toDynamic()) ?? new Dynamic {})
            |> (this.options_mixin ?? new Mixin {}))
        .toTyped(AptKeyTask)
}

/// Add and remove APT repositories
/// Add or remove an APT repositories in Ubuntu and Debian.
class AptRepositoryOptions {
    /// Override the distribution codename to use for PPA repositories. Should usually only be set when working with a PPA on a non-Ubuntu target (for example, Debian or Mint).
    codename: String?
    /// Sets the name of the source list file in sources.list.d. Defaults to a file name based on the repository source url. The .list extension will be automatically added.
    filename: String?
    /// Whether to automatically try to install the Python apt library or not, if it is not already installed. Without this library, the module does not work.
    /// Runs C(apt-get install python-apt) for Python 2, and C(apt-get install python3-apt) for Python 3.
    /// Only works with the system Python 2 or Python 3. If you are using a Python on the remote that is not the system Python, set O(install_python_apt=false) and ensure that the Python apt library for your Python version is installed some other way.
    install_python_apt: Boolean?
    /// The octal mode for newly created files in sources.list.d.
    /// Default is what system uses (probably 0644).
    mode: String?
    /// A source string for the repository.
    repo: String
    /// A source string state.
    state: ("absent"|"present")?
    /// Run the equivalent of C(apt-get update) when a change occurs.  Cache updates are run after making changes.
    update_cache: Boolean?
    /// Amount of retries if the cache update fails. Also see O(update_cache_retry_max_delay).
    update_cache_retries: Int?
    /// Use an exponential backoff delay for each retry (see O(update_cache_retries)) up to this max delay in seconds.
    update_cache_retry_max_delay: Int?
    /// If V(false), SSL certificates for the target repo will not be validated. This should only be used on personally controlled sites using self-signed certificates.
    validate_certs: Boolean?
}

/// Task class for apt_repository
class AptRepositoryTask extends Playbook.Task {

    `ansible.builtin.apt_repository`: Dynamic

    function GetModuleName(): String = "ansible.builtin.apt_repository"
    function GetModuleOptions(): Dynamic = this.`ansible.builtin.apt_repository`
}

/// TaskBuilder class for apt_repository
class AptRepository extends Playbook.TaskBuilder {
    /// Options for ansible.builtin.apt_repository
    options: AptRepositoryOptions?

    function Task(): AptRepositoryTask = this
        .toMap()
        .put("ansible.builtin.apt_repository", (this.options.ifNonNull((it) -> it.toDynamic()) ?? new Dynamic {})
            |> (this.options_mixin ?? new Mixin {}))
        .toTyped(AptRepositoryTask)
}

/// Assemble configuration files from fragments
/// Assembles a configuration file from fragments.
/// Often a particular program will take a single configuration file and does not support a C(conf.d) style structure where it is easy to build up the configuration from multiple sources. M(ansible.builtin.assemble) will take a directory of files that can be local or have already been transferred to the system, and concatenate them together to produce a destination file.
/// Files are assembled in string sorting order.
/// Puppet calls this idea I(fragments).
class AssembleOptions {
    /// Create a backup file (if V(true)), including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly.
    backup: Boolean?
    /// A delimiter to separate the file contents.
    delimiter: String?
    /// A file to create using the concatenation of all of the source files.
    dest: String
    /// A boolean that controls if files that start with a '.' will be included or not.
    ignore_hidden: Boolean?
    /// Assemble files only if the given regular expression matches the filename.
    /// If not set, all files are assembled.
    /// Every V(\\) (backslash) must be escaped as V(\\\\) to comply to YAML syntax.
    /// Uses L(Python regular expressions,https://docs.python.org/3/library/re.html).
    regexp: String?
    /// If V(false), it will search for src at originating/master machine.
    /// If V(true), it will go to the remote/target machine for the src.
    remote_src: Boolean?
    /// An already existing directory full of source files.
    src: String
    /// The validation command to run before copying into place.
    /// The path to the file to validate is passed in via '%s' which must be present as in the sshd example below.
    /// The command is passed securely so shell features like expansion and pipes won't work.
    validate: String?
}

/// Task class for assemble
class AssembleTask extends Playbook.Task {

    `ansible.builtin.assemble`: Dynamic

    function GetModuleName(): String = "ansible.builtin.assemble"
    function GetModuleOptions(): Dynamic = this.`ansible.builtin.assemble`
}

/// TaskBuilder class for assemble
class Assemble extends Playbook.TaskBuilder {
    /// Options for ansible.builtin.assemble
    options: AssembleOptions?

    function Task(): AssembleTask = this
        .toMap()
        .put("ansible.builtin.assemble", (this.options.ifNonNull((it) -> it.toDynamic()) ?? new Dynamic {})
            |> (this.options_mixin ?? new Mixin {}))
        .toTyped(AssembleTask)
}

/// Asserts given expressions are true
/// This module asserts that given expressions are true with an optional custom message.
/// This module is also supported for Windows targets.
class AssertOptions {
    /// The customized message used for a failing assertion.
    /// This argument was called 'msg' before Ansible 2.7, now it is renamed to 'fail_msg' with alias 'msg'.
    fail_msg: String?
    /// Set this to V(true) to avoid verbose output.
    quiet: Boolean?
    /// The customized message used for a successful assertion.
    success_msg: String?
    /// A list of string expressions of the same form that can be passed to the 'when' statement.
    that: Listing<String>
}

/// Task class for assert
class AssertTask extends Playbook.Task {

    `ansible.builtin.assert`: Dynamic

    function GetModuleName(): String = "ansible.builtin.assert"
    function GetModuleOptions(): Dynamic = this.`ansible.builtin.assert`
}

/// TaskBuilder class for assert
class Assert extends Playbook.TaskBuilder {
    /// Options for ansible.builtin.assert
    options: AssertOptions?

    function Task(): AssertTask = this
        .toMap()
        .put("ansible.builtin.assert", (this.options.ifNonNull((it) -> it.toDynamic()) ?? new Dynamic {})
            |> (this.options_mixin ?? new Mixin {}))
        .toTyped(AssertTask)
}

/// Obtain status of asynchronous task
/// This module gets the status of an asynchronous task.
/// This module is also supported for Windows targets.
class AsyncStatusOptions {
    /// Job or task identifier
    jid: String
    /// If V(status), obtain the status.
    /// If V(cleanup), clean up the async job cache (by default in C(~/.ansible_async/)) for the specified job O(jid), without waiting for it to finish.
    mode: ("cleanup"|"status")?
}

/// Task class for async_status
class AsyncStatusTask extends Playbook.Task {

    `ansible.builtin.async_status`: Dynamic

    function GetModuleName(): String = "ansible.builtin.async_status"
    function GetModuleOptions(): Dynamic = this.`ansible.builtin.async_status`
}

/// TaskBuilder class for async_status
class AsyncStatus extends Playbook.TaskBuilder {
    /// Options for ansible.builtin.async_status
    options: AsyncStatusOptions?

    function Task(): AsyncStatusTask = this
        .toMap()
        .put("ansible.builtin.async_status", (this.options.ifNonNull((it) -> it.toDynamic()) ?? new Dynamic {})
            |> (this.options_mixin ?? new Mixin {}))
        .toTyped(AsyncStatusTask)
}

/// Insert/update/remove a text block surrounded by marker lines
/// This module will insert/update/remove a block of multi-line text surrounded by customizable marker lines.
class BlockinfileOptions {
    /// Append a blank line to the inserted block, if this does not appear at the end of the file.
    /// Note that this attribute is not considered when C(state) is set to C(absent)
    append_newline: Boolean?
    /// Create a backup file including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly.
    backup: Boolean?
    /// The text to insert inside the marker lines.
    /// If it is missing or an empty string, the block will be removed as if O(state) were specified to V(absent).
    block: String?
    /// Create a new file if it does not exist.
    create: Boolean?
    /// If specified and no begin/ending O(marker) lines are found, the block will be inserted after the last match of specified regular expression.
    /// A special value is available; V(EOF) for inserting the block at the end of the file.
    /// If specified regular expression has no matches, V(EOF) will be used instead.
    /// The presence of the multiline flag (?m) in the regular expression controls whether the match is done line by line or with multiple lines. This behaviour was added in ansible-core 2.14.
    insertafter: ("EOF"|"*regex*")?
    /// If specified and no begin/ending O(marker) lines are found, the block will be inserted before the last match of specified regular expression.
    /// A special value is available; V(BOF) for inserting the block at the beginning of the file.
    /// If specified regular expression has no matches, the block will be inserted at the end of the file.
    /// The presence of the multiline flag (?m) in the regular expression controls whether the match is done line by line or with multiple lines. This behaviour was added in ansible-core 2.14.
    insertbefore: ("BOF"|"*regex*")?
    /// The marker line template.
    /// C({mark}) will be replaced with the values in O(marker_begin) (default="BEGIN") and O(marker_end) (default="END").
    /// Using a custom marker without the C({mark}) variable may result in the block being repeatedly inserted on subsequent playbook runs.
    /// Multi-line markers are not supported and will result in the block being repeatedly inserted on subsequent playbook runs.
    /// A newline is automatically appended by the module to O(marker_begin) and O(marker_end).
    marker: String?
    /// This will be inserted at C({mark}) in the opening ansible block O(marker).
    marker_begin: String?
    /// This will be inserted at C({mark}) in the closing ansible block O(marker).
    marker_end: String?
    /// The file to modify.
    /// Before Ansible 2.3 this option was only usable as O(dest), O(destfile) and O(name).
    path: String
    /// Prepend a blank line to the inserted block, if this does not appear at the beginning of the file.
    /// Note that this attribute is not considered when C(state) is set to C(absent)
    prepend_newline: Boolean?
    /// Whether the block should be there or not.
    state: ("absent"|"present")?
}

/// Task class for blockinfile
class BlockinfileTask extends Playbook.Task {

    `ansible.builtin.blockinfile`: Dynamic

    function GetModuleName(): String = "ansible.builtin.blockinfile"
    function GetModuleOptions(): Dynamic = this.`ansible.builtin.blockinfile`
}

/// TaskBuilder class for blockinfile
class Blockinfile extends Playbook.TaskBuilder {
    /// Options for ansible.builtin.blockinfile
    options: BlockinfileOptions?

    function Task(): BlockinfileTask = this
        .toMap()
        .put("ansible.builtin.blockinfile", (this.options.ifNonNull((it) -> it.toDynamic()) ?? new Dynamic {})
            |> (this.options_mixin ?? new Mixin {}))
        .toTyped(BlockinfileTask)
}

/// Execute commands on targets
/// The M(ansible.builtin.command) module takes the command name followed by a list of space-delimited arguments.
/// The given command will be executed on all selected nodes.
/// The command(s) will not be processed through the shell, so variables like C($HOSTNAME) and operations like C("*"), C("<"), C(">"), C("|"), C(";") and C("&") will not work. Use the M(ansible.builtin.shell) module if you need these features.
/// To create C(command) tasks that are easier to read than the ones using space-delimited arguments, pass parameters using the C(args) L(task keyword,https://docs.ansible.com/ansible/latest/reference_appendices/playbooks_keywords.html#task) or use O(cmd) parameter.
/// Either a free form command or O(cmd) parameter is required, see the examples.
/// For Windows targets, use the M(ansible.windows.win_command) module instead.
class CommandOptions {
    /// Passes the command as a list rather than a string.
    /// Use O(argv) to avoid quoting values that would otherwise be interpreted incorrectly (for example "user name").
    /// Only the string (free form) or the list (argv) form can be provided, not both.  One or the other must be provided.
    argv: Listing<String>?
    /// Change into this directory before running the command.
    chdir: String?
    /// The command to run.
    cmd: String?
    /// A filename or (since 2.0) glob pattern. If a matching file already exists, this step B(will not) be run.
    /// This is checked before O(removes) is checked.
    creates: String?
    /// Expands the arguments that are variables, for example C($HOME) will be expanded before being passed to the command to run.
    /// Set to V(false) to disable expansion and treat the value as a literal argument.
    expand_argument_vars: Boolean?
    /// The command module takes a free form string as a command to run.
    /// There is no actual parameter named 'free form'.
    free_form: Any?
    /// A filename or (since 2.0) glob pattern. If a matching file exists, this step B(will) be run.
    /// This is checked after O(creates) is checked.
    removes: String?
    /// Set the stdin of the command directly to the specified value.
    stdin: String?
    /// If set to V(true), append a newline to stdin data.
    stdin_add_newline: Boolean?
    /// Strip empty lines from the end of stdout/stderr in result.
    strip_empty_ends: Boolean?
}

/// Task class for command
class CommandTask extends Playbook.Task {

    `ansible.builtin.command`: Dynamic

    function GetModuleName(): String = "ansible.builtin.command"
    function GetModuleOptions(): Dynamic = this.`ansible.builtin.command`
}

/// TaskBuilder class for command
class Command extends Playbook.TaskBuilder {
    /// Options for ansible.builtin.command
    options: CommandOptions?

    function Task(): CommandTask = this
        .toMap()
        .put("ansible.builtin.command", (this.options.ifNonNull((it) -> it.toDynamic()) ?? new Dynamic {})
            |> (this.options_mixin ?? new Mixin {}))
        .toTyped(CommandTask)
}

/// Copy files to remote locations
/// The M(ansible.builtin.copy) module copies a file or a directory structure from the local or remote machine to a location on the remote machine. File system meta-information (permissions, ownership, etc.) may be set, even when the file or directory already exists on the target system. Some meta-information may be copied on request.
/// Get meta-information with the M(ansible.builtin.stat) module.
/// Set meta-information with the M(ansible.builtin.file) module.
/// Use the M(ansible.builtin.fetch) module to copy files from remote locations to the local box.
/// If you need variable interpolation in copied files, use the M(ansible.builtin.template) module. Using a variable with the O(content) parameter produces unpredictable results.
/// For Windows targets, use the M(ansible.windows.win_copy) module instead.
class CopyOptions {
    /// Create a backup file including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly.
    backup: Boolean?
    /// SHA1 checksum of the file being transferred.
    /// Used to validate that the copy of the file was successful.
    /// If this is not provided, ansible will use the local calculated checksum of the src file.
    checksum: String?
    /// When used instead of O(src), sets the contents of a file directly to the specified value.
    /// Works only when O(dest) is a file. Creates the file if it does not exist.
    /// For advanced formatting or if O(content) contains a variable, use the M(ansible.builtin.template) module.
    content: String?
    /// Remote absolute path where the file should be copied to.
    /// If O(src) is a directory, this must be a directory too.
    /// If O(dest) is a non-existent path and if either O(dest) ends with "/" or O(src) is a directory, O(dest) is created.
    /// If O(dest) is a relative path, the starting directory is determined by the remote host.
    /// If O(src) and O(dest) are files, the parent directory of O(dest) is not created and the task fails if it does not already exist.
    dest: String
    /// Set the access permissions of newly created directories to the given mode. Permissions on existing directories do not change.
    /// See O(mode) for the syntax of accepted values.
    /// The target system's defaults determine permissions when this parameter is not set.
    directory_mode: String?
    /// This flag indicates that filesystem links in the destination, if they exist, should be followed.
    follow: Boolean?
    /// Influence whether the remote file must always be replaced.
    /// If V(true), the remote file will be replaced when contents are different than the source.
    /// If V(false), the file will only be transferred if the destination does not exist.
    force: Boolean?
    /// This flag indicates that filesystem links in the source tree, if they exist, should be followed.
    local_follow: Boolean?
    /// The permissions of the destination file or directory.
    /// For those used to C(/usr/bin/chmod) remember that modes are actually octal numbers. You must either add a leading zero so that Ansible's YAML parser knows it is an octal number (like V(0644) or V(01777)) or quote it (like V('644') or V('1777')) so Ansible receives a string and can do its own conversion from string into number. Giving Ansible a number without following one of these rules will end up with a decimal number which will have unexpected results.
    /// As of Ansible 1.8, the mode may be specified as a symbolic mode (for example, V(u+rwx) or V(u=rw,g=r,o=r)).
    /// As of Ansible 2.3, the mode may also be the special string V(preserve).
    /// V(preserve) means that the file will be given the same permissions as the source file.
    /// When doing a recursive copy, see also O(directory_mode).
    /// If O(mode) is not specified and the destination file B(does not) exist, the default C(umask) on the system will be used when setting the mode for the newly created file.
    /// If O(mode) is not specified and the destination file B(does) exist, the mode of the existing file will be used.
    /// Specifying O(mode) is the best way to ensure files are created with the correct permissions. See CVE-2020-1736 for further details.
    mode: Any?
    /// Influence whether O(src) needs to be transferred or already is present remotely.
    /// If V(false), it will search for O(src) on the controller node.
    /// If V(true) it will search for O(src) on the managed (remote) node.
    /// O(remote_src) supports recursive copying as of version 2.8.
    /// O(remote_src) only works with O(mode=preserve) as of version 2.6.
    /// Autodecryption of files does not work when O(remote_src=yes).
    remote_src: Boolean?
    /// Local path to a file to copy to the remote server.
    /// This can be absolute or relative.
    /// If path is a directory, it is copied recursively. In this case, if path ends with "/", only inside contents of that directory are copied to destination. Otherwise, if it does not end with "/", the directory itself with all contents is copied. This behavior is similar to the C(rsync) command line tool.
    src: String?
}

/// Task class for copy
class CopyTask extends Playbook.Task {

    `ansible.builtin.copy`: Dynamic

    function GetModuleName(): String = "ansible.builtin.copy"
    function GetModuleOptions(): Dynamic = this.`ansible.builtin.copy`
}

/// TaskBuilder class for copy
class Copy extends Playbook.TaskBuilder {
    /// Options for ansible.builtin.copy
    options: CopyOptions?

    function Task(): CopyTask = this
        .toMap()
        .put("ansible.builtin.copy", (this.options.ifNonNull((it) -> it.toDynamic()) ?? new Dynamic {})
            |> (this.options_mixin ?? new Mixin {}))
        .toTyped(CopyTask)
}

/// Manage cron.d and crontab entries
/// Use this module to manage crontab and environment variables entries. This module allows you to create environment variables and named crontab entries, update, or delete them.
/// When crontab jobs are managed: the module includes one line with the description of the crontab entry C("#Ansible: <name>") corresponding to the "name" passed to the module, which is used by future ansible/module calls to find/check the state. The "name" parameter should be unique, and changing the "name" value will result in a new cron task being created (or a different one being removed).
/// When environment variables are managed, no comment line is added, but, when the module needs to find/check the state, it uses the "name" parameter to find the environment variable definition line.
/// When using symbols such as %, they must be properly escaped.
class CronOptions {
    /// If set, create a backup of the crontab before it is modified. The location of the backup is returned in the RV(ignore:backup_file) variable by this module.
    backup: Boolean?
    /// If specified, uses this file instead of an individual user's crontab. The assumption is that this file is exclusively managed by the module, do not use if the file contains multiple entries, NEVER use for /etc/crontab.
    /// If this is a relative path, it is interpreted with respect to C(/etc/cron.d).
    /// Many linux distros expect (and some require) the filename portion to consist solely of upper- and lower-case letters, digits, underscores, and hyphens.
    /// Using this parameter requires you to specify the O(user) as well, unless O(state) is not V(present).
    /// Either this parameter or O(name) is required
    cron_file: String?
    /// Day of the month the job should run (V(1-31), V(*), V(*/2), and so on).
    day: String?
    /// If the job should be disabled (commented out) in the crontab.
    /// Only has effect if O(state=present).
    disabled: Boolean?
    /// If set, manages a crontab's environment variable.
    /// New variables are added on top of crontab.
    /// O(name) and O(value) parameters are the name and the value of environment variable.
    env: Boolean?
    /// Hour when the job should run (V(0-23), V(*), V(*/2), and so on).
    hour: String?
    /// Used with O(state=present) and O(env).
    /// If specified, the environment variable will be inserted after the declaration of specified environment variable.
    insertafter: String?
    /// Used with O(state=present) and O(env).
    /// If specified, the environment variable will be inserted before the declaration of specified environment variable.
    insertbefore: String?
    /// The command to execute or, if env is set, the value of environment variable.
    /// The command should not contain line breaks.
    /// Required if O(state=present).
    job: String?
    /// Minute when the job should run (V(0-59), V(*), V(*/2), and so on).
    minute: String?
    /// Month of the year the job should run (V(1-12), V(*), V(*/2), and so on).
    month: String?
    /// Description of a crontab entry or, if env is set, the name of environment variable.
    /// This parameter is always required as of ansible-core 2.12.
    name: String
    /// Special time specification nickname.
    special_time: ("annually"|"daily"|"hourly"|"monthly"|"reboot"|"weekly"|"yearly")?
    /// Whether to ensure the job or environment variable is present or absent.
    state: ("absent"|"present")?
    /// The specific user whose crontab should be modified.
    /// When unset, this parameter defaults to the current user.
    user: String?
    /// Day of the week that the job should run (V(0-6) for Sunday-Saturday, V(*), and so on).
    weekday: String?
}

/// Task class for cron
class CronTask extends Playbook.Task {

    `ansible.builtin.cron`: Dynamic

    function GetModuleName(): String = "ansible.builtin.cron"
    function GetModuleOptions(): Dynamic = this.`ansible.builtin.cron`
}

/// TaskBuilder class for cron
class Cron extends Playbook.TaskBuilder {
    /// Options for ansible.builtin.cron
    options: CronOptions?

    function Task(): CronTask = this
        .toMap()
        .put("ansible.builtin.cron", (this.options.ifNonNull((it) -> it.toDynamic()) ?? new Dynamic {})
            |> (this.options_mixin ?? new Mixin {}))
        .toTyped(CronTask)
}

/// Add and remove deb822 formatted repositories
/// Add and remove deb822 formatted repositories in Debian based distributions
class Deb822RepositoryOptions {
    /// Allow downgrading a package that was previously authenticated but is no longer authenticated
    allow_downgrade_to_insecure: Boolean?
    /// Allow insecure repositories
    allow_insecure: Boolean?
    /// Allow repositories signed with a key using a weak digest algorithm
    allow_weak: Boolean?
    /// Architectures to search within repository
    architectures: Listing<String>?
    /// Controls if APT should try to acquire indexes via a URI constructed from a hashsum of the expected file instead of using the well-known stable filename of the index.
    by_hash: Boolean?
    /// Controls if APT should consider the machine's time correct and hence perform time related checks, such as verifying that a Release file is not from the future.
    check_date: Boolean?
    /// Controls if APT should try to detect replay attacks.
    check_valid_until: Boolean?
    /// Components specify different sections of one distribution version present in a Suite.
    components: Listing<String>?
    /// Controls how far from the future a repository may be.
    date_max_future: Int?
    /// Tells APT whether the source is enabled or not.
    enabled: Boolean?
    /// Determines the path to the InRelease file, relative to the normal position of an InRelease file.
    inrelease_path: String?
    /// Defines which languages information such as translated package descriptions should be downloaded.
    languages: Listing<String>?
    /// The octal mode for newly created files in sources.list.d.
    mode: String?
    /// Name of the repo. Specifically used for C(X-Repolib-Name) and in naming the repository and signing key files.
    name: String
    /// Controls if APT should try to use PDiffs to update old indexes instead of downloading the new indexes entirely
    pdiffs: Boolean?
    /// Either a URL to a GPG key, absolute path to a keyring file, one or more fingerprints of keys either in the C(trusted.gpg) keyring or in the keyrings in the C(trusted.gpg.d/) directory, or an ASCII armored GPG public key block.
    signed_by: String?
    /// A source string state.
    state: ("absent"|"present")?
    /// Suite can specify an exact path in relation to the URI(s) provided, in which case the Components: must be omitted and suite must end with a slash (C(/)). Alternatively, it may take the form of a distribution version (e.g. a version codename like disco or artful). If the suite does not specify a path, at least one component must be present.
    suites: Listing<String>?
    /// Defines which download targets apt will try to acquire from this source.
    targets: Listing<String>?
    /// Decides if a source is considered trusted or if warnings should be raised before e.g. packages are installed from this source.
    trusted: Boolean?
    /// Which types of packages to look for from a given source; either binary V(deb) or source code V(deb-src)
    types: Listing<("deb"|"deb-src")>?
    /// The URIs must specify the base of the Debian distribution archive, from which APT finds the information it needs.
    uris: Listing<String>?
}

/// Task class for deb822_repository
class Deb822RepositoryTask extends Playbook.Task {

    `ansible.builtin.deb822_repository`: Dynamic

    function GetModuleName(): String = "ansible.builtin.deb822_repository"
    function GetModuleOptions(): Dynamic = this.`ansible.builtin.deb822_repository`
}

/// TaskBuilder class for deb822_repository
class Deb822Repository extends Playbook.TaskBuilder {
    /// Options for ansible.builtin.deb822_repository
    options: Deb822RepositoryOptions?

    function Task(): Deb822RepositoryTask = this
        .toMap()
        .put("ansible.builtin.deb822_repository", (this.options.ifNonNull((it) -> it.toDynamic()) ?? new Dynamic {})
            |> (this.options_mixin ?? new Mixin {}))
        .toTyped(Deb822RepositoryTask)
}

/// Configure a .deb package
/// Configure a .deb package using debconf-set-selections.
/// Or just query existing selections.
class DebconfOptions {
    /// Name of package to configure.
    name: String
    /// A debconf configuration setting.
    question: String?
    /// Do not set 'seen' flag when pre-seeding.
    unseen: Boolean?
    /// Value to set the configuration to.
    value: String?
    /// The type of the value supplied.
    /// It is highly recommended to add C(no_log=True) to task while specifying O(vtype=password).
    /// V(seen) was added in Ansible 2.2.
    vtype: ("boolean"|"error"|"multiselect"|"note"|"password"|"seen"|"select"|"string"|"text"|"title")?
}

/// Task class for debconf
class DebconfTask extends Playbook.Task {

    `ansible.builtin.debconf`: Dynamic

    function GetModuleName(): String = "ansible.builtin.debconf"
    function GetModuleOptions(): Dynamic = this.`ansible.builtin.debconf`
}

/// TaskBuilder class for debconf
class Debconf extends Playbook.TaskBuilder {
    /// Options for ansible.builtin.debconf
    options: DebconfOptions?

    function Task(): DebconfTask = this
        .toMap()
        .put("ansible.builtin.debconf", (this.options.ifNonNull((it) -> it.toDynamic()) ?? new Dynamic {})
            |> (this.options_mixin ?? new Mixin {}))
        .toTyped(DebconfTask)
}

/// Print statements during execution
/// This module prints statements during execution and can be useful for debugging variables or expressions without necessarily halting the playbook.
/// Useful for debugging together with the 'when:' directive.
/// This module is also supported for Windows targets.
class DebugOptions {
    /// The customized message that is printed. If omitted, prints a generic message.
    msg: String?
    /// A variable name to debug.
    /// Mutually exclusive with the O(msg) option.
    /// Be aware that this option already runs in Jinja2 context and has an implicit C({{ }}) wrapping, so you should not be using Jinja2 delimiters unless you are looking for double interpolation.
    var: String?
    /// A number that controls when the debug is run, if you set to 3 it will only run debug when -vvv or above.
    verbosity: Int?
}

/// Task class for debug
class DebugTask extends Playbook.Task {

    `ansible.builtin.debug`: Dynamic

    function GetModuleName(): String = "ansible.builtin.debug"
    function GetModuleOptions(): Dynamic = this.`ansible.builtin.debug`
}

/// TaskBuilder class for debug
class Debug extends Playbook.TaskBuilder {
    /// Options for ansible.builtin.debug
    options: DebugOptions?

    function Task(): DebugTask = this
        .toMap()
        .put("ansible.builtin.debug", (this.options.ifNonNull((it) -> it.toDynamic()) ?? new Dynamic {})
            |> (this.options_mixin ?? new Mixin {}))
        .toTyped(DebugTask)
}

/// Manages packages with the I(dnf) package manager
/// Installs, upgrade, removes, and lists packages and groups with the I(dnf) package manager.
class DnfOptions {
    /// Specify if the named package and version is allowed to downgrade a maybe already installed higher version of that package. Note that setting allow_downgrade=True can make this module behave in a non-idempotent way. The task could end up with a set of packages that does not match the complete list of specified packages to install (because dependencies between the downgraded package and others can cause changes to the packages which were in the earlier transaction).
    allow_downgrade: Boolean?
    /// If V(true) it allows  erasing  of  installed  packages to resolve dependencies.
    allowerasing: Boolean?
    /// If V(true), removes all "leaf" packages from the system that were originally installed as dependencies of user-installed packages but which are no longer required by any such package. Should be used alone or when O(state) is V(absent)
    autoremove: Boolean?
    /// If set to V(true), and O(state=latest) then only installs updates that have been marked bugfix related.
    /// Note that, similar to C(dnf upgrade-minimal), this filter applies to dependencies as well.
    bugfix: Boolean?
    /// Tells dnf to run entirely from system cache; does not download or update metadata.
    cacheonly: Boolean?
    /// The remote dnf configuration file to use for the transaction.
    conf_file: String?
    /// Disable the excludes defined in DNF config files.
    /// If set to V(all), disables all excludes.
    /// If set to V(main), disable excludes defined in [main] in dnf.conf.
    /// If set to V(repoid), disable excludes defined for given repo id.
    disable_excludes: String?
    /// Whether to disable the GPG checking of signatures of packages being installed. Has an effect only if O(state) is V(present) or V(latest).
    /// This setting affects packages installed from a repository as well as "local" packages installed from the filesystem or a URL.
    disable_gpg_check: Boolean?
    /// I(Plugin) name to disable for the install/update operation. The disabled plugins will not persist beyond the transaction.
    disable_plugin: Listing<String>?
    /// I(Repoid) of repositories to disable for the install/update operation. These repos will not persist beyond the transaction. When specifying multiple repos, separate them with a ",".
    disablerepo: Listing<String>?
    /// Specifies an alternate directory to store packages.
    /// Has an effect only if O(download_only) is specified.
    download_dir: String?
    /// Only download the packages, do not install them.
    download_only: Boolean?
    /// I(Plugin) name to enable for the install/update operation. The enabled plugin will not persist beyond the transaction.
    enable_plugin: Listing<String>?
    /// I(Repoid) of repositories to enable for the install/update operation. These repos will not persist beyond the transaction. When specifying multiple repos, separate them with a ",".
    enablerepo: Listing<String>?
    /// Package name(s) to exclude when state=present, or latest. This can be a list or a comma separated string.
    exclude: Listing<String>?
    /// This is effectively a no-op in DNF as it is not needed with DNF, but is an accepted parameter for feature parity/compatibility with the M(ansible.builtin.yum) module.
    install_repoquery: Boolean?
    /// Will also install all packages linked by a weak dependency relation.
    install_weak_deps: Boolean?
    /// Specifies an alternative installroot, relative to which all packages will be installed.
    installroot: String?
    /// Various (non-idempotent) commands for usage with C(/usr/bin/ansible) and I(not) playbooks. Use M(ansible.builtin.package_facts) instead of the O(list) argument as a best practice.
    list: String?
    /// Amount of time to wait for the dnf lockfile to be freed.
    lock_timeout: Int?
    /// A package name or package specifier with version, like C(name-1.0). When using state=latest, this can be '*' which means run: dnf -y update. You can also pass a url or a local path to an rpm file. To operate on several packages this can accept a comma separated string of packages or a list of packages.
    /// Comparison operators for package version are valid here C(>), C(<), C(>=), C(<=). Example - C(name >= 1.0). Spaces around the operator are required.
    /// You can also pass an absolute path for a binary which is provided by the package to install. See examples for more information.
    name: Listing<String>?
    /// Set best option to False, so that transactions are not limited to best candidates only.
    nobest: Boolean?
    /// Specifies an alternative release from which all packages will be installed.
    releasever: String?
    /// If set to V(true), and O(state=latest) then only installs updates that have been marked security related.
    /// Note that, similar to C(dnf upgrade-minimal), this filter applies to dependencies as well.
    security: Boolean?
    /// Skip all unavailable packages or packages with broken dependencies without raising an error. Equivalent to passing the --skip-broken option.
    skip_broken: Boolean?
    /// Disables SSL validation of the repository server for this transaction.
    /// This should be set to V(false) if one of the configured repositories is using an untrusted or self-signed certificate.
    sslverify: Boolean?
    /// Whether to install (V(present), V(latest)), or remove (V(absent)) a package.
    /// Default is V(None), however in effect the default action is V(present) unless the O(autoremove) option is enabled for this module, then V(absent) is inferred.
    state: ("absent"|"present"|"installed"|"removed"|"latest")?
    /// Force dnf to check if cache is out of date and redownload if needed. Has an effect only if O(state) is V(present) or V(latest).
    update_cache: Boolean?
    /// When using latest, only update installed packages. Do not install packages.
    /// Has an effect only if O(state) is V(latest)
    update_only: Boolean?
    /// By default, this module will select the backend based on the C(ansible_pkg_mgr) fact.
    use_backend: ("auto"|"dnf4"|"dnf5")?
    /// This only applies if using a https url as the source of the rpm. e.g. for localinstall. If set to V(false), the SSL certificates will not be validated.
    /// This should only set to V(false) used on personally controlled sites using self-signed certificates as it avoids verifying the source site.
    validate_certs: Boolean?
}

/// Task class for dnf
class DnfTask extends Playbook.Task {

    `ansible.builtin.dnf`: Dynamic

    function GetModuleName(): String = "ansible.builtin.dnf"
    function GetModuleOptions(): Dynamic = this.`ansible.builtin.dnf`
}

/// TaskBuilder class for dnf
class Dnf extends Playbook.TaskBuilder {
    /// Options for ansible.builtin.dnf
    options: DnfOptions?

    function Task(): DnfTask = this
        .toMap()
        .put("ansible.builtin.dnf", (this.options.ifNonNull((it) -> it.toDynamic()) ?? new Dynamic {})
            |> (this.options_mixin ?? new Mixin {}))
        .toTyped(DnfTask)
}

/// Manages packages with the I(dnf5) package manager
/// Installs, upgrade, removes, and lists packages and groups with the I(dnf5) package manager.
/// WARNING: The I(dnf5) package manager is still under development and not all features that the existing M(ansible.builtin.dnf) module provides are implemented in M(ansible.builtin.dnf5), please consult specific options for more information.
class Dnf5Options {
    /// Specify if the named package and version is allowed to downgrade a maybe already installed higher version of that package. Note that setting allow_downgrade=True can make this module behave in a non-idempotent way. The task could end up with a set of packages that does not match the complete list of specified packages to install (because dependencies between the downgraded package and others can cause changes to the packages which were in the earlier transaction).
    allow_downgrade: Boolean?
    /// If V(true) it allows  erasing  of  installed  packages to resolve dependencies.
    allowerasing: Boolean?
    /// If V(true), removes all "leaf" packages from the system that were originally installed as dependencies of user-installed packages but which are no longer required by any such package. Should be used alone or when O(state) is V(absent)
    autoremove: Boolean?
    /// If set to V(true), and O(state=latest) then only installs updates that have been marked bugfix related.
    /// Note that, similar to C(dnf upgrade-minimal), this filter applies to dependencies as well.
    bugfix: Boolean?
    /// Tells dnf to run entirely from system cache; does not download or update metadata.
    cacheonly: Boolean?
    /// The remote dnf configuration file to use for the transaction.
    conf_file: String?
    /// Disable the excludes defined in DNF config files.
    /// If set to V(all), disables all excludes.
    /// If set to V(main), disable excludes defined in [main] in dnf.conf.
    /// If set to V(repoid), disable excludes defined for given repo id.
    disable_excludes: String?
    /// Whether to disable the GPG checking of signatures of packages being installed. Has an effect only if O(state) is V(present) or V(latest).
    /// This setting affects packages installed from a repository as well as "local" packages installed from the filesystem or a URL.
    disable_gpg_check: Boolean?
    /// This is currently a no-op as dnf5 itself does not implement this feature.
    /// I(Plugin) name to disable for the install/update operation. The disabled plugins will not persist beyond the transaction.
    disable_plugin: Listing<String>?
    /// I(Repoid) of repositories to disable for the install/update operation. These repos will not persist beyond the transaction. When specifying multiple repos, separate them with a ",".
    disablerepo: Listing<String>?
    /// Specifies an alternate directory to store packages.
    /// Has an effect only if O(download_only) is specified.
    download_dir: String?
    /// Only download the packages, do not install them.
    download_only: Boolean?
    /// This is currently a no-op as dnf5 itself does not implement this feature.
    /// I(Plugin) name to enable for the install/update operation. The enabled plugin will not persist beyond the transaction.
    enable_plugin: Listing<String>?
    /// I(Repoid) of repositories to enable for the install/update operation. These repos will not persist beyond the transaction. When specifying multiple repos, separate them with a ",".
    enablerepo: Listing<String>?
    /// Package name(s) to exclude when state=present, or latest. This can be a list or a comma separated string.
    exclude: Listing<String>?
    /// This is effectively a no-op in DNF as it is not needed with DNF, but is an accepted parameter for feature parity/compatibility with the M(ansible.builtin.yum) module.
    install_repoquery: Boolean?
    /// Will also install all packages linked by a weak dependency relation.
    install_weak_deps: Boolean?
    /// Specifies an alternative installroot, relative to which all packages will be installed.
    installroot: String?
    /// Various (non-idempotent) commands for usage with C(/usr/bin/ansible) and I(not) playbooks. Use M(ansible.builtin.package_facts) instead of the O(list) argument as a best practice.
    list: String?
    /// This is currently a no-op as dnf5 does not provide an option to configure it.
    /// Amount of time to wait for the dnf lockfile to be freed.
    lock_timeout: Int?
    /// A package name or package specifier with version, like C(name-1.0). When using state=latest, this can be '*' which means run: dnf -y update. You can also pass a url or a local path to an rpm file. To operate on several packages this can accept a comma separated string of packages or a list of packages.
    /// Comparison operators for package version are valid here C(>), C(<), C(>=), C(<=). Example - C(name >= 1.0). Spaces around the operator are required.
    /// You can also pass an absolute path for a binary which is provided by the package to install. See examples for more information.
    name: Listing<String>?
    /// Set best option to False, so that transactions are not limited to best candidates only.
    nobest: Boolean?
    /// Specifies an alternative release from which all packages will be installed.
    releasever: String?
    /// If set to V(true), and O(state=latest) then only installs updates that have been marked security related.
    /// Note that, similar to C(dnf upgrade-minimal), this filter applies to dependencies as well.
    security: Boolean?
    /// Skip all unavailable packages or packages with broken dependencies without raising an error. Equivalent to passing the --skip-broken option.
    skip_broken: Boolean?
    /// Disables SSL validation of the repository server for this transaction.
    /// This should be set to V(false) if one of the configured repositories is using an untrusted or self-signed certificate.
    sslverify: Boolean?
    /// Whether to install (V(present), V(latest)), or remove (V(absent)) a package.
    /// Default is V(None), however in effect the default action is V(present) unless the V(autoremove) option is enabled for this module, then V(absent) is inferred.
    state: ("absent"|"present"|"installed"|"removed"|"latest")?
    /// Force dnf to check if cache is out of date and redownload if needed. Has an effect only if O(state) is V(present) or V(latest).
    update_cache: Boolean?
    /// When using latest, only update installed packages. Do not install packages.
    /// Has an effect only if O(state) is V(latest)
    update_only: Boolean?
    /// This is effectively a no-op in the dnf5 module as dnf5 itself handles downloading a https url as the source of the rpm, but is an accepted parameter for feature parity/compatibility with the M(ansible.builtin.yum) module.
    validate_certs: Boolean?
}

/// Task class for dnf5
class Dnf5Task extends Playbook.Task {

    `ansible.builtin.dnf5`: Dynamic

    function GetModuleName(): String = "ansible.builtin.dnf5"
    function GetModuleOptions(): Dynamic = this.`ansible.builtin.dnf5`
}

/// TaskBuilder class for dnf5
class Dnf5 extends Playbook.TaskBuilder {
    /// Options for ansible.builtin.dnf5
    options: Dnf5Options?

    function Task(): Dnf5Task = this
        .toMap()
        .put("ansible.builtin.dnf5", (this.options.ifNonNull((it) -> it.toDynamic()) ?? new Dynamic {})
            |> (this.options_mixin ?? new Mixin {}))
        .toTyped(Dnf5Task)
}

/// Dpkg package selection selections
/// Change dpkg package selection state via --get-selections and --set-selections.
class DpkgSelectionsOptions {
    /// Name of the package.
    name: String
    /// The selection state to set the package to.
    selection: ("install"|"hold"|"deinstall"|"purge")
}

/// Task class for dpkg_selections
class DpkgSelectionsTask extends Playbook.Task {

    `ansible.builtin.dpkg_selections`: Dynamic

    function GetModuleName(): String = "ansible.builtin.dpkg_selections"
    function GetModuleOptions(): Dynamic = this.`ansible.builtin.dpkg_selections`
}

/// TaskBuilder class for dpkg_selections
class DpkgSelections extends Playbook.TaskBuilder {
    /// Options for ansible.builtin.dpkg_selections
    options: DpkgSelectionsOptions?

    function Task(): DpkgSelectionsTask = this
        .toMap()
        .put("ansible.builtin.dpkg_selections", (this.options.ifNonNull((it) -> it.toDynamic()) ?? new Dynamic {})
            |> (this.options_mixin ?? new Mixin {}))
        .toTyped(DpkgSelectionsTask)
}

/// Executes a command and responds to prompts
/// The M(ansible.builtin.expect) module executes a command and responds to prompts.
/// The given command will be executed on all selected nodes. It will not be processed through the shell, so variables like C($HOME) and operations like C("<"), C(">"), C("|"), and C("&") will not work.
class ExpectOptions {
    /// Change into this directory before running the command.
    chdir: String?
    /// The command module takes command to run.
    command: String
    /// A filename, when it already exists, this step will B(not) be run.
    creates: String?
    /// Whether or not to echo out your response strings.
    echo: Boolean?
    /// A filename, when it does not exist, this step will B(not) be run.
    removes: String?
    /// Mapping of expected string/regex and string to respond with. If the response is a list, successive matches return successive responses. List functionality is new in 2.1.
    responses: Any
    /// Amount of time in seconds to wait for the expected strings. Use V(null) to disable timeout.
    timeout: String?
}

/// Task class for expect
class ExpectTask extends Playbook.Task {

    `ansible.builtin.expect`: Dynamic

    function GetModuleName(): String = "ansible.builtin.expect"
    function GetModuleOptions(): Dynamic = this.`ansible.builtin.expect`
}

/// TaskBuilder class for expect
class Expect extends Playbook.TaskBuilder {
    /// Options for ansible.builtin.expect
    options: ExpectOptions?

    function Task(): ExpectTask = this
        .toMap()
        .put("ansible.builtin.expect", (this.options.ifNonNull((it) -> it.toDynamic()) ?? new Dynamic {})
            |> (this.options_mixin ?? new Mixin {}))
        .toTyped(ExpectTask)
}

/// Fail with custom message
/// This module fails the progress with a custom message.
/// It can be useful for bailing out when a certain condition is met using C(when).
/// This module is also supported for Windows targets.
class FailOptions {
    /// The customized message used for failing execution.
    /// If omitted, fail will simply bail out with a generic message.
    msg: String?
}

/// Task class for fail
class FailTask extends Playbook.Task {

    `ansible.builtin.fail`: Dynamic

    function GetModuleName(): String = "ansible.builtin.fail"
    function GetModuleOptions(): Dynamic = this.`ansible.builtin.fail`
}

/// TaskBuilder class for fail
class Fail extends Playbook.TaskBuilder {
    /// Options for ansible.builtin.fail
    options: FailOptions?

    function Task(): FailTask = this
        .toMap()
        .put("ansible.builtin.fail", (this.options.ifNonNull((it) -> it.toDynamic()) ?? new Dynamic {})
            |> (this.options_mixin ?? new Mixin {}))
        .toTyped(FailTask)
}

/// Fetch files from remote nodes
/// This module works like M(ansible.builtin.copy), but in reverse.
/// It is used for fetching files from remote machines and storing them locally in a file tree, organized by hostname.
/// Files that already exist at O(dest) will be overwritten if they are different than the O(src).
/// This module is also supported for Windows targets.
class FetchOptions {
    /// A directory to save the file into.
    /// For example, if the O(dest) directory is C(/backup) a O(src) file named C(/etc/profile) on host C(host.example.com), would be saved into C(/backup/host.example.com/etc/profile). The host name is based on the inventory name.
    dest: Any
    /// When set to V(true), the task will fail if the remote file cannot be read for any reason.
    /// Prior to Ansible 2.5, setting this would only fail if the source file was missing.
    /// The default was changed to V(true) in Ansible 2.5.
    fail_on_missing: Boolean?
    /// Allows you to override the default behavior of appending hostname/path/to/file to the destination.
    /// If O(dest) ends with '/', it will use the basename of the source file, similar to the copy module.
    /// This can be useful if working with a single host, or if retrieving files that are uniquely named per host.
    /// If using multiple hosts with the same filename, the file will be overwritten for each host.
    flat: Boolean?
    /// The file on the remote system to fetch.
    /// This I(must) be a file, not a directory.
    /// Recursive fetching may be supported in a later release.
    src: Any
    /// Verify that the source and destination checksums match after the files are fetched.
    validate_checksum: Boolean?
}

/// Task class for fetch
class FetchTask extends Playbook.Task {

    `ansible.builtin.fetch`: Dynamic

    function GetModuleName(): String = "ansible.builtin.fetch"
    function GetModuleOptions(): Dynamic = this.`ansible.builtin.fetch`
}

/// TaskBuilder class for fetch
class Fetch extends Playbook.TaskBuilder {
    /// Options for ansible.builtin.fetch
    options: FetchOptions?

    function Task(): FetchTask = this
        .toMap()
        .put("ansible.builtin.fetch", (this.options.ifNonNull((it) -> it.toDynamic()) ?? new Dynamic {})
            |> (this.options_mixin ?? new Mixin {}))
        .toTyped(FetchTask)
}

/// Manage files and file properties
/// Set attributes of files, directories, or symlinks and their targets.
/// Alternatively, remove files, symlinks or directories.
/// Many other modules support the same options as the M(ansible.builtin.file) module - including M(ansible.builtin.copy), M(ansible.builtin.template), and M(ansible.builtin.assemble).
/// For Windows targets, use the M(ansible.windows.win_file) module instead.
class FileOptions {
    /// This parameter indicates the time the file's access time should be set to.
    /// Should be V(preserve) when no modification is required, C(YYYYMMDDHHMM.SS) when using default time format, or V(now).
    /// Default is V(None) meaning that V(preserve) is the default for O(state=[file,directory,link,hard]) and V(now) is default for O(state=touch).
    access_time: String?
    /// When used with O(access_time), indicates the time format that must be used.
    /// Based on default Python format (see time.strftime doc).
    access_time_format: String?
    /// This flag indicates that filesystem links, if they exist, should be followed.
    /// O(follow=yes) and O(state=link) can modify O(src) when combined with parameters such as O(mode).
    /// Previous to Ansible 2.5, this was V(false) by default.
    follow: Boolean?
    /// Force the creation of the symlinks in two cases: the source file does not exist (but will appear later); the destination exists and is a file (so, we need to unlink the O(path) file and create symlink to the O(src) file in place of it).
    force: Boolean?
    /// This parameter indicates the time the file's modification time should be set to.
    /// Should be V(preserve) when no modification is required, C(YYYYMMDDHHMM.SS) when using default time format, or V(now).
    /// Default is None meaning that V(preserve) is the default for O(state=[file,directory,link,hard]) and V(now) is default for O(state=touch).
    modification_time: String?
    /// When used with O(modification_time), indicates the time format that must be used.
    /// Based on default Python format (see time.strftime doc).
    modification_time_format: String?
    /// Path to the file being managed.
    path: String
    /// Recursively set the specified file attributes on directory contents.
    /// This applies only when O(state) is set to V(directory).
    recurse: Boolean?
    /// Path of the file to link to.
    /// This applies only to O(state=link) and O(state=hard).
    /// For O(state=link), this will also accept a non-existing path.
    /// Relative paths are relative to the file being created (O(path)) which is how the Unix command C(ln -s SRC DEST) treats relative paths.
    src: String?
    /// If V(absent), directories will be recursively deleted, and files or symlinks will be unlinked. In the case of a directory, if C(diff) is declared, you will see the files and folders deleted listed under C(path_contents). Note that V(absent) will not cause M(ansible.builtin.file) to fail if the O(path) does not exist as the state did not change.
    /// If V(directory), all intermediate subdirectories will be created if they do not exist. Since Ansible 1.7 they will be created with the supplied permissions.
    /// If V(file), with no other options, returns the current state of C(path).
    /// If V(file), even with other options (such as O(mode)), the file will be modified if it exists but will NOT be created if it does not exist. Set to V(touch) or use the M(ansible.builtin.copy) or M(ansible.builtin.template) module if you want to create the file if it does not exist.
    /// If V(hard), the hard link will be created or changed.
    /// If V(link), the symbolic link will be created or changed.
    /// If V(touch) (new in 1.4), an empty file will be created if the file does not exist, while an existing file or directory will receive updated file access and modification times (similar to the way V(touch) works from the command line).
    /// Default is the current state of the file if it exists, V(directory) if O(recurse=yes), or V(file) otherwise.
    state: ("absent"|"directory"|"file"|"hard"|"link"|"touch")?
}

/// Task class for file
class FileTask extends Playbook.Task {

    `ansible.builtin.file`: Dynamic

    function GetModuleName(): String = "ansible.builtin.file"
    function GetModuleOptions(): Dynamic = this.`ansible.builtin.file`
}

/// TaskBuilder class for file
class File extends Playbook.TaskBuilder {
    /// Options for ansible.builtin.file
    options: FileOptions?

    function Task(): FileTask = this
        .toMap()
        .put("ansible.builtin.file", (this.options.ifNonNull((it) -> it.toDynamic()) ?? new Dynamic {})
            |> (this.options_mixin ?? new Mixin {}))
        .toTyped(FileTask)
}

/// Return a list of files based on specific criteria
/// Return a list of files based on specific criteria. Multiple criteria are AND'd together.
/// For Windows targets, use the M(ansible.windows.win_find) module instead.
/// This module does not use the C(find) command, it is a much simpler and slower Python implementation. It is intended for small and simple uses. Those that need the extra power or speed and have expertise with the UNIX command, should use it directly.
class FindOptions {
    /// Select files whose age is equal to or greater than the specified time.
    /// Use a negative age to find files equal to or less than the specified time.
    /// You can choose seconds, minutes, hours, days, or weeks by specifying the first letter of any of those words (e.g., "1w").
    age: String?
    /// Choose the file property against which we compare age.
    age_stamp: ("atime"|"ctime"|"mtime")?
    /// A regular expression or pattern which should be matched against the file content.
    /// If O(read_whole_file) is V(false) it matches against the beginning of the line (uses V(re.match(\))). If O(read_whole_file) is V(true), it searches anywhere for that pattern (uses V(re.search(\))).
    /// Works only when O(file_type) is V(file).
    contains: String?
    /// Set the maximum number of levels to descend into.
    /// Setting recurse to V(false) will override this value, which is effectively depth 1.
    /// Default is unlimited depth.
    depth: Int?
    /// Restrict mode matching to exact matches only, and not as a minimum set of permissions to match.
    exact_mode: Boolean?
    /// One or more (shell or regex) patterns, which type is controlled by O(use_regex) option.
    /// Items whose basenames match an O(excludes) pattern are culled from O(patterns) matches. Multiple patterns can be specified using a list.
    excludes: Listing<String>?
    /// Type of file to select.
    /// The 'link' and 'any' choices were added in Ansible 2.3.
    file_type: ("any"|"directory"|"file"|"link")?
    /// Set this to V(true) to follow symlinks in path for systems with python 2.6+.
    follow: Boolean?
    /// Set this to V(true) to retrieve a file's SHA1 checksum.
    get_checksum: Boolean?
    /// Set this to V(true) to include hidden files, otherwise they will be ignored.
    `hidden`: Boolean?
    /// Choose objects matching a specified permission. This value is restricted to modes that can be applied using the python C(os.chmod) function.
    /// The mode can be provided as an octal such as V("0644") or as symbolic such as V(u=rw,g=r,o=r)
    mode: String?
    /// List of paths of directories to search. All paths must be fully qualified.
    paths: Listing<String>
    /// One or more (shell or regex) patterns, which type is controlled by O(use_regex) option.
    /// The patterns restrict the list of files to be returned to those whose basenames match at least one of the patterns specified. Multiple patterns can be specified using a list.
    /// The pattern is matched against the file base name, excluding the directory.
    /// When using regexen, the pattern MUST match the ENTIRE file name, not just parts of it. So if you are looking to match all files ending in .default, you'd need to use C(.*\.default) as a regexp and not just C(\.default).
    /// This parameter expects a list, which can be either comma separated or YAML. If any of the patterns contain a comma, make sure to put them in a list to avoid splitting the patterns in undesirable ways.
    /// Defaults to V(*) when O(use_regex=False), or V(.*) when O(use_regex=True).
    patterns: Listing<String>?
    /// When doing a C(contains) search, determines whether the whole file should be read into memory or if the regex should be applied to the file line-by-line.
    /// Setting this to C(true) can have performance and memory implications for large files.
    /// This uses V(re.search(\)) instead of V(re.match(\)).
    read_whole_file: Boolean?
    /// If target is a directory, recursively descend into the directory looking for files.
    recurse: Boolean?
    /// Select files whose size is equal to or greater than the specified size.
    /// Use a negative size to find files equal to or less than the specified size.
    /// Unqualified values are in bytes but b, k, m, g, and t can be appended to specify bytes, kilobytes, megabytes, gigabytes, and terabytes, respectively.
    /// Size is not evaluated for directories.
    size: String?
    /// If V(false), the patterns are file globs (shell).
    /// If V(true), they are python regexes.
    use_regex: Boolean?
}

/// Task class for find
class FindTask extends Playbook.Task {

    `ansible.builtin.find`: Dynamic

    function GetModuleName(): String = "ansible.builtin.find"
    function GetModuleOptions(): Dynamic = this.`ansible.builtin.find`
}

/// TaskBuilder class for find
class Find extends Playbook.TaskBuilder {
    /// Options for ansible.builtin.find
    options: FindOptions?

    function Task(): FindTask = this
        .toMap()
        .put("ansible.builtin.find", (this.options.ifNonNull((it) -> it.toDynamic()) ?? new Dynamic {})
            |> (this.options_mixin ?? new Mixin {}))
        .toTyped(FindTask)
}

/// Gathers facts about remote hosts
/// This module takes care of executing the R(configured facts modules,FACTS_MODULES), the default is to use the M(ansible.builtin.setup) module.
/// This module is automatically called by playbooks to gather useful variables about remote hosts that can be used in playbooks.
/// It can also be executed directly by C(/usr/bin/ansible) to check what variables are available to a host.
/// Ansible provides many I(facts) about the system, automatically.
class GatherFactsOptions {
    /// A toggle that controls if the fact modules are executed in parallel or serially and in order. This can guarantee the merge order of module facts at the expense of performance.
    /// By default it will be true if more than one fact module is used.
    /// For low cost/delay fact modules parallelism overhead might end up meaning the whole process takes longer. Test your specific case to see if it is a speed improvement or not.
    parallel: Boolean?
}

/// Task class for gather_facts
class GatherFactsTask extends Playbook.Task {

    `ansible.builtin.gather_facts`: Dynamic

    function GetModuleName(): String = "ansible.builtin.gather_facts"
    function GetModuleOptions(): Dynamic = this.`ansible.builtin.gather_facts`
}

/// TaskBuilder class for gather_facts
class GatherFacts extends Playbook.TaskBuilder {
    /// Options for ansible.builtin.gather_facts
    options: GatherFactsOptions?

    function Task(): GatherFactsTask = this
        .toMap()
        .put("ansible.builtin.gather_facts", (this.options.ifNonNull((it) -> it.toDynamic()) ?? new Dynamic {})
            |> (this.options_mixin ?? new Mixin {}))
        .toTyped(GatherFactsTask)
}

/// Downloads files from HTTP, HTTPS, or FTP to node
/// Downloads files from HTTP, HTTPS, or FTP to the remote server. The remote server I(must) have direct access to the remote resource.
/// By default, if an environment variable C(<protocol>_proxy) is set on the target host, requests will be sent through that proxy. This behaviour can be overridden by setting a variable for this task (see R(setting the environment,playbooks_environment)), or by using the use_proxy option.
/// HTTP redirects can redirect from HTTP to HTTPS so you should be sure that your proxy environment for both protocols is correct.
/// From Ansible 2.4 when run with C(--check), it will do a HEAD request to validate the URL but will not download the entire file or verify it against hashes and will report incorrect changed status.
/// For Windows targets, use the M(ansible.windows.win_get_url) module instead.
class GetUrlOptions {
    /// Create a backup file including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly.
    backup: Boolean?
    /// If a checksum is passed to this parameter, the digest of the destination file will be calculated after it is downloaded to ensure its integrity and verify that the transfer completed successfully. Format: <algorithm>:<checksum|url>, e.g. checksum="sha256:D98291AC[...]B6DC7B97", checksum="sha256:http://example.com/path/sha256sum.txt"
    /// If you worry about portability, only the sha1 algorithm is available on all platforms and python versions.
    /// The Python ``hashlib`` module is responsible for providing the available algorithms. The choices vary based on Python version and OpenSSL version.
    /// On systems running in FIPS compliant mode, the ``md5`` algorithm may be unavailable.
    /// Additionally, if a checksum is passed to this parameter, and the file exist under the O(dest) location, the C(destination_checksum) would be calculated, and if checksum equals C(destination_checksum), the file download would be skipped (unless O(force) is V(true)). If the checksum does not equal C(destination_checksum), the destination file is deleted.
    checksum: String?
    /// SSL/TLS Ciphers to use for the request
    /// When a list is provided, all ciphers are joined in order with V(:)
    /// See the L(OpenSSL Cipher List Format,https://www.openssl.org/docs/manmaster/man1/openssl-ciphers.html#CIPHER-LIST-FORMAT) for more details.
    /// The available ciphers is dependent on the Python and OpenSSL/LibreSSL versions
    ciphers: Listing<String>?
    /// PEM formatted certificate chain file to be used for SSL client authentication.
    /// This file can also include the key as well, and if the key is included, O(client_key) is not required.
    client_cert: String?
    /// PEM formatted file that contains your private key to be used for SSL client authentication.
    /// If O(client_cert) contains both the certificate and key, this option is not required.
    client_key: String?
    /// Whether to attempt to decompress gzip content-encoded responses
    decompress: Boolean?
    /// Absolute path of where to download the file to.
    /// If O(dest) is a directory, either the server provided filename or, if none provided, the base name of the URL on the remote server will be used. If a directory, O(force) has no effect.
    /// If O(dest) is a directory, the file will always be downloaded (regardless of the O(force) and O(checksum) option), but replaced only if the contents changed.
    dest: String
    /// If V(true) and O(dest) is not a directory, will download the file every time and replace the file if the contents change. If V(false), the file will only be downloaded if the destination does not exist. Generally should be V(true) only for small local files.
    /// Prior to 0.6, this module behaved as if V(true) was the default.
    force: Boolean?
    /// Force the sending of the Basic authentication header upon initial request.
    /// httplib2, the library used by the uri module only sends authentication information when a webservice responds to an initial request with a 401 status. Since some basic auth services do not properly send a 401, logins will fail.
    force_basic_auth: Boolean?
    /// Add custom HTTP headers to a request in hash/dict format.
    /// The hash/dict format was added in Ansible 2.6.
    /// Previous versions used a C("key:value,key:value") string format.
    /// The C("key:value,key:value") string format is deprecated and has been removed in version 2.10.
    headers: Any?
    /// Header to identify as, generally appears in web server logs.
    http_agent: String?
    /// Timeout in seconds for URL request.
    timeout: Int?
    /// Absolute path of where temporary file is downloaded to.
    /// When run on Ansible 2.5 or greater, path defaults to ansible's remote_tmp setting
    /// When run on Ansible prior to 2.5, it defaults to E(TMPDIR), E(TEMP) or E(TMP) env variables or a platform specific value.
    /// U(https://docs.python.org/3/library/tempfile.html#tempfile.tempdir)
    tmp_dest: String?
    /// A list of header names that will not be sent on subsequent redirected requests. This list is case insensitive. By default all headers will be redirected. In some cases it may be beneficial to list headers such as C(Authorization) here to avoid potential credential exposure.
    unredirected_headers: Listing<String>?
    /// HTTP, HTTPS, or FTP URL in the form (http|https|ftp)://[user[:pass]]@host.domain[:port]/path
    url: String
    /// The password for use in HTTP basic authentication.
    /// If the O(url_username) parameter is not specified, the O(url_password) parameter will not be used.
    /// Since version 2.8 you can also use the O(password) alias for this option.
    url_password: String?
    /// The username for use in HTTP basic authentication.
    /// This parameter can be used without O(url_password) for sites that allow empty passwords.
    /// Since version 2.8 you can also use the O(username) alias for this option.
    url_username: String?
    /// Use GSSAPI to perform the authentication, typically this is for Kerberos or Kerberos through Negotiate authentication.
    /// Requires the Python library L(gssapi,https://github.com/pythongssapi/python-gssapi) to be installed.
    /// Credentials for GSSAPI can be specified with O(url_username)/O(url_password) or with the GSSAPI env var C(KRB5CCNAME) that specified a custom Kerberos credential cache.
    /// NTLM authentication is I(not) supported even if the GSSAPI mech for NTLM has been installed.
    use_gssapi: Boolean?
    /// Determining whether to use credentials from ``~/.netrc`` file
    /// By default .netrc is used with Basic authentication headers
    /// When set to False, .netrc credentials are ignored
    use_netrc: Boolean?
    /// if V(false), it will not use a proxy, even if one is defined in an environment variable on the target hosts.
    use_proxy: Boolean?
    /// If V(false), SSL certificates will not be validated.
    /// This should only be used on personally controlled sites using self-signed certificates.
    validate_certs: Boolean?
}

/// Task class for get_url
class GetUrlTask extends Playbook.Task {

    `ansible.builtin.get_url`: Dynamic

    function GetModuleName(): String = "ansible.builtin.get_url"
    function GetModuleOptions(): Dynamic = this.`ansible.builtin.get_url`
}

/// TaskBuilder class for get_url
class GetUrl extends Playbook.TaskBuilder {
    /// Options for ansible.builtin.get_url
    options: GetUrlOptions?

    function Task(): GetUrlTask = this
        .toMap()
        .put("ansible.builtin.get_url", (this.options.ifNonNull((it) -> it.toDynamic()) ?? new Dynamic {})
            |> (this.options_mixin ?? new Mixin {}))
        .toTyped(GetUrlTask)
}

/// A wrapper to the unix getent utility
/// Runs getent against one of its various databases and returns information into the host's facts, in a C(getent_<database>) prefixed variable.
class GetentOptions {
    /// The name of a getent database supported by the target system (passwd, group, hosts, etc).
    database: String
    /// If a supplied key is missing this will make the task fail if V(true).
    fail_key: Boolean?
    /// Key from which to return values from the specified database, otherwise the full contents are returned.
    key: String?
    /// Override all databases with the specified service
    /// The underlying system must support the service flag which is not always available.
    service: String?
    /// Character used to split the database values into lists/arrays such as V(:) or V(\\t), otherwise it will try to pick one depending on the database.
    split: String?
}

/// Task class for getent
class GetentTask extends Playbook.Task {

    `ansible.builtin.getent`: Dynamic

    function GetModuleName(): String = "ansible.builtin.getent"
    function GetModuleOptions(): Dynamic = this.`ansible.builtin.getent`
}

/// TaskBuilder class for getent
class Getent extends Playbook.TaskBuilder {
    /// Options for ansible.builtin.getent
    options: GetentOptions?

    function Task(): GetentTask = this
        .toMap()
        .put("ansible.builtin.getent", (this.options.ifNonNull((it) -> it.toDynamic()) ?? new Dynamic {})
            |> (this.options_mixin ?? new Mixin {}))
        .toTyped(GetentTask)
}

/// Deploy software (or files) from git checkouts
/// Manage I(git) checkouts of repositories to deploy files or software.
class GitOptions {
    /// Will ensure or not that "-o StrictHostKeyChecking=no" is present as an ssh option.
    /// Be aware that this disables a protection against MITM attacks.
    /// Those using OpenSSH >= 7.5 might want to set O(ssh_opts) to V(StrictHostKeyChecking=accept-new) instead, it does not remove the MITM issue but it does restrict it to the first attempt.
    accept_hostkey: Boolean?
    /// As of OpenSSH 7.5, "-o StrictHostKeyChecking=accept-new" can be used which is safer and will only accepts host keys which are not present or are the same. if V(true), ensure that "-o StrictHostKeyChecking=accept-new" is present as an ssh option.
    accept_newhostkey: Boolean?
    /// Specify archive file path with extension. If specified, creates an archive file of the specified format containing the tree structure for the source tree. Allowed archive formats ["zip", "tar.gz", "tar", "tgz"].
    /// This will clone and perform git archive from local directory as not all git servers support git archive.
    archive: String?
    /// Specify a prefix to add to each file path in archive. Requires O(archive) to be specified.
    archive_prefix: String?
    /// If V(true), repository will be created as a bare repo, otherwise it will be a standard repo with a workspace.
    bare: Boolean?
    /// If V(false), do not clone the repository even if it does not exist locally.
    clone: Boolean?
    /// Create a shallow clone with a history truncated to the specified number or revisions. The minimum possible value is V(1), otherwise ignored. Needs I(git>=1.9.1) to work correctly.
    depth: Int?
    /// The path of where the repository should be checked out. This is equivalent to C(git clone [repo_url] [directory]). The repository named in O(repo) is not appended to this path and the destination directory must be empty. This parameter is required, unless O(clone) is set to V(false).
    dest: String
    /// Path to git executable to use. If not supplied, the normal mechanism for resolving binary paths will be used.
    executable: String?
    /// If V(true), any modified files in the working repository will be discarded.  Prior to 0.7, this was always V(true) and could not be disabled.  Prior to 1.9, the default was V(true).
    force: Boolean?
    /// A list of trusted GPG fingerprints to compare to the fingerprint of the GPG-signed commit.
    /// Only used when O(verify_commit=yes).
    /// Use of this feature requires Git 2.6+ due to its reliance on git's C(--raw) flag to C(verify-commit) and C(verify-tag).
    gpg_whitelist: Listing<String>?
    /// Specify an optional private key file path, on the target host, to use for the checkout.
    /// This ensures 'IdentitiesOnly=yes' is present in O(ssh_opts).
    key_file: String?
    /// If V(false), repository will be cloned without the C(--recursive) option, skipping sub-modules.
    recursive: Boolean?
    /// Reference repository (see "git clone --reference ...").
    reference: String?
    /// Add an additional refspec to be fetched. If version is set to a I(SHA-1) not reachable from any branch or tag, this option may be necessary to specify the ref containing the I(SHA-1). Uses the same syntax as the C(git fetch) command. An example value could be "refs/meta/config".
    refspec: String?
    /// Name of the remote.
    remote: String?
    /// git, SSH, or HTTP(S) protocol address of the git repository.
    repo: String
    /// The path to place the cloned repository. If specified, Git repository can be separated from working tree.
    separate_git_dir: String?
    /// Clone only the history leading to the tip of the specified revision.
    single_branch: Boolean?
    /// Options git will pass to ssh when used as protocol, it works via C(git)'s E(GIT_SSH)/E(GIT_SSH_COMMAND) environment variables.
    /// For older versions it appends E(GIT_SSH_OPTS) (specific to this module) to the variables above or via a wrapper script.
    /// Other options can add to this list, like O(key_file) and O(accept_hostkey).
    /// An example value could be "-o StrictHostKeyChecking=no" (although this particular option is better set by O(accept_hostkey)).
    /// The module ensures that 'BatchMode=yes' is always present to avoid prompts.
    ssh_opts: String?
    /// If V(true), submodules will track the latest commit on their master branch (or other branch specified in .gitmodules).  If V(false), submodules will be kept at the revision specified by the main project. This is equivalent to specifying the C(--remote) flag to git submodule update.
    track_submodules: Boolean?
    /// The umask to set before doing any checkouts, or any other repository maintenance.
    umask: String?
    /// If V(false), do not retrieve new revisions from the origin repository.
    /// Operations like archive will work on the existing (old) repository and might not respond to changes to the options version or remote.
    update: Boolean?
    /// If V(true), when cloning or checking out a O(version) verify the signature of a GPG signed commit. This requires git version>=2.1.0 to be installed. The commit MUST be signed and the public key MUST be present in the GPG keyring.
    verify_commit: Boolean?
    /// What version of the repository to check out. This can be the literal string V(HEAD), a branch name, a tag name. It can also be a I(SHA-1) hash, in which case O(refspec) needs to be specified if the given revision is not already available.
    version: String?
}

/// Task class for git
class GitTask extends Playbook.Task {

    `ansible.builtin.git`: Dynamic

    function GetModuleName(): String = "ansible.builtin.git"
    function GetModuleOptions(): Dynamic = this.`ansible.builtin.git`
}

/// TaskBuilder class for git
class Git extends Playbook.TaskBuilder {
    /// Options for ansible.builtin.git
    options: GitOptions?

    function Task(): GitTask = this
        .toMap()
        .put("ansible.builtin.git", (this.options.ifNonNull((it) -> it.toDynamic()) ?? new Dynamic {})
            |> (this.options_mixin ?? new Mixin {}))
        .toTyped(GitTask)
}

/// Add or remove groups
/// Manage presence of groups on a host.
/// For Windows targets, use the M(ansible.windows.win_group) module instead.
class GroupOptions {
    /// Whether to delete a group even if it is the primary group of a user.
    /// Only applicable on platforms which implement a --force flag on the group deletion command.
    force: Boolean?
    /// Optional I(GID) to set for the group.
    gid: Int?
    /// Forces the use of "local" command alternatives on platforms that implement it.
    /// This is useful in environments that use centralized authentication when you want to manipulate the local groups. (for example, it uses C(lgroupadd) instead of C(groupadd)).
    /// This requires that these commands exist on the targeted host, otherwise it will be a fatal error.
    `local`: Boolean?
    /// Name of the group to manage.
    name: String
    /// This option allows to change the group ID to a non-unique value. Requires O(gid).
    /// Not supported on macOS or BusyBox distributions.
    non_unique: Boolean?
    /// Whether the group should be present or not on the remote host.
    state: ("absent"|"present")?
    /// If V(yes), indicates that the group created is a system group.
    system: Boolean?
}

/// Task class for group
class GroupTask extends Playbook.Task {

    `ansible.builtin.group`: Dynamic

    function GetModuleName(): String = "ansible.builtin.group"
    function GetModuleOptions(): Dynamic = this.`ansible.builtin.group`
}

/// TaskBuilder class for group
class Group extends Playbook.TaskBuilder {
    /// Options for ansible.builtin.group
    options: GroupOptions?

    function Task(): GroupTask = this
        .toMap()
        .put("ansible.builtin.group", (this.options.ifNonNull((it) -> it.toDynamic()) ?? new Dynamic {})
            |> (this.options_mixin ?? new Mixin {}))
        .toTyped(GroupTask)
}

/// Create Ansible groups based on facts
/// Use facts to create ad-hoc groups that can be used later in a playbook.
/// This module is also supported for Windows targets.
class GroupByOptions {
    /// The variables whose values will be used as groups.
    key: String
    /// The list of the parent groups.
    parents: Listing<String>?
}

/// Task class for group_by
class GroupByTask extends Playbook.Task {

    `ansible.builtin.group_by`: Dynamic

    function GetModuleName(): String = "ansible.builtin.group_by"
    function GetModuleOptions(): Dynamic = this.`ansible.builtin.group_by`
}

/// TaskBuilder class for group_by
class GroupBy extends Playbook.TaskBuilder {
    /// Options for ansible.builtin.group_by
    options: GroupByOptions?

    function Task(): GroupByTask = this
        .toMap()
        .put("ansible.builtin.group_by", (this.options.ifNonNull((it) -> it.toDynamic()) ?? new Dynamic {})
            |> (this.options_mixin ?? new Mixin {}))
        .toTyped(GroupByTask)
}

/// Manage hostname
/// Set system's hostname. Supports most OSs/Distributions including those using C(systemd).
/// Windows, HP-UX, and AIX are not currently supported.
class HostnameOptions {
    /// Name of the host.
    /// If the value is a fully qualified domain name that does not resolve from the given host, this will cause the module to hang for a few seconds while waiting for the name resolution attempt to timeout.
    name: String
    /// Which strategy to use to update the hostname.
    /// If not set we try to autodetect, but this can be problematic, particularly with containers as they can present misleading information.
    /// Note that 'systemd' should be specified for RHEL/EL/CentOS 7+. Older distributions should use 'redhat'.
    use: ("alpine"|"debian"|"freebsd"|"generic"|"macos"|"macosx"|"darwin"|"openbsd"|"openrc"|"redhat"|"sles"|"solaris"|"systemd")?
}

/// Task class for hostname
class HostnameTask extends Playbook.Task {

    `ansible.builtin.hostname`: Dynamic

    function GetModuleName(): String = "ansible.builtin.hostname"
    function GetModuleOptions(): Dynamic = this.`ansible.builtin.hostname`
}

/// TaskBuilder class for hostname
class Hostname extends Playbook.TaskBuilder {
    /// Options for ansible.builtin.hostname
    options: HostnameOptions?

    function Task(): HostnameTask = this
        .toMap()
        .put("ansible.builtin.hostname", (this.options.ifNonNull((it) -> it.toDynamic()) ?? new Dynamic {})
            |> (this.options_mixin ?? new Mixin {}))
        .toTyped(HostnameTask)
}

/// Import a playbook
/// Includes a file with a list of plays to be executed.
/// Files with a list of plays can only be included at the top level.
/// You cannot use this action inside a play.
class ImportPlaybookOptions {

    // free-form: Any?

    
}

/// Task class for import_playbook
class ImportPlaybookTask extends Playbook.Task {

    `ansible.builtin.import_playbook`: Dynamic

    function GetModuleName(): String = "ansible.builtin.import_playbook"
    function GetModuleOptions(): Dynamic = this.`ansible.builtin.import_playbook`
}

/// TaskBuilder class for import_playbook
class ImportPlaybook extends Playbook.TaskBuilder {
    /// Options for ansible.builtin.import_playbook
    options: ImportPlaybookOptions?

    function Task(): ImportPlaybookTask = this
        .toMap()
        .put("ansible.builtin.import_playbook", (this.options.ifNonNull((it) -> it.toDynamic()) ?? new Dynamic {})
            |> (this.options_mixin ?? new Mixin {}))
        .toTyped(ImportPlaybookTask)
}

/// Import a role into a play
/// Much like the C(roles:) keyword, this task loads a role, but it allows you to control when the role tasks run in between other tasks of the play.
/// Most keywords, loops and conditionals will only be applied to the imported tasks, not to this statement itself. If you want the opposite behavior, use M(ansible.builtin.include_role) instead.
/// Does not work in handlers.
class ImportRoleOptions {
    /// Overrides the role's metadata setting to allow using a role more than once with the same parameters.
    allow_duplicates: Boolean?
    /// File to load from a role's C(defaults/) directory.
    defaults_from: String?
    /// File to load from a role's C(handlers/) directory.
    handlers_from: String?
    /// The name of the role to be executed.
    name: String
    /// Perform role argument spec validation if an argument spec is defined.
    rolespec_validate: Boolean?
    /// File to load from a role's C(tasks/) directory.
    tasks_from: String?
    /// File to load from a role's C(vars/) directory.
    vars_from: String?
}

/// Task class for import_role
class ImportRoleTask extends Playbook.Task {

    `ansible.builtin.import_role`: Dynamic

    function GetModuleName(): String = "ansible.builtin.import_role"
    function GetModuleOptions(): Dynamic = this.`ansible.builtin.import_role`
}

/// TaskBuilder class for import_role
class ImportRole extends Playbook.TaskBuilder {
    /// Options for ansible.builtin.import_role
    options: ImportRoleOptions?

    function Task(): ImportRoleTask = this
        .toMap()
        .put("ansible.builtin.import_role", (this.options.ifNonNull((it) -> it.toDynamic()) ?? new Dynamic {})
            |> (this.options_mixin ?? new Mixin {}))
        .toTyped(ImportRoleTask)
}

/// Import a task list
/// Imports a list of tasks to be added to the current playbook for subsequent execution.
class ImportTasksOptions {
    /// Specifies the name of the file that lists tasks to add to the current playbook.
    file: String?

    // free-form: Any?

    
}

/// Task class for import_tasks
class ImportTasksTask extends Playbook.Task {

    `ansible.builtin.import_tasks`: Dynamic

    function GetModuleName(): String = "ansible.builtin.import_tasks"
    function GetModuleOptions(): Dynamic = this.`ansible.builtin.import_tasks`
}

/// TaskBuilder class for import_tasks
class ImportTasks extends Playbook.TaskBuilder {
    /// Options for ansible.builtin.import_tasks
    options: ImportTasksOptions?

    function Task(): ImportTasksTask = this
        .toMap()
        .put("ansible.builtin.import_tasks", (this.options.ifNonNull((it) -> it.toDynamic()) ?? new Dynamic {})
            |> (this.options_mixin ?? new Mixin {}))
        .toTyped(ImportTasksTask)
}

/// Load and execute a role
/// Dynamically loads and executes a specified role as a task.
/// May be used only where Ansible tasks are allowed - inside C(pre_tasks), C(tasks), or C(post_tasks) play objects, or as a task inside a role.
/// Task-level keywords, loops, and conditionals apply only to the C(include_role) statement itself.
/// To apply keywords to the tasks within the role, pass them using the O(apply) option or use M(ansible.builtin.import_role) instead.
/// Ignores some keywords, like C(until) and C(retries).
/// This module is also supported for Windows targets.
/// Does not work in handlers.
class IncludeRoleOptions {
    /// Overrides the role's metadata setting to allow using a role more than once with the same parameters.
    allow_duplicates: Boolean?
    /// Accepts a hash of task keywords (for example C(tags), C(become)) that will be applied to all tasks within the included role.
    apply: Any?
    /// File to load from a role's C(defaults/) directory.
    defaults_from: String?
    /// File to load from a role's C(handlers/) directory.
    handlers_from: String?
    /// The name of the role to be executed.
    name: String
    /// This option dictates whether the role's C(vars) and C(defaults) are exposed to the play. If set to V(true) the variables will be available to tasks following the C(include_role) task. This functionality differs from standard variable exposure for roles listed under the C(roles) header or M(ansible.builtin.import_role) as they are exposed to the play at playbook parsing time, and available to earlier roles and tasks as well.
    public: Boolean?
    /// Perform role argument spec validation if an argument spec is defined.
    rolespec_validate: Boolean?
    /// File to load from a role's C(tasks/) directory.
    tasks_from: String?
    /// File to load from a role's C(vars/) directory.
    vars_from: String?
}

/// Task class for include_role
class IncludeRoleTask extends Playbook.Task {

    `ansible.builtin.include_role`: Dynamic

    function GetModuleName(): String = "ansible.builtin.include_role"
    function GetModuleOptions(): Dynamic = this.`ansible.builtin.include_role`
}

/// TaskBuilder class for include_role
class IncludeRole extends Playbook.TaskBuilder {
    /// Options for ansible.builtin.include_role
    options: IncludeRoleOptions?

    function Task(): IncludeRoleTask = this
        .toMap()
        .put("ansible.builtin.include_role", (this.options.ifNonNull((it) -> it.toDynamic()) ?? new Dynamic {})
            |> (this.options_mixin ?? new Mixin {}))
        .toTyped(IncludeRoleTask)
}

/// Dynamically include a task list
/// Includes a file with a list of tasks to be executed in the current playbook.
class IncludeTasksOptions {
    /// Accepts a hash of task keywords (for example C(tags), C(become)) that will be applied to the tasks within the include.
    apply: String?
    /// Specifies the name of the file that lists tasks to add to the current playbook.
    file: String?

    // free-form: Any?

    
}

/// Task class for include_tasks
class IncludeTasksTask extends Playbook.Task {

    `ansible.builtin.include_tasks`: Dynamic

    function GetModuleName(): String = "ansible.builtin.include_tasks"
    function GetModuleOptions(): Dynamic = this.`ansible.builtin.include_tasks`
}

/// TaskBuilder class for include_tasks
class IncludeTasks extends Playbook.TaskBuilder {
    /// Options for ansible.builtin.include_tasks
    options: IncludeTasksOptions?

    function Task(): IncludeTasksTask = this
        .toMap()
        .put("ansible.builtin.include_tasks", (this.options.ifNonNull((it) -> it.toDynamic()) ?? new Dynamic {})
            |> (this.options_mixin ?? new Mixin {}))
        .toTyped(IncludeTasksTask)
}

/// Load variables from files, dynamically within a task
/// Loads YAML/JSON variables dynamically from a file or directory, recursively, during task runtime.
/// If loading a directory, the files are sorted alphabetically before being loaded.
/// This module is also supported for Windows targets.
/// To assign included variables to a different host than C(inventory_hostname), use C(delegate_to) and set C(delegate_facts=yes).
class IncludeVarsOptions {
    /// When using O(dir), this module will, by default, recursively go through each sub directory and load up the variables. By explicitly setting the depth, this module will only go as deep as the depth.
    depth: Int?
    /// The directory name from which the variables should be loaded.
    /// If the path is relative and the task is inside a role, it will look inside the role's vars/ subdirectory.
    /// If the path is relative and not inside a role, it will be parsed relative to the playbook.
    dir: String?
    /// List of file extensions to read when using O(dir).
    extensions: Listing<String>?
    /// The file name from which variables should be loaded.
    /// If the path is relative, it will look for the file in vars/ subdirectory of a role or relative to playbook.
    file: String?
    /// Limit the files that are loaded within any directory to this regular expression.
    files_matching: String?

    // free-form: Any?

    
    /// If set to V(merge), merges existing hash variables instead of overwriting them.
    /// If omitted (V(null)), the behavior falls back to the global C(hash_behaviour) configuration.
    /// This option is self-contained and does not apply to individual files in O(dir). You can use a loop to apply O(hash_behaviour) per file.
    hash_behaviour: ("replace"|"merge")?
    /// List of file names to ignore.
    ignore_files: Listing<String>?
    /// Ignore unknown file extensions within the directory.
    /// This allows users to specify a directory containing vars files that are intermingled with non-vars files extension types (e.g. a directory with a README in it and vars files).
    ignore_unknown_extensions: Boolean?
    /// The name of a variable into which assign the included vars.
    /// If omitted (null) they will be made top level vars.
    name: String?
}

/// Task class for include_vars
class IncludeVarsTask extends Playbook.Task {

    `ansible.builtin.include_vars`: Dynamic

    function GetModuleName(): String = "ansible.builtin.include_vars"
    function GetModuleOptions(): Dynamic = this.`ansible.builtin.include_vars`
}

/// TaskBuilder class for include_vars
class IncludeVars extends Playbook.TaskBuilder {
    /// Options for ansible.builtin.include_vars
    options: IncludeVarsOptions?

    function Task(): IncludeVarsTask = this
        .toMap()
        .put("ansible.builtin.include_vars", (this.options.ifNonNull((it) -> it.toDynamic()) ?? new Dynamic {})
            |> (this.options_mixin ?? new Mixin {}))
        .toTyped(IncludeVarsTask)
}

/// Modify iptables rules
/// M(ansible.builtin.iptables) is used to set up, maintain, and inspect the tables of IP packet filter rules in the Linux kernel.
/// This module does not handle the saving and/or loading of rules, but rather only manipulates the current rules that are present in memory. This is the same as the behaviour of the C(iptables) and C(ip6tables) command which this module uses internally.
class IptablesOptions {
    /// Whether the rule should be appended at the bottom or inserted at the top.
    /// If the rule already exists the chain will not be modified.
    action: ("append"|"insert")?
    /// Specify the iptables chain to modify.
    /// This could be a user-defined chain or one of the standard iptables chains, like V(INPUT), V(FORWARD), V(OUTPUT), V(PREROUTING), V(POSTROUTING), V(SECMARK) or V(CONNSECMARK).
    chain: String?
    /// If V(true) and O(state) is V(present), the chain will be created if needed.
    /// If V(true) and O(state) is V(absent), the chain will be deleted if the only other parameter passed are O(chain) and optionally O(table).
    chain_management: Boolean?
    /// This specifies a comment that will be added to the rule.
    comment: String?
    /// A list of the connection states to match in the conntrack module.
    /// Possible values are V(INVALID), V(NEW), V(ESTABLISHED), V(RELATED), V(UNTRACKED), V(SNAT), V(DNAT).
    ctstate: Listing<String>?
    /// Destination specification.
    /// Address can be either a network name, a hostname, a network IP address (with /mask), or a plain IP address.
    /// Hostnames will be resolved once only, before the rule is submitted to the kernel. Please note that specifying any name to be resolved with a remote query such as DNS is a really bad idea.
    /// The mask can be either a network mask or a plain number, specifying the number of 1's at the left side of the network mask. Thus, a mask of 24 is equivalent to 255.255.255.0. A V(!) argument before the address specification inverts the sense of the address.
    destination: String?
    /// Destination port or port range specification. This can either be a service name or a port number. An inclusive range can also be specified, using the format first:last. If the first port is omitted, '0' is assumed; if the last is omitted, '65535' is assumed. If the first port is greater than the second one they will be swapped. This is only valid if the rule also specifies one of the following protocols: tcp, udp, dccp or sctp.
    destination_port: String?
    /// This specifies multiple destination port numbers or port ranges to match in the multiport module.
    /// It can only be used in conjunction with the protocols tcp, udp, udplite, dccp and sctp.
    destination_ports: Listing<String>?
    /// Specifies the destination IP range to match in the iprange module.
    dst_range: String?
    /// Flushes the specified table and chain of all rules.
    /// If no chain is specified then the entire table is purged.
    /// Ignores all other parameters.
    flush: Boolean?
    /// This means that the rule only refers to second and further fragments of fragmented packets.
    /// Since there is no way to tell the source or destination ports of such a packet (or ICMP type), such a packet will not match any rules which specify them.
    /// When the "!" argument precedes fragment argument, the rule will only match head fragments, or unfragmented packets.
    fragment: String?
    /// This specifies the IP address of host to send the cloned packets.
    /// This option is only valid when O(jump) is set to V(TEE).
    gateway: String?
    /// Specifies the GID or group to use in match by owner rule.
    gid_owner: String?
    /// This specifies that the processing should continue in a user specified chain.
    /// Unlike the jump argument return will not continue processing in this chain but instead in the chain that called us via jump.
    goto: String?
    /// This allows specification of the ICMP type, which can be a numeric ICMP type, type/code pair, or one of the ICMP type names shown by the command 'iptables -p icmp -h'
    icmp_type: String?
    /// Name of an interface via which a packet was received (only for packets entering the V(INPUT), V(FORWARD) and V(PREROUTING) chains).
    /// When the V(!) argument is used before the interface name, the sense is inverted.
    /// If the interface name ends in a V(+), then any interface which begins with this name will match.
    /// If this option is omitted, any interface name will match.
    in_interface: String?
    /// Which version of the IP protocol this rule should apply to.
    ip_version: ("ipv4"|"ipv6")?
    /// This specifies the target of the rule; i.e., what to do if the packet matches it.
    /// The target can be a user-defined chain (other than the one this rule is in), one of the special builtin targets which decide the fate of the packet immediately, or an extension (see EXTENSIONS below).
    /// If this option is omitted in a rule (and the goto parameter is not used), then matching the rule will have no effect on the packet's fate, but the counters on the rule will be incremented.
    jump: String?
    /// Specifies the maximum average number of matches to allow per second.
    /// The number can specify units explicitly, using C(/second), C(/minute), C(/hour) or C(/day), or parts of them (so V(5/second) is the same as V(5/s)).
    limit: String?
    /// Specifies the maximum burst before the above limit kicks in.
    limit_burst: String?
    /// Logging level according to the syslogd-defined priorities.
    /// The value can be strings or numbers from 1-8.
    /// This parameter is only applicable if O(jump) is set to V(LOG).
    log_level: ("0"|"1"|"2"|"3"|"4"|"5"|"6"|"7"|"emerg"|"alert"|"crit"|"error"|"warning"|"notice"|"info"|"debug")?
    /// Specifies a log text for the rule. Only make sense with a LOG jump.
    log_prefix: String?
    /// Specifies a match to use, that is, an extension module that tests for a specific property.
    /// The set of matches make up the condition under which a target is invoked.
    /// Matches are evaluated first to last if specified as an array and work in short-circuit fashion, i.e. if one extension yields false, evaluation will stop.
    match: Listing<String>?
    /// Specifies a set name which can be defined by ipset.
    /// Must be used together with the match_set_flags parameter.
    /// When the V(!) argument is prepended then it inverts the rule.
    /// Uses the iptables set extension.
    match_set: String?
    /// Specifies the necessary flags for the match_set parameter.
    /// Must be used together with the match_set parameter.
    /// Uses the iptables set extension.
    match_set_flags: ("src"|"dst"|"src,dst"|"dst,src")?
    /// This parameter controls the running of the list -action of iptables, which is used internally by the module
    /// Does not affect the actual functionality. Use this if iptables hangs when creating chain or altering policy
    /// If V(true), then iptables skips the DNS-lookup of the IP addresses in a chain when it uses the list -action
    /// Listing is used internally for example when setting a policy or creting of a chain
    numeric: Boolean?
    /// Name of an interface via which a packet is going to be sent (for packets entering the V(FORWARD), V(OUTPUT) and V(POSTROUTING) chains).
    /// When the V(!) argument is used before the interface name, the sense is inverted.
    /// If the interface name ends in a V(+), then any interface which begins with this name will match.
    /// If this option is omitted, any interface name will match.
    out_interface: String?
    /// Set the policy for the chain to the given target.
    /// Only built-in chains can have policies.
    /// This parameter requires the O(chain) parameter.
    /// If you specify this parameter, all other parameters will be ignored.
    /// This parameter is used to set default policy for the given O(chain). Do not confuse this with O(jump) parameter.
    policy: ("ACCEPT"|"DROP"|"QUEUE"|"RETURN")?
    /// The protocol of the rule or of the packet to check.
    /// The specified protocol can be one of V(tcp), V(udp), V(udplite), V(icmp), V(ipv6-icmp) or V(icmpv6), V(esp), V(ah), V(sctp) or the special keyword V(all), or it can be a numeric value, representing one of these protocols or a different one.
    /// A protocol name from C(/etc/protocols) is also allowed.
    /// A V(!) argument before the protocol inverts the test.
    /// The number zero is equivalent to all.
    /// V(all) will match with all protocols and is taken as default when this option is omitted.
    protocol: String?
    /// Specifies the error packet type to return while rejecting. It implies "jump: REJECT".
    reject_with: String?
    /// Insert the rule as the given rule number.
    /// This works only with O(action=insert).
    rule_num: String?
    /// This enables the administrator to initialize the packet and byte counters of a rule (during V(INSERT), V(APPEND), V(REPLACE) operations).
    set_counters: String?
    /// This allows specifying a DSCP mark to be added to packets. It takes either an integer or hex value.
    /// Mutually exclusive with O(set_dscp_mark_class).
    set_dscp_mark: String?
    /// This allows specifying a predefined DiffServ class which will be translated to the corresponding DSCP mark.
    /// Mutually exclusive with O(set_dscp_mark).
    set_dscp_mark_class: String?
    /// Source specification.
    /// Address can be either a network name, a hostname, a network IP address (with /mask), or a plain IP address.
    /// Hostnames will be resolved once only, before the rule is submitted to the kernel. Please note that specifying any name to be resolved with a remote query such as DNS is a really bad idea.
    /// The mask can be either a network mask or a plain number, specifying the number of 1's at the left side of the network mask. Thus, a mask of 24 is equivalent to 255.255.255.0. A V(!) argument before the address specification inverts the sense of the address.
    source: String?
    /// Source port or port range specification.
    /// This can either be a service name or a port number.
    /// An inclusive range can also be specified, using the format C(first:last).
    /// If the first port is omitted, V(0) is assumed; if the last is omitted, V(65535) is assumed.
    /// If the first port is greater than the second one they will be swapped.
    source_port: String?
    /// Specifies the source IP range to match in the iprange module.
    src_range: String?
    /// Whether the rule should be absent or present.
    state: ("absent"|"present")?
    /// This allows matching packets that have the SYN bit set and the ACK and RST bits unset.
    /// When negated, this matches all packets with the RST or the ACK bits set.
    syn: ("ignore"|"match"|"negate")?
    /// This option specifies the packet matching table which the command should operate on.
    /// If the kernel is configured with automatic module loading, an attempt will be made to load the appropriate module for that table if it is not already there.
    table: ("filter"|"nat"|"mangle"|"raw"|"security")?
    /// TCP flags specification.
    /// O(tcp_flags) expects a dict with the two keys C(flags) and C(flags_set).
    tcp_flags: Any?
    /// This specifies a destination address to use with C(DNAT).
    /// Without this, the destination address is never altered.
    to_destination: String?
    /// This specifies a destination port or range of ports to use, without this, the destination port is never altered.
    /// This is only valid if the rule also specifies one of the protocol V(tcp), V(udp), V(dccp) or V(sctp).
    to_ports: String?
    /// This specifies a source address to use with C(SNAT).
    /// Without this, the source address is never altered.
    to_source: String?
    /// Specifies the UID or username to use in match by owner rule.
    /// From Ansible 2.6 when the C(!) argument is prepended then the it inverts the rule to apply instead to all users except that one specified.
    uid_owner: String?
    /// Wait N seconds for the xtables lock to prevent multiple instances of the program from running concurrently.
    wait: String?
}

/// Task class for iptables
class IptablesTask extends Playbook.Task {

    `ansible.builtin.iptables`: Dynamic

    function GetModuleName(): String = "ansible.builtin.iptables"
    function GetModuleOptions(): Dynamic = this.`ansible.builtin.iptables`
}

/// TaskBuilder class for iptables
class Iptables extends Playbook.TaskBuilder {
    /// Options for ansible.builtin.iptables
    options: IptablesOptions?

    function Task(): IptablesTask = this
        .toMap()
        .put("ansible.builtin.iptables", (this.options.ifNonNull((it) -> it.toDynamic()) ?? new Dynamic {})
            |> (this.options_mixin ?? new Mixin {}))
        .toTyped(IptablesTask)
}

/// Add or remove a host from the C(known_hosts) file
/// The M(ansible.builtin.known_hosts) module lets you add or remove a host keys from the C(known_hosts) file.
/// Starting at Ansible 2.2, multiple entries per host are allowed, but only one for each key type supported by ssh. This is useful if you're going to want to use the M(ansible.builtin.git) module over ssh, for example.
/// If you have a very large number of host keys to manage, you will find the M(ansible.builtin.template) module more useful.
class KnownHostsOptions {
    /// Hash the hostname in the known_hosts file.
    hash_host: Boolean?
    /// The SSH public host key, as a string.
    /// Required if O(state=present), optional when O(state=absent), in which case all keys for the host are removed.
    /// The key must be in the right format for SSH (see sshd(8), section "SSH_KNOWN_HOSTS FILE FORMAT").
    /// Specifically, the key should not match the format that is found in an SSH pubkey file, but should rather have the hostname prepended to a line that includes the pubkey, the same way that it would appear in the known_hosts file. The value prepended to the line must also match the value of the name parameter.
    /// Should be of format C(<hostname[,IP]> ssh-rsa <pubkey>).
    /// For custom SSH port, O(key) needs to specify port as well. See example section.
    key: String?
    /// The host to add or remove (must match a host specified in key). It will be converted to lowercase so that ssh-keygen can find it.
    /// Must match with <hostname> or <ip> present in key attribute.
    /// For custom SSH port, O(name) needs to specify port as well. See example section.
    name: String
    /// The known_hosts file to edit.
    /// The known_hosts file will be created if needed. The rest of the path must exist prior to running the module.
    path: String?
    /// V(present) to add the host key.
    /// V(absent) to remove it.
    state: ("absent"|"present")?
}

/// Task class for known_hosts
class KnownHostsTask extends Playbook.Task {

    `ansible.builtin.known_hosts`: Dynamic

    function GetModuleName(): String = "ansible.builtin.known_hosts"
    function GetModuleOptions(): Dynamic = this.`ansible.builtin.known_hosts`
}

/// TaskBuilder class for known_hosts
class KnownHosts extends Playbook.TaskBuilder {
    /// Options for ansible.builtin.known_hosts
    options: KnownHostsOptions?

    function Task(): KnownHostsTask = this
        .toMap()
        .put("ansible.builtin.known_hosts", (this.options.ifNonNull((it) -> it.toDynamic()) ?? new Dynamic {})
            |> (this.options_mixin ?? new Mixin {}))
        .toTyped(KnownHostsTask)
}

/// Manage lines in text files
/// This module ensures a particular line is in a file, or replace an existing line using a back-referenced regular expression.
/// This is primarily useful when you want to change a single line in a file only.
/// See the M(ansible.builtin.replace) module if you want to change multiple, similar lines or check M(ansible.builtin.blockinfile) if you want to insert/update/remove a block of lines in a file. For other cases, see the M(ansible.builtin.copy) or M(ansible.builtin.template) modules.
class LineinfileOptions {
    /// Used with O(state=present).
    /// If set, O(line) can contain backreferences (both positional and named) that will get populated if the O(regexp) matches.
    /// This parameter changes the operation of the module slightly; O(insertbefore) and O(insertafter) will be ignored, and if the O(regexp) does not match anywhere in the file, the file will be left unchanged.
    /// If the O(regexp) does match, the last matching line will be replaced by the expanded line parameter.
    /// Mutually exclusive with O(search_string).
    backrefs: Boolean?
    /// Create a backup file including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly.
    backup: Boolean?
    /// Used with O(state=present).
    /// If specified, the file will be created if it does not already exist.
    /// By default it will fail if the file is missing.
    create: Boolean?
    /// Used with O(insertafter) or O(insertbefore).
    /// If set, O(insertafter) and O(insertbefore) will work with the first line that matches the given regular expression.
    firstmatch: Boolean?
    /// Used with O(state=present).
    /// If specified, the line will be inserted after the last match of specified regular expression.
    /// If the first match is required, use(firstmatch=yes).
    /// A special value is available; V(EOF) for inserting the line at the end of the file.
    /// If specified regular expression has no matches, EOF will be used instead.
    /// If O(insertbefore) is set, default value V(EOF) will be ignored.
    /// If regular expressions are passed to both O(regexp) and O(insertafter), O(insertafter) is only honored if no match for O(regexp) is found.
    /// May not be used with O(backrefs) or O(insertbefore).
    insertafter: ("EOF"|"*regex*")?
    /// Used with O(state=present).
    /// If specified, the line will be inserted before the last match of specified regular expression.
    /// If the first match is required, use O(firstmatch=yes).
    /// A value is available; V(BOF) for inserting the line at the beginning of the file.
    /// If specified regular expression has no matches, the line will be inserted at the end of the file.
    /// If regular expressions are passed to both O(regexp) and O(insertbefore), O(insertbefore) is only honored if no match for O(regexp) is found.
    /// May not be used with O(backrefs) or O(insertafter).
    insertbefore: ("BOF"|"*regex*")?
    /// The line to insert/replace into the file.
    /// Required for O(state=present).
    /// If O(backrefs) is set, may contain backreferences that will get expanded with the O(regexp) capture groups if the regexp matches.
    line: String?
    /// All arguments accepted by the M(ansible.builtin.file) module also work here.
    others: String?
    /// The file to modify.
    /// Before Ansible 2.3 this option was only usable as O(dest), O(destfile) and O(name).
    path: String
    /// The regular expression to look for in every line of the file.
    /// For O(state=present), the pattern to replace if found. Only the last line found will be replaced.
    /// For O(state=absent), the pattern of the line(s) to remove.
    /// If the regular expression is not matched, the line will be added to the file in keeping with O(insertbefore) or O(insertafter) settings.
    /// When modifying a line the regexp should typically match both the initial state of the line as well as its state after replacement by O(line) to ensure idempotence.
    /// Uses Python regular expressions. See U(https://docs.python.org/3/library/re.html).
    regexp: String?
    /// The literal string to look for in every line of the file. This does not have to match the entire line.
    /// For O(state=present), the line to replace if the string is found in the file. Only the last line found will be replaced.
    /// For O(state=absent), the line(s) to remove if the string is in the line.
    /// If the literal expression is not matched, the line will be added to the file in keeping with O(insertbefore) or O(insertafter) settings.
    /// Mutually exclusive with O(backrefs) and O(regexp).
    search_string: String?
    /// Whether the line should be there or not.
    state: ("absent"|"present")?
}

/// Task class for lineinfile
class LineinfileTask extends Playbook.Task {

    `ansible.builtin.lineinfile`: Dynamic

    function GetModuleName(): String = "ansible.builtin.lineinfile"
    function GetModuleOptions(): Dynamic = this.`ansible.builtin.lineinfile`
}

/// TaskBuilder class for lineinfile
class Lineinfile extends Playbook.TaskBuilder {
    /// Options for ansible.builtin.lineinfile
    options: LineinfileOptions?

    function Task(): LineinfileTask = this
        .toMap()
        .put("ansible.builtin.lineinfile", (this.options.ifNonNull((it) -> it.toDynamic()) ?? new Dynamic {})
            |> (this.options_mixin ?? new Mixin {}))
        .toTyped(LineinfileTask)
}

/// Execute Ansible 'actions'
/// Meta tasks are a special kind of task which can influence Ansible internal execution or state.
/// Meta tasks can be used anywhere within your playbook.
/// This module is also supported for Windows targets.
class MetaOptions {
    /// This module takes a free form command, as a string. There is not an actual option named "free form".  See the examples!
    /// V(flush_handlers) makes Ansible run any handler tasks which have thus far been notified. Ansible inserts these tasks internally at certain points to implicitly trigger handler runs (after pre/post tasks, the final role execution, and the main tasks section of your plays).
    /// V(refresh_inventory) (added in Ansible 2.0) forces the reload of the inventory, which in the case of dynamic inventory scripts means they will be re-executed. If the dynamic inventory script is using a cache, Ansible cannot know this and has no way of refreshing it (you can disable the cache or, if available for your specific inventory datasource (e.g. aws), you can use the an inventory plugin instead of an inventory script). This is mainly useful when additional hosts are created and users wish to use them instead of using the M(ansible.builtin.add_host) module.
    /// V(noop) (added in Ansible 2.0) This literally does 'nothing'. It is mainly used internally and not recommended for general use.
    /// V(clear_facts) (added in Ansible 2.1) causes the gathered facts for the hosts specified in the play's list of hosts to be cleared, including the fact cache.
    /// V(clear_host_errors) (added in Ansible 2.1) clears the failed state (if any) from hosts specified in the play's list of hosts.
    /// V(end_play) (added in Ansible 2.2) causes the play to end without failing the host(s). Note that this affects all hosts.
    /// V(reset_connection) (added in Ansible 2.3) interrupts a persistent connection (i.e. ssh + control persist)
    /// V(end_host) (added in Ansible 2.8) is a per-host variation of V(end_play). Causes the play to end for the current host without failing it.
    /// V(end_batch) (added in Ansible 2.12) causes the current batch (see C(serial)) to end without failing the host(s). Note that with C(serial=0) or undefined this behaves the same as V(end_play).
    free_form: Any
}

/// Task class for meta
class MetaTask extends Playbook.Task {

    `ansible.builtin.meta`: Dynamic

    function GetModuleName(): String = "ansible.builtin.meta"
    function GetModuleOptions(): Dynamic = this.`ansible.builtin.meta`
}

/// TaskBuilder class for meta
class Meta extends Playbook.TaskBuilder {
    /// Options for ansible.builtin.meta
    options: MetaOptions?

    function Task(): MetaTask = this
        .toMap()
        .put("ansible.builtin.meta", (this.options.ifNonNull((it) -> it.toDynamic()) ?? new Dynamic {})
            |> (this.options_mixin ?? new Mixin {}))
        .toTyped(MetaTask)
}

/// Generic OS package manager
/// This modules manages packages on a target without specifying a package manager module (like M(ansible.builtin.yum), M(ansible.builtin.apt), ...). It is convenient to use in an heterogeneous environment of machines without having to create a specific task for each package manager. M(ansible.builtin.package) calls behind the module for the package manager used by the operating system discovered by the module M(ansible.builtin.setup).  If M(ansible.builtin.setup) was not yet run, M(ansible.builtin.package) will run it.
/// This module acts as a proxy to the underlying package manager module. While all arguments will be passed to the underlying module, not all modules support the same arguments. This documentation only covers the minimum intersection of module arguments that all packaging modules support.
/// For Windows targets, use the M(ansible.windows.win_package) module instead.
class PackageOptions {
    /// Package name, or package specifier with version.
    /// Syntax varies with package manager. For example V(name-1.0) or V(name=1.0).
    /// Package names also vary with package manager; this module will not "translate" them per distro. For example V(libyaml-dev), V(libyaml-devel).
    name: Any
    /// Whether to install (V(present)), or remove (V(absent)) a package.
    /// You can use other states like V(latest) ONLY if they are supported by the underlying package module(s) executed.
    state: Any
    /// The required package manager module to use (V(yum), V(apt), and so on). The default V(auto) will use existing facts or try to autodetect it.
    /// You should only use this field if the automatic selection is not working for some reason.
    use: Any?
}

/// Task class for package
class PackageTask extends Playbook.Task {

    `ansible.builtin.package`: Dynamic

    function GetModuleName(): String = "ansible.builtin.package"
    function GetModuleOptions(): Dynamic = this.`ansible.builtin.package`
}

/// TaskBuilder class for package
class Package extends Playbook.TaskBuilder {
    /// Options for ansible.builtin.package
    options: PackageOptions?

    function Task(): PackageTask = this
        .toMap()
        .put("ansible.builtin.package", (this.options.ifNonNull((it) -> it.toDynamic()) ?? new Dynamic {})
            |> (this.options_mixin ?? new Mixin {}))
        .toTyped(PackageTask)
}

/// Package information as facts
/// Return information about installed packages as facts.
class PackageFactsOptions {
    /// The package manager used by the system so we can query the package information.
    /// Since 2.8 this is a list and can support multiple package managers per system.
    /// The 'portage' and 'pkg' options were added in version 2.8.
    /// The 'apk' option was added in version 2.11.
    /// The 'pkg_info' option was added in version 2.13.
    manager: Listing<("auto"|"rpm"|"apt"|"portage"|"pkg"|"pacman"|"apk"|"pkg_info")>?
    /// This option controls how the module queries the package managers on the system. V(first) means it will return only information for the first supported package manager available. V(all) will return information for all supported and available package managers on the system.
    strategy: ("first"|"all")?
}

/// Task class for package_facts
class PackageFactsTask extends Playbook.Task {

    `ansible.builtin.package_facts`: Dynamic

    function GetModuleName(): String = "ansible.builtin.package_facts"
    function GetModuleOptions(): Dynamic = this.`ansible.builtin.package_facts`
}

/// TaskBuilder class for package_facts
class PackageFacts extends Playbook.TaskBuilder {
    /// Options for ansible.builtin.package_facts
    options: PackageFactsOptions?

    function Task(): PackageFactsTask = this
        .toMap()
        .put("ansible.builtin.package_facts", (this.options.ifNonNull((it) -> it.toDynamic()) ?? new Dynamic {})
            |> (this.options_mixin ?? new Mixin {}))
        .toTyped(PackageFactsTask)
}

/// Pause playbook execution
/// Pauses playbook execution for a set amount of time, or until a prompt is acknowledged. All parameters are optional. The default behavior is to pause with a prompt.
/// To pause/wait/sleep per host, use the M(ansible.builtin.wait_for) module.
/// You can use C(ctrl+c) if you wish to advance a pause earlier than it is set to expire or if you need to abort a playbook run entirely. To continue early press C(ctrl+c) and then C(c). To abort a playbook press C(ctrl+c) and then C(a).
/// Prompting for a set amount of time is not supported. Pausing playbook execution is interruptable but does not return user input.
/// The pause module integrates into async/parallelized playbooks without any special considerations (see Rolling Updates). When using pauses with the C(serial) playbook parameter (as in rolling updates) you are only prompted once for the current group of hosts.
/// This module is also supported for Windows targets.
class PauseOptions {
    /// Controls whether or not keyboard input is shown when typing.
    /// Only has effect if O(seconds=None) and O(minutes=None).
    echo: Boolean?
    /// A positive number of minutes to pause for.
    minutes: Any?
    /// Optional text to use for the prompt message.
    /// User input is only returned if O(seconds=None) and O(minutes=None), otherwise this is just a custom message before playbook execution is paused.
    prompt: Any?
    /// A positive number of seconds to pause for.
    seconds: Any?
}

/// Task class for pause
class PauseTask extends Playbook.Task {

    `ansible.builtin.pause`: Dynamic

    function GetModuleName(): String = "ansible.builtin.pause"
    function GetModuleOptions(): Dynamic = this.`ansible.builtin.pause`
}

/// TaskBuilder class for pause
class Pause extends Playbook.TaskBuilder {
    /// Options for ansible.builtin.pause
    options: PauseOptions?

    function Task(): PauseTask = this
        .toMap()
        .put("ansible.builtin.pause", (this.options.ifNonNull((it) -> it.toDynamic()) ?? new Dynamic {})
            |> (this.options_mixin ?? new Mixin {}))
        .toTyped(PauseTask)
}

/// Try to connect to host, verify a usable python and return V(pong) on success
/// A trivial test module, this module always returns V(pong) on successful contact. It does not make sense in playbooks, but it is useful from C(/usr/bin/ansible) to verify the ability to login and that a usable Python is configured.
/// This is NOT ICMP ping, this is just a trivial test module that requires Python on the remote-node.
/// For Windows targets, use the M(ansible.windows.win_ping) module instead.
/// For Network targets, use the M(ansible.netcommon.net_ping) module instead.
class PingOptions {
    /// Data to return for the RV(ping) return value.
    /// If this parameter is set to V(crash), the module will cause an exception.
    data: String?
}

/// Task class for ping
class PingTask extends Playbook.Task {

    `ansible.builtin.ping`: Dynamic

    function GetModuleName(): String = "ansible.builtin.ping"
    function GetModuleOptions(): Dynamic = this.`ansible.builtin.ping`
}

/// TaskBuilder class for ping
class Ping extends Playbook.TaskBuilder {
    /// Options for ansible.builtin.ping
    options: PingOptions?

    function Task(): PingTask = this
        .toMap()
        .put("ansible.builtin.ping", (this.options.ifNonNull((it) -> it.toDynamic()) ?? new Dynamic {})
            |> (this.options_mixin ?? new Mixin {}))
        .toTyped(PingTask)
}

/// Manages Python library dependencies
/// Manage Python library dependencies. To use this module, one of the following keys is required: O(name) or O(requirements).
class PipOptions {
    /// cd into this directory before running the command
    chdir: String?
    /// Pass the editable flag.
    editable: Boolean?
    /// The explicit executable or pathname for the pip executable, if different from the Ansible Python interpreter. For example V(pip3.3), if there are both Python 2.7 and 3.3 installations in the system and you want to run pip for the Python 3.3 installation.
    /// Mutually exclusive with O(virtualenv) (added in 2.1).
    /// Does not affect the Ansible Python interpreter.
    /// The setuptools package must be installed for both the Ansible Python interpreter and for the version of Python specified by this option.
    executable: String?
    /// Extra arguments passed to pip.
    extra_args: String?
    /// The name of a Python library to install or the url(bzr+,hg+,git+,svn+) of the remote package.
    /// This can be a list (since 2.2) and contain version specifiers (since 2.7).
    name: Listing<String>?
    /// The path to a pip requirements file, which should be local to the remote system. File can be specified as a relative path if using the chdir option.
    requirements: String?
    /// The state of module
    /// The 'forcereinstall' option is only available in Ansible 2.1 and above.
    state: ("absent"|"forcereinstall"|"latest"|"present")?
    /// The system umask to apply before installing the pip package. This is useful, for example, when installing on systems that have a very restrictive umask by default (e.g., "0077") and you want to pip install packages which are to be used by all users. Note that this requires you to specify desired umask mode as an octal string, (e.g., "0022").
    umask: String?
    /// The version number to install of the Python library specified in the O(name) parameter.
    version: String?
    /// An optional path to a I(virtualenv) directory to install into. It cannot be specified together with the 'executable' parameter (added in 2.1). If the virtualenv does not exist, it will be created before installing packages. The optional virtualenv_site_packages, virtualenv_command, and virtualenv_python options affect the creation of the virtualenv.
    virtualenv: String?
    /// The command or a pathname to the command to create the virtual environment with. For example V(pyvenv), V(virtualenv), V(virtualenv2), V(~/bin/virtualenv), V(/usr/local/bin/virtualenv).
    virtualenv_command: String?
    /// The Python executable used for creating the virtual environment. For example V(python3.12), V(python2.7). When not specified, the Python version used to run the ansible module is used. This parameter should not be used when O(virtualenv_command) is using V(pyvenv) or the C(-m venv) module.
    virtualenv_python: String?
    /// Whether the virtual environment will inherit packages from the global site-packages directory.  Note that if this setting is changed on an already existing virtual environment it will not have any effect, the environment must be deleted and newly created.
    virtualenv_site_packages: Boolean?
}

/// Task class for pip
class PipTask extends Playbook.Task {

    `ansible.builtin.pip`: Dynamic

    function GetModuleName(): String = "ansible.builtin.pip"
    function GetModuleOptions(): Dynamic = this.`ansible.builtin.pip`
}

/// TaskBuilder class for pip
class Pip extends Playbook.TaskBuilder {
    /// Options for ansible.builtin.pip
    options: PipOptions?

    function Task(): PipTask = this
        .toMap()
        .put("ansible.builtin.pip", (this.options.ifNonNull((it) -> it.toDynamic()) ?? new Dynamic {})
            |> (this.options_mixin ?? new Mixin {}))
        .toTyped(PipTask)
}

/// Executes a low-down and dirty command
/// Executes a low-down and dirty SSH command, not going through the module subsystem.
/// This is useful and should only be done in a few cases. A common case is installing C(python) on a system without python installed by default. Another is speaking to any devices such as routers that do not have any Python installed. In any other case, using the M(ansible.builtin.shell) or M(ansible.builtin.command) module is much more appropriate.
/// Arguments given to C(raw) are run directly through the configured remote shell.
/// Standard output, error output and return code are returned when available.
/// There is no change handler support for this module.
/// This module does not require python on the remote system, much like the M(ansible.builtin.script) module.
/// This module is also supported for Windows targets.
/// If the command returns non UTF-8 data, it must be encoded to avoid issues. One option is to pipe the output through C(base64).
class RawOptions {
    /// Change the shell used to execute the command. Should be an absolute path to the executable.
    /// When using privilege escalation (C(become)) a default shell will be assigned if one is not provided as privilege escalation requires a shell.
    executable: Any?
    /// The raw module takes a free form command to run.
    /// There is no parameter actually named 'free form'; see the examples!
    free_form: Any
}

/// Task class for raw
class RawTask extends Playbook.Task {

    `ansible.builtin.raw`: Dynamic

    function GetModuleName(): String = "ansible.builtin.raw"
    function GetModuleOptions(): Dynamic = this.`ansible.builtin.raw`
}

/// TaskBuilder class for raw
class Raw extends Playbook.TaskBuilder {
    /// Options for ansible.builtin.raw
    options: RawOptions?

    function Task(): RawTask = this
        .toMap()
        .put("ansible.builtin.raw", (this.options.ifNonNull((it) -> it.toDynamic()) ?? new Dynamic {})
            |> (this.options_mixin ?? new Mixin {}))
        .toTyped(RawTask)
}

/// Reboot a machine
/// Reboot a machine, wait for it to go down, come back up, and respond to commands.
/// For Windows targets, use the M(ansible.windows.win_reboot) module instead.
class RebootOptions {
    /// Command to run that returns a unique string indicating the last time the system was booted.
    /// Setting this to a command that has different output each time it is run will cause the task to fail.
    boot_time_command: String?
    /// Maximum seconds to wait for a successful connection to the managed hosts before trying again.
    /// If unspecified, the default setting for the underlying connection plugin is used.
    connect_timeout: Int?
    /// Message to display to users before reboot.
    msg: String?
    /// Seconds to wait after the reboot command was successful before attempting to validate the system rebooted successfully.
    /// This is useful if you want wait for something to settle despite your connection already working.
    post_reboot_delay: Int?
    /// Seconds to wait before reboot. Passed as a parameter to the reboot command.
    /// On Linux, macOS and OpenBSD, this is converted to minutes and rounded down. If less than 60, it will be set to 0.
    /// On Solaris and FreeBSD, this will be seconds.
    pre_reboot_delay: Int?
    /// Command to run that reboots the system, including any parameters passed to the command.
    /// Can be an absolute path to the command or just the command name. If an absolute path to the command is not given, O(search_paths) on the target system will be searched to find the absolute path.
    /// This will cause O(pre_reboot_delay), O(post_reboot_delay), and O(msg) to be ignored.
    reboot_command: String?
    /// Maximum seconds to wait for machine to reboot and respond to a test command.
    /// This timeout is evaluated separately for both reboot verification and test command success so the maximum execution time for the module is twice this amount.
    reboot_timeout: Int?
    /// Paths to search on the remote machine for the C(shutdown) command.
    /// I(Only) these paths will be searched for the C(shutdown) command. E(PATH) is ignored in the remote node when searching for the C(shutdown) command.
    search_paths: Listing<String>?
    /// Command to run on the rebooted host and expect success from to determine the machine is ready for further tasks.
    test_command: String?
}

/// Task class for reboot
class RebootTask extends Playbook.Task {

    `ansible.builtin.reboot`: Dynamic

    function GetModuleName(): String = "ansible.builtin.reboot"
    function GetModuleOptions(): Dynamic = this.`ansible.builtin.reboot`
}

/// TaskBuilder class for reboot
class Reboot extends Playbook.TaskBuilder {
    /// Options for ansible.builtin.reboot
    options: RebootOptions?

    function Task(): RebootTask = this
        .toMap()
        .put("ansible.builtin.reboot", (this.options.ifNonNull((it) -> it.toDynamic()) ?? new Dynamic {})
            |> (this.options_mixin ?? new Mixin {}))
        .toTyped(RebootTask)
}

/// Replace all instances of a particular string in a file using a back-referenced regular expression
/// This module will replace all instances of a pattern within a file.
/// It is up to the user to maintain idempotence by ensuring that the same pattern would never match any replacements made.
class ReplaceOptions {
    /// If specified, only content after this match will be replaced/removed.
    /// Can be used in combination with O(before).
    /// Uses Python regular expressions; see U(https://docs.python.org/3/library/re.html).
    /// Uses DOTALL, which means the V(.) special character I(can match newlines).
    after: String?
    /// Create a backup file including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly.
    backup: Boolean?
    /// If specified, only content before this match will be replaced/removed.
    /// Can be used in combination with O(after).
    /// Uses Python regular expressions; see U(https://docs.python.org/3/library/re.html).
    /// Uses DOTALL, which means the V(.) special character I(can match newlines).
    before: String?
    /// The character encoding for reading and writing the file.
    encoding: String?
    /// All arguments accepted by the M(ansible.builtin.file) module also work here.
    others: String?
    /// The file to modify.
    /// Before Ansible 2.3 this option was only usable as O(dest), O(destfile) and O(name).
    path: String
    /// The regular expression to look for in the contents of the file.
    /// Uses Python regular expressions; see U(https://docs.python.org/3/library/re.html).
    /// Uses MULTILINE mode, which means V(^) and V($) match the beginning and end of the file, as well as the beginning and end respectively of I(each line) of the file.
    /// Does not use DOTALL, which means the V(.) special character matches any character I(except newlines). A common mistake is to assume that a negated character set like V([^#]) will also not match newlines.
    /// In order to exclude newlines, they must be added to the set like V([^#\\n]).
    /// Note that, as of Ansible 2.0, short form tasks should have any escape sequences backslash-escaped in order to prevent them being parsed as string literal escapes. See the examples.
    regexp: String
    /// The string to replace regexp matches.
    /// May contain backreferences that will get expanded with the regexp capture groups if the regexp matches.
    /// If not set, matches are removed entirely.
    /// Backreferences can be used ambiguously like V(\\1), or explicitly like V(\\g<1>).
    replace: String?
}

/// Task class for replace
class ReplaceTask extends Playbook.Task {

    `ansible.builtin.replace`: Dynamic

    function GetModuleName(): String = "ansible.builtin.replace"
    function GetModuleOptions(): Dynamic = this.`ansible.builtin.replace`
}

/// TaskBuilder class for replace
class Replace extends Playbook.TaskBuilder {
    /// Options for ansible.builtin.replace
    options: ReplaceOptions?

    function Task(): ReplaceTask = this
        .toMap()
        .put("ansible.builtin.replace", (this.options.ifNonNull((it) -> it.toDynamic()) ?? new Dynamic {})
            |> (this.options_mixin ?? new Mixin {}))
        .toTyped(ReplaceTask)
}

/// Adds or removes a gpg key from the rpm db
/// Adds or removes (rpm --import) a gpg key to your rpm database.
class RpmKeyOptions {
    /// The long-form fingerprint of the key being imported.
    /// This will be used to verify the specified key.
    fingerprint: String?
    /// Key that will be modified. Can be a url, a file on the managed node, or a keyid if the key already exists in the database.
    key: String
    /// If the key will be imported or removed from the rpm db.
    state: ("absent"|"present")?
    /// If V(false) and the O(key) is a url starting with V(https), SSL certificates will not be validated.
    /// This should only be used on personally controlled sites using self-signed certificates.
    validate_certs: Boolean?
}

/// Task class for rpm_key
class RpmKeyTask extends Playbook.Task {

    `ansible.builtin.rpm_key`: Dynamic

    function GetModuleName(): String = "ansible.builtin.rpm_key"
    function GetModuleOptions(): Dynamic = this.`ansible.builtin.rpm_key`
}

/// TaskBuilder class for rpm_key
class RpmKey extends Playbook.TaskBuilder {
    /// Options for ansible.builtin.rpm_key
    options: RpmKeyOptions?

    function Task(): RpmKeyTask = this
        .toMap()
        .put("ansible.builtin.rpm_key", (this.options.ifNonNull((it) -> it.toDynamic()) ?? new Dynamic {})
            |> (this.options_mixin ?? new Mixin {}))
        .toTyped(RpmKeyTask)
}

/// Runs a local script on a remote node after transferring it
/// The M(ansible.builtin.script) module takes the script name followed by a list of space-delimited arguments.
/// Either a free-form command or O(cmd) parameter is required, see the examples.
/// The local script at the path will be transferred to the remote node and then executed.
/// The given script will be processed through the shell environment on the remote node.
/// This module does not require Python on the remote system, much like the M(ansible.builtin.raw) module.
/// This module is also supported for Windows targets.
class ScriptOptions {
    /// Change into this directory on the remote node before running the script.
    chdir: String?
    /// Path to the local script to run followed by optional arguments.
    cmd: String?
    /// A filename on the remote node, when it already exists, this step will B(not) be run.
    creates: String?
    /// Name or path of an executable to invoke the script with.
    executable: String?
    /// Path to the local script file followed by optional arguments.
    free_form: String?
    /// A filename on the remote node, when it does not exist, this step will B(not) be run.
    removes: String?
}

/// Task class for script
class ScriptTask extends Playbook.Task {

    `ansible.builtin.script`: Dynamic

    function GetModuleName(): String = "ansible.builtin.script"
    function GetModuleOptions(): Dynamic = this.`ansible.builtin.script`
}

/// TaskBuilder class for script
class Script extends Playbook.TaskBuilder {
    /// Options for ansible.builtin.script
    options: ScriptOptions?

    function Task(): ScriptTask = this
        .toMap()
        .put("ansible.builtin.script", (this.options.ifNonNull((it) -> it.toDynamic()) ?? new Dynamic {})
            |> (this.options_mixin ?? new Mixin {}))
        .toTyped(ScriptTask)
}

/// Manage services
/// Controls services on remote hosts. Supported init systems include BSD init, OpenRC, SysV, Solaris SMF, systemd, upstart.
/// This module acts as a proxy to the underlying service manager module. While all arguments will be passed to the underlying module, not all modules support the same arguments. This documentation only covers the minimum intersection of module arguments that all service manager modules support.
/// This module is a proxy for multiple more specific service manager modules (such as M(ansible.builtin.systemd) and M(ansible.builtin.sysvinit)). This allows management of a heterogeneous environment of machines without creating a specific task for each service manager. The module to be executed is determined by the O(use) option, which defaults to the service manager discovered by M(ansible.builtin.setup).  If M(ansible.builtin.setup) was not yet run, this module may run it.
/// For Windows targets, use the M(ansible.windows.win_service) module instead.
class ServiceOptions {
    /// Additional arguments provided on the command line.
    /// While using remote hosts with systemd this setting will be ignored.
    arguments: String?
    /// Whether the service should start on boot.
    /// B(At least one of state and enabled are required.)
    enabled: Boolean?
    /// Name of the service.
    name: String
    /// If the service does not respond to the status command, name a substring to look for as would be found in the output of the I(ps) command as a stand-in for a status result.
    /// If the string is found, the service will be assumed to be started.
    /// While using remote hosts with systemd this setting will be ignored.
    pattern: String?
    /// For OpenRC init scripts (e.g. Gentoo) only.
    /// The runlevel that this service belongs to.
    /// While using remote hosts with systemd this setting will be ignored.
    runlevel: String?
    /// If the service is being V(restarted) then sleep this many seconds between the stop and start command.
    /// This helps to work around badly-behaving init scripts that exit immediately after signaling a process to stop.
    /// Not all service managers support sleep, i.e when using systemd this setting will be ignored.
    sleep: Int?
    /// V(started)/V(stopped) are idempotent actions that will not run commands unless necessary.
    /// V(restarted) will always bounce the service.
    /// V(reloaded) will always reload.
    /// B(At least one of state and enabled are required.)
    /// Note that reloaded will start the service if it is not already started, even if your chosen init system wouldn't normally.
    state: ("reloaded"|"restarted"|"started"|"stopped")?
    /// The service module actually uses system specific modules, normally through auto detection, this setting can force a specific module.
    /// Normally it uses the value of the 'ansible_service_mgr' fact and falls back to the old 'service' module when none matching is found.
    /// The 'old service module' still uses autodetection and in no way does it correspond to the C(service) command.
    use: String?
}

/// Task class for service
class ServiceTask extends Playbook.Task {

    `ansible.builtin.service`: Dynamic

    function GetModuleName(): String = "ansible.builtin.service"
    function GetModuleOptions(): Dynamic = this.`ansible.builtin.service`
}

/// TaskBuilder class for service
class Service extends Playbook.TaskBuilder {
    /// Options for ansible.builtin.service
    options: ServiceOptions?

    function Task(): ServiceTask = this
        .toMap()
        .put("ansible.builtin.service", (this.options.ifNonNull((it) -> it.toDynamic()) ?? new Dynamic {})
            |> (this.options_mixin ?? new Mixin {}))
        .toTyped(ServiceTask)
}

/// Return service state information as fact data
/// Return service state information as fact data for various service management utilities.
class ServiceFactsOptions {
}

/// Task class for service_facts
class ServiceFactsTask extends Playbook.Task {

    `ansible.builtin.service_facts`: Dynamic

    function GetModuleName(): String = "ansible.builtin.service_facts"
    function GetModuleOptions(): Dynamic = this.`ansible.builtin.service_facts`
}

/// TaskBuilder class for service_facts
class ServiceFacts extends Playbook.TaskBuilder {
    /// Options for ansible.builtin.service_facts
    options: ServiceFactsOptions?

    function Task(): ServiceFactsTask = this
        .toMap()
        .put("ansible.builtin.service_facts", (this.options.ifNonNull((it) -> it.toDynamic()) ?? new Dynamic {})
            |> (this.options_mixin ?? new Mixin {}))
        .toTyped(ServiceFactsTask)
}

/// Set host variable(s) and fact(s).
/// This action allows setting variables associated to the current host.
/// These variables will be available to subsequent plays during an ansible-playbook run via the host they were set on.
/// Set O(cacheable) to V(true) to save variables across executions using a fact cache. Variables will keep the set_fact precedence for the current run, but will used 'cached fact' precedence for subsequent ones.
/// Per the standard Ansible variable precedence rules, other types of variables have a higher priority, so this value may be overridden.
class SetFactOptions {
    /// This boolean converts the variable into an actual 'fact' which will also be added to the fact cache. It does not enable fact caching across runs, it just means it will work with it if already enabled.
    /// Normally this module creates 'host level variables' and has much higher precedence, this option changes the nature and precedence (by 7 steps) of the variable created. U(https://docs.ansible.com/ansible/latest/user_guide/playbooks_variables.html#variable-precedence-where-should-i-put-a-variable)
    /// This actually creates 2 copies of the variable, a normal 'set_fact' host variable with high precedence and a lower 'ansible_fact' one that is available for persistence via the facts cache plugin. This creates a possibly confusing interaction with C(meta: clear_facts) as it will remove the 'ansible_fact' but not the host variable.
    cacheable: Boolean?
    /// The M(ansible.builtin.set_fact) module takes C(key=value) pairs or C(key: value) (YAML notation) as variables to set in the playbook scope. The 'key' is the resulting variable name and the value is, of course, the value of said variable.
    /// You can create multiple variables at once, by supplying multiple pairs, but do NOT mix notations.
    key_value: Any
}

/// Task class for set_fact
class SetFactTask extends Playbook.Task {

    `ansible.builtin.set_fact`: Dynamic

    function GetModuleName(): String = "ansible.builtin.set_fact"
    function GetModuleOptions(): Dynamic = this.`ansible.builtin.set_fact`
}

/// TaskBuilder class for set_fact
class SetFact extends Playbook.TaskBuilder {
    /// Options for ansible.builtin.set_fact
    options: SetFactOptions?

    function Task(): SetFactTask = this
        .toMap()
        .put("ansible.builtin.set_fact", (this.options.ifNonNull((it) -> it.toDynamic()) ?? new Dynamic {})
            |> (this.options_mixin ?? new Mixin {}))
        .toTyped(SetFactTask)
}

/// Define and display stats for the current ansible run
/// This module allows setting/accumulating stats on the current ansible run, either per host or for all hosts in the run.
/// This module is also supported for Windows targets.
class SetStatsOptions {
    /// Whether the provided value is aggregated to the existing stat V(true) or will replace it V(false).
    aggregate: Boolean?
    /// A dictionary of which each key represents a stat (or variable) you want to keep track of.
    data: Any
    /// whether the stats are per host or for all hosts in the run.
    per_host: Boolean?
}

/// Task class for set_stats
class SetStatsTask extends Playbook.Task {

    `ansible.builtin.set_stats`: Dynamic

    function GetModuleName(): String = "ansible.builtin.set_stats"
    function GetModuleOptions(): Dynamic = this.`ansible.builtin.set_stats`
}

/// TaskBuilder class for set_stats
class SetStats extends Playbook.TaskBuilder {
    /// Options for ansible.builtin.set_stats
    options: SetStatsOptions?

    function Task(): SetStatsTask = this
        .toMap()
        .put("ansible.builtin.set_stats", (this.options.ifNonNull((it) -> it.toDynamic()) ?? new Dynamic {})
            |> (this.options_mixin ?? new Mixin {}))
        .toTyped(SetStatsTask)
}

/// Gathers facts about remote hosts
/// This module is automatically called by playbooks to gather useful variables about remote hosts that can be used in playbooks. It can also be executed directly by C(/usr/bin/ansible) to check what variables are available to a host. Ansible provides many I(facts) about the system, automatically.
/// This module is also supported for Windows targets.
class SetupOptions {
    /// Path used for local ansible facts (C(*.fact)) - files in this dir will be run (if executable) and their results be added to C(ansible_local) facts. If a file is not executable it is read instead. File/results format can be JSON or INI-format. The default O(fact_path) can be specified in C(ansible.cfg) for when setup is automatically called as part of C(gather_facts). NOTE - For windows clients, the results will be added to a variable named after the local file (without extension suffix), rather than C(ansible_local).
    /// Since Ansible 2.1, Windows hosts can use O(fact_path). Make sure that this path exists on the target host. Files in this path MUST be PowerShell scripts C(.ps1) which outputs an object. This object will be formatted by Ansible as json so the script should be outputting a raw hashtable, array, or other primitive object.
    fact_path: String?
    /// If supplied, only return facts that match one of the shell-style (fnmatch) pattern. An empty list basically means 'no filter'. As of Ansible 2.11, the type has changed from string to list and the default has became an empty list. A simple string is still accepted and works as a single pattern. The behaviour prior to Ansible 2.11 remains.
    filter: Listing<String>?
    /// If supplied, restrict the additional facts collected to the given subset. Possible values: V(all), V(all_ipv4_addresses), V(all_ipv6_addresses), V(apparmor), V(architecture), V(caps), V(chroot),V(cmdline), V(date_time), V(default_ipv4), V(default_ipv6), V(devices), V(distribution), V(distribution_major_version), V(distribution_release), V(distribution_version), V(dns), V(effective_group_ids), V(effective_user_id), V(env), V(facter), V(fips), V(hardware), V(interfaces), V(is_chroot), V(iscsi), V(kernel), V(local), V(lsb), V(machine), V(machine_id), V(mounts), V(network), V(ohai), V(os_family), V(pkg_mgr), V(platform), V(processor), V(processor_cores), V(processor_count), V(python), V(python_version), V(real_user_id), V(selinux), V(service_mgr), V(ssh_host_key_dsa_public), V(ssh_host_key_ecdsa_public), V(ssh_host_key_ed25519_public), V(ssh_host_key_rsa_public), V(ssh_host_pub_keys), V(ssh_pub_keys), V(system), V(system_capabilities), V(system_capabilities_enforced), V(user), V(user_dir), V(user_gecos), V(user_gid), V(user_id), V(user_shell), V(user_uid), V(virtual), V(virtualization_role), V(virtualization_type). Can specify a list of values to specify a larger subset. Values can also be used with an initial C(!) to specify that that specific subset should not be collected.  For instance: V(!hardware,!network,!virtual,!ohai,!facter). If V(!all) is specified then only the min subset is collected. To avoid collecting even the min subset, specify V(!all,!min). To collect only specific facts, use V(!all,!min), and specify the particular fact subsets. Use the filter parameter if you do not want to display some collected facts.
    gather_subset: Listing<String>?
    /// Set the default timeout in seconds for individual fact gathering.
    gather_timeout: Int?
}

/// Task class for setup
class SetupTask extends Playbook.Task {

    `ansible.builtin.setup`: Dynamic

    function GetModuleName(): String = "ansible.builtin.setup"
    function GetModuleOptions(): Dynamic = this.`ansible.builtin.setup`
}

/// TaskBuilder class for setup
class Setup extends Playbook.TaskBuilder {
    /// Options for ansible.builtin.setup
    options: SetupOptions?

    function Task(): SetupTask = this
        .toMap()
        .put("ansible.builtin.setup", (this.options.ifNonNull((it) -> it.toDynamic()) ?? new Dynamic {})
            |> (this.options_mixin ?? new Mixin {}))
        .toTyped(SetupTask)
}

/// Execute shell commands on targets
/// The M(ansible.builtin.shell) module takes the command name followed by a list of space-delimited arguments.
/// Either a free form command or O(cmd) parameter is required, see the examples.
/// It is almost exactly like the M(ansible.builtin.command) module but runs the command through a shell (C(/bin/sh)) on the remote node.
/// For Windows targets, use the M(ansible.windows.win_shell) module instead.
class ShellOptions {
    /// Change into this directory before running the command.
    chdir: String?
    /// The command to run followed by optional arguments.
    cmd: String?
    /// A filename, when it already exists, this step will B(not) be run.
    creates: String?
    /// Change the shell used to execute the command.
    /// This expects an absolute path to the executable.
    executable: String?
    /// The shell module takes a free form command to run, as a string.
    /// There is no actual parameter named 'free form'.
    /// See the examples on how to use this module.
    free_form: String?
    /// A filename, when it does not exist, this step will B(not) be run.
    removes: String?
    /// Set the stdin of the command directly to the specified value.
    stdin: String?
    /// Whether to append a newline to stdin data.
    stdin_add_newline: Boolean?
}

/// Task class for shell
class ShellTask extends Playbook.Task {

    `ansible.builtin.shell`: Dynamic

    function GetModuleName(): String = "ansible.builtin.shell"
    function GetModuleOptions(): Dynamic = this.`ansible.builtin.shell`
}

/// TaskBuilder class for shell
class Shell extends Playbook.TaskBuilder {
    /// Options for ansible.builtin.shell
    options: ShellOptions?

    function Task(): ShellTask = this
        .toMap()
        .put("ansible.builtin.shell", (this.options.ifNonNull((it) -> it.toDynamic()) ?? new Dynamic {})
            |> (this.options_mixin ?? new Mixin {}))
        .toTyped(ShellTask)
}

/// Slurps a file from remote nodes
/// This module works like M(ansible.builtin.fetch). It is used for fetching a base64- encoded blob containing the data in a remote file.
/// This module is also supported for Windows targets.
class SlurpOptions {
    /// The file on the remote system to fetch. This I(must) be a file, not a directory.
    src: String
}

/// Task class for slurp
class SlurpTask extends Playbook.Task {

    `ansible.builtin.slurp`: Dynamic

    function GetModuleName(): String = "ansible.builtin.slurp"
    function GetModuleOptions(): Dynamic = this.`ansible.builtin.slurp`
}

/// TaskBuilder class for slurp
class Slurp extends Playbook.TaskBuilder {
    /// Options for ansible.builtin.slurp
    options: SlurpOptions?

    function Task(): SlurpTask = this
        .toMap()
        .put("ansible.builtin.slurp", (this.options.ifNonNull((it) -> it.toDynamic()) ?? new Dynamic {})
            |> (this.options_mixin ?? new Mixin {}))
        .toTyped(SlurpTask)
}

/// Retrieve file or file system status
/// Retrieves facts for a file similar to the Linux/Unix 'stat' command.
/// For Windows targets, use the M(ansible.windows.win_stat) module instead.
class StatOptions {
    /// Algorithm to determine checksum of file.
    /// Will throw an error if the host is unable to use specified algorithm.
    /// The remote host has to support the hashing method specified, V(md5) can be unavailable if the host is FIPS-140 compliant.
    checksum_algorithm: ("md5"|"sha1"|"sha224"|"sha256"|"sha384"|"sha512")?
    /// Whether to follow symlinks.
    follow: Boolean?
    /// Get file attributes using lsattr tool if present.
    get_attributes: Boolean?
    /// Whether to return a checksum of the file.
    get_checksum: Boolean?
    /// Use file magic and return data about the nature of the file. this uses the 'file' utility found on most Linux/Unix systems.
    /// This will add both RV(stat.mimetype) and RV(stat.charset) fields to the return, if possible.
    /// In Ansible 2.3 this option changed from O(mime) to O(get_mime) and the default changed to V(true).
    get_mime: Boolean?
    /// The full path of the file/object to get the facts of.
    path: String
}

/// Task class for stat
class StatTask extends Playbook.Task {

    `ansible.builtin.stat`: Dynamic

    function GetModuleName(): String = "ansible.builtin.stat"
    function GetModuleOptions(): Dynamic = this.`ansible.builtin.stat`
}

/// TaskBuilder class for stat
class Stat extends Playbook.TaskBuilder {
    /// Options for ansible.builtin.stat
    options: StatOptions?

    function Task(): StatTask = this
        .toMap()
        .put("ansible.builtin.stat", (this.options.ifNonNull((it) -> it.toDynamic()) ?? new Dynamic {})
            |> (this.options_mixin ?? new Mixin {}))
        .toTyped(StatTask)
}

/// Deploys a subversion repository
/// Deploy given repository URL / revision to dest. If dest exists, update to the specified revision, otherwise perform a checkout.
class SubversionOptions {
    /// If V(false), do not check out the repository if it does not exist locally.
    checkout: Boolean?
    /// Absolute path where the repository should be deployed.
    /// The destination directory must be specified unless O(checkout=no), O(update=no), and O(export=no).
    dest: String?
    /// Path to svn executable to use. If not supplied, the normal mechanism for resolving binary paths will be used.
    executable: String?
    /// If V(true), do export instead of checkout/update.
    export: Boolean?
    /// If V(true), modified files will be discarded. If V(false), module will fail if it encounters modified files. Prior to 1.9 the default was V(true).
    force: Boolean?
    /// If the directory exists, then the working copy will be checked-out over-the-top using svn checkout --force; if force is specified then existing files with different content are reverted.
    in_place: Boolean?
    /// C(--password) parameter passed to svn when svn is less than version 1.10.0. This is not secure and the password will be leaked to argv.
    /// C(--password-from-stdin) parameter when svn is greater or equal to version 1.10.0.
    password: String?
    /// The subversion URL to the repository.
    repo: String
    /// Specific revision to checkout.
    revision: String?
    /// If V(false), do not call svn switch before update.
    `switch`: Boolean?
    /// If V(false), do not retrieve new revisions from the origin repository.
    update: Boolean?
    /// C(--username) parameter passed to svn.
    username: String?
    /// If V(false), passes the C(--trust-server-cert) flag to svn.
    /// If V(true), does not pass the flag.
    validate_certs: Boolean?
}

/// Task class for subversion
class SubversionTask extends Playbook.Task {

    `ansible.builtin.subversion`: Dynamic

    function GetModuleName(): String = "ansible.builtin.subversion"
    function GetModuleOptions(): Dynamic = this.`ansible.builtin.subversion`
}

/// TaskBuilder class for subversion
class Subversion extends Playbook.TaskBuilder {
    /// Options for ansible.builtin.subversion
    options: SubversionOptions?

    function Task(): SubversionTask = this
        .toMap()
        .put("ansible.builtin.subversion", (this.options.ifNonNull((it) -> it.toDynamic()) ?? new Dynamic {})
            |> (this.options_mixin ?? new Mixin {}))
        .toTyped(SubversionTask)
}

/// Manage systemd units
/// Controls systemd units (services, timers, and so on) on remote hosts.
class SystemdServiceOptions {
    /// Run daemon_reexec command before doing any other operations, the systemd manager will serialize the manager state.
    daemon_reexec: Boolean?
    /// Run daemon-reload before doing any other operations, to make sure systemd has read any changes.
    /// When set to V(true), runs daemon-reload even if the module does not start or stop anything.
    daemon_reload: Boolean?
    /// Whether the unit should start on boot. B(At least one of state and enabled are required.)
    enabled: Boolean?
    /// Whether to override existing symlinks.
    force: Boolean?
    /// Whether the unit should be masked or not, a masked unit is impossible to start.
    masked: Boolean?
    /// Name of the unit. This parameter takes the name of exactly one unit to work with.
    /// When no extension is given, it is implied to a C(.service) as systemd.
    /// When using in a chroot environment you always need to specify the name of the unit with the extension. For example, C(crond.service).
    name: String?
    /// Do not synchronously wait for the requested operation to finish. Enqueued job will continue without Ansible blocking on its completion.
    no_block: Boolean?
    /// Run systemctl within a given service manager scope, either as the default system scope V(system), the current user's scope V(user), or the scope of all users V(global).
    /// For systemd to work with 'user', the executing user must have its own instance of dbus started and accessible (systemd requirement).
    /// The user dbus process is normally started during normal login, but not during the run of Ansible tasks. Otherwise you will probably get a 'Failed to connect to bus: no such file or directory' error.
    /// The user must have access, normally given via setting the C(XDG_RUNTIME_DIR) variable, see example below.
    scope: ("system"|"user"|"global")?
    /// V(started)/V(stopped) are idempotent actions that will not run commands unless necessary. V(restarted) will always bounce the unit. V(reloaded) will always reload and if the service is not running at the moment of the reload, it is started.
    state: ("reloaded"|"restarted"|"started"|"stopped")?
}

/// Task class for systemd_service
class SystemdServiceTask extends Playbook.Task {

    `ansible.builtin.systemd_service`: Dynamic

    function GetModuleName(): String = "ansible.builtin.systemd_service"
    function GetModuleOptions(): Dynamic = this.`ansible.builtin.systemd_service`
}

/// TaskBuilder class for systemd_service
class SystemdService extends Playbook.TaskBuilder {
    /// Options for ansible.builtin.systemd_service
    options: SystemdServiceOptions?

    function Task(): SystemdServiceTask = this
        .toMap()
        .put("ansible.builtin.systemd_service", (this.options.ifNonNull((it) -> it.toDynamic()) ?? new Dynamic {})
            |> (this.options_mixin ?? new Mixin {}))
        .toTyped(SystemdServiceTask)
}

/// Manage SysV services.
/// Controls services on target hosts that use the SysV init system.
class SysvinitOptions {
    /// Additional arguments provided on the command line that some init scripts accept.
    arguments: String?
    /// Have the module daemonize as the service itself might not do so properly.
    /// This is useful with badly written init scripts or daemons, which commonly manifests as the task hanging as it is still holding the tty or the service dying when the task is over as the connection closes the session.
    daemonize: Boolean?
    /// Whether the service should start on boot. B(At least one of state and enabled are required.)
    enabled: Boolean?
    /// Name of the service.
    name: String
    /// A substring to look for as would be found in the output of the I(ps) command as a stand-in for a status result.
    /// If the string is found, the service will be assumed to be running.
    /// This option is mainly for use with init scripts that don't support the 'status' option.
    pattern: String?
    /// The runlevels this script should be enabled/disabled from.
    /// Use this to override the defaults set by the package or init script itself.
    runlevels: Listing<String>?
    /// If the service is being V(restarted) or V(reloaded) then sleep this many seconds between the stop and start command. This helps to workaround badly behaving services.
    sleep: Int?
    /// V(started)/V(stopped) are idempotent actions that will not run commands unless necessary. Not all init scripts support V(restarted) nor V(reloaded) natively, so these will both trigger a stop and start as needed.
    state: ("started"|"stopped"|"restarted"|"reloaded")?
}

/// Task class for sysvinit
class SysvinitTask extends Playbook.Task {

    `ansible.builtin.sysvinit`: Dynamic

    function GetModuleName(): String = "ansible.builtin.sysvinit"
    function GetModuleOptions(): Dynamic = this.`ansible.builtin.sysvinit`
}

/// TaskBuilder class for sysvinit
class Sysvinit extends Playbook.TaskBuilder {
    /// Options for ansible.builtin.sysvinit
    options: SysvinitOptions?

    function Task(): SysvinitTask = this
        .toMap()
        .put("ansible.builtin.sysvinit", (this.options.ifNonNull((it) -> it.toDynamic()) ?? new Dynamic {})
            |> (this.options_mixin ?? new Mixin {}))
        .toTyped(SysvinitTask)
}

/// Creates temporary files and directories
/// The M(ansible.builtin.tempfile) module creates temporary files and directories. C(mktemp) command takes different parameters on various systems, this module helps to avoid troubles related to that. Files/directories created by module are accessible only by creator. In case you need to make them world-accessible you need to use M(ansible.builtin.file) module.
/// For Windows targets, use the M(ansible.windows.win_tempfile) module instead.
class TempfileOptions {
    /// Location where temporary file or directory should be created.
    /// If path is not specified, the default system temporary directory will be used.
    path: String?
    /// Prefix of file/directory name created by module.
    prefix: String?
    /// Whether to create file or directory.
    state: ("directory"|"file")?
    /// Suffix of file/directory name created by module.
    suffix: String?
}

/// Task class for tempfile
class TempfileTask extends Playbook.Task {

    `ansible.builtin.tempfile`: Dynamic

    function GetModuleName(): String = "ansible.builtin.tempfile"
    function GetModuleOptions(): Dynamic = this.`ansible.builtin.tempfile`
}

/// TaskBuilder class for tempfile
class Tempfile extends Playbook.TaskBuilder {
    /// Options for ansible.builtin.tempfile
    options: TempfileOptions?

    function Task(): TempfileTask = this
        .toMap()
        .put("ansible.builtin.tempfile", (this.options.ifNonNull((it) -> it.toDynamic()) ?? new Dynamic {})
            |> (this.options_mixin ?? new Mixin {}))
        .toTyped(TempfileTask)
}

/// Template a file out to a target host
class TemplateOptions {
    /// Determine whether symbolic links should be followed.
    /// When set to V(true) symbolic links will be followed, if they exist.
    /// When set to V(false) symbolic links will not be followed.
    /// Previous to Ansible 2.4, this was hardcoded as V(true).
    follow: Boolean?
}

/// Task class for template
class TemplateTask extends Playbook.Task {

    `ansible.builtin.template`: Dynamic

    function GetModuleName(): String = "ansible.builtin.template"
    function GetModuleOptions(): Dynamic = this.`ansible.builtin.template`
}

/// TaskBuilder class for template
class Template extends Playbook.TaskBuilder {
    /// Options for ansible.builtin.template
    options: TemplateOptions?

    function Task(): TemplateTask = this
        .toMap()
        .put("ansible.builtin.template", (this.options.ifNonNull((it) -> it.toDynamic()) ?? new Dynamic {})
            |> (this.options_mixin ?? new Mixin {}))
        .toTyped(TemplateTask)
}

/// Unpacks an archive after (optionally) copying it from the local machine
/// The M(ansible.builtin.unarchive) module unpacks an archive. It will not unpack a compressed file that does not contain an archive.
/// By default, it will copy the source file from the local system to the target before unpacking.
/// Set O(remote_src=yes) to unpack an archive which already exists on the target.
/// If checksum validation is desired, use M(ansible.builtin.get_url) or M(ansible.builtin.uri) instead to fetch the file and set O(remote_src=yes).
/// For Windows targets, use the M(community.windows.win_unzip) module instead.
class UnarchiveOptions {
    /// If true, the file is copied from local controller to the managed (remote) node, otherwise, the plugin will look for src archive on the managed machine.
    /// This option has been deprecated in favor of O(remote_src).
    /// This option is mutually exclusive with O(remote_src).
    copy: Boolean?
    /// If the specified absolute path (file or directory) already exists, this step will B(not) be run.
    /// The specified absolute path (file or directory) must be below the base path given with O(dest).
    creates: String?
    /// Remote absolute path where the archive should be unpacked.
    /// The given path must exist. Base directory is not created by this module.
    dest: String
    /// List the directory and file entries that you would like to exclude from the unarchive action.
    /// Mutually exclusive with O(include).
    exclude: Listing<String>?
    /// Specify additional options by passing in an array.
    /// Each space-separated command-line option should be a new element of the array. See examples.
    /// Command-line options with multiple elements must use multiple lines in the array, one for each element.
    extra_opts: Listing<String>?
    /// List of directory and file entries that you would like to extract from the archive. If O(include) is not empty, only files listed here will be extracted.
    /// Mutually exclusive with O(exclude).
    include: Listing<String>?
    /// Size of the volatile memory buffer that is used for extracting files from the archive in bytes.
    io_buffer_size: Int?
    /// Do not replace existing files that are newer than files from the archive.
    keep_newer: Boolean?
    /// If set to True, return the list of files that are contained in the tarball.
    list_files: Boolean?
    /// Set to V(true) to indicate the archived file is already on the remote system and not local to the Ansible controller.
    /// This option is mutually exclusive with O(copy).
    remote_src: Boolean?
    /// If O(remote_src=no) (default), local path to archive file to copy to the target server; can be absolute or relative. If O(remote_src=yes), path on the target server to existing archive file to unpack.
    /// If O(remote_src=yes) and O(src) contains V(://), the remote machine will download the file from the URL first. (version_added 2.0). This is only for simple cases, for full download support use the M(ansible.builtin.get_url) module.
    src: String
    /// This only applies if using a https URL as the source of the file.
    /// This should only set to V(false) used on personally controlled sites using self-signed certificate.
    /// Prior to 2.2 the code worked as if this was set to V(true).
    validate_certs: Boolean?
}

/// Task class for unarchive
class UnarchiveTask extends Playbook.Task {

    `ansible.builtin.unarchive`: Dynamic

    function GetModuleName(): String = "ansible.builtin.unarchive"
    function GetModuleOptions(): Dynamic = this.`ansible.builtin.unarchive`
}

/// TaskBuilder class for unarchive
class Unarchive extends Playbook.TaskBuilder {
    /// Options for ansible.builtin.unarchive
    options: UnarchiveOptions?

    function Task(): UnarchiveTask = this
        .toMap()
        .put("ansible.builtin.unarchive", (this.options.ifNonNull((it) -> it.toDynamic()) ?? new Dynamic {})
            |> (this.options_mixin ?? new Mixin {}))
        .toTyped(UnarchiveTask)
}

/// Interacts with webservices
/// Interacts with HTTP and HTTPS web services and supports Digest, Basic and WSSE HTTP authentication mechanisms.
/// For Windows targets, use the M(ansible.windows.win_uri) module instead.
class UriOptions {
    /// The body of the http request/response to the web service. If O(body_format) is set to V(json) it will take an already formatted JSON string or convert a data structure into JSON.
    /// If O(body_format) is set to V(form-urlencoded) it will convert a dictionary or list of tuples into an 'application/x-www-form-urlencoded' string. (Added in v2.7)
    /// If O(body_format) is set to V(form-multipart) it will convert a dictionary into 'multipart/form-multipart' body. (Added in v2.10)
    body: String?
    /// The serialization format of the body. When set to V(json), V(form-multipart), or V(form-urlencoded), encodes the body argument, if needed, and automatically sets the Content-Type header accordingly.
    /// As of v2.3 it is possible to override the C(Content-Type) header, when set to V(json) or V(form-urlencoded) via the O(headers) option.
    /// The 'Content-Type' header cannot be overridden when using V(form-multipart)
    /// V(form-urlencoded) was added in v2.7.
    /// V(form-multipart) was added in v2.10.
    body_format: ("form-urlencoded"|"json"|"raw"|"form-multipart")?
    /// PEM formatted file that contains a CA certificate to be used for validation
    ca_path: String?
    /// SSL/TLS Ciphers to use for the request.
    /// When a list is provided, all ciphers are joined in order with V(:)
    /// See the L(OpenSSL Cipher List Format,https://www.openssl.org/docs/manmaster/man1/openssl-ciphers.html#CIPHER-LIST-FORMAT) for more details.
    /// The available ciphers is dependent on the Python and OpenSSL/LibreSSL versions
    ciphers: Listing<String>?
    /// PEM formatted certificate chain file to be used for SSL client authentication.
    /// This file can also include the key as well, and if the key is included, O(client_key) is not required
    client_cert: String?
    /// PEM formatted file that contains your private key to be used for SSL client authentication.
    /// If O(client_cert) contains both the certificate and key, this option is not required.
    client_key: String?
    /// A filename, when it already exists, this step will not be run.
    creates: String?
    /// Whether to attempt to decompress gzip content-encoded responses
    decompress: Boolean?
    /// A path of where to download the file to (if desired). If O(dest) is a directory, the basename of the file on the remote server will be used.
    dest: String?
    /// Whether or not the URI module should follow redirects. V(all) will follow all redirects. V(safe) will follow only "safe" redirects, where "safe" means that the client is only doing a GET or HEAD on the URI to which it is being redirected. V(none) will not follow any redirects. Note that V(true) and V(false) choices are accepted for backwards compatibility, where V(true) is the equivalent of V(all) and V(false) is the equivalent of V(safe). V(true) and V(false) are deprecated and will be removed in some future version of Ansible.
    follow_redirects: ("all"|"no"|"none"|"safe"|"urllib2"|"yes")?
    /// If V(true) do not get a cached copy.
    force: Boolean?
    /// Force the sending of the Basic authentication header upon initial request.
    /// When this setting is V(false), this module will first try an unauthenticated request, and when the server replies with an C(HTTP 401) error, it will submit the Basic authentication header.
    /// When this setting is V(true), this module will immediately send a Basic authentication header on the first request.
    /// Use this setting in any of the following scenarios:
    /// You know the webservice endpoint always requires HTTP Basic authentication, and you want to speed up your requests by eliminating the first roundtrip.
    /// The web service does not properly send an HTTP 401 error to your client, so Ansible's HTTP library will not properly respond with HTTP credentials, and logins will fail.
    /// The webservice bans or rate-limits clients that cause any HTTP 401 errors.
    force_basic_auth: Boolean?
    /// Add custom HTTP headers to a request in the format of a YAML hash. As of Ansible 2.3 supplying C(Content-Type) here will override the header generated by supplying V(json) or V(form-urlencoded) for O(body_format).
    headers: Any?
    /// Header to identify as, generally appears in web server logs.
    http_agent: String?
    /// The HTTP method of the request or response.
    /// In more recent versions we do not restrict the method at the module level anymore but it still must be a valid method accepted by the service handling the request.
    method: String?
    /// If V(false), the module will search for the O(src) on the controller node.
    /// If V(true), the module will search for the O(src) on the managed (remote) node.
    remote_src: Boolean?
    /// A filename, when it does not exist, this step will not be run.
    removes: String?
    /// Whether or not to return the body of the response as a "content" key in the dictionary result no matter it succeeded or failed.
    /// Independently of this option, if the reported Content-type is "application/json", then the JSON is always loaded into a key called RV(ignore:json) in the dictionary results.
    return_content: Boolean?
    /// Path to file to be submitted to the remote server.
    /// Cannot be used with O(body).
    /// Should be used with O(force_basic_auth) to ensure success when the remote end sends a 401.
    src: String?
    /// A list of valid, numeric, HTTP status codes that signifies success of the request.
    status_code: Listing<Int>?
    /// The socket level timeout in seconds
    timeout: Int?
    /// Path to Unix domain socket to use for connection
    unix_socket: String?
    /// A list of header names that will not be sent on subsequent redirected requests. This list is case insensitive. By default all headers will be redirected. In some cases it may be beneficial to list headers such as C(Authorization) here to avoid potential credential exposure.
    unredirected_headers: Listing<String>?
    /// HTTP or HTTPS URL in the form (http|https)://host.domain[:port]/path
    url: String
    /// A password for the module to use for Digest, Basic or WSSE authentication.
    url_password: String?
    /// A username for the module to use for Digest, Basic or WSSE authentication.
    url_username: String?
    /// Use GSSAPI to perform the authentication, typically this is for Kerberos or Kerberos through Negotiate authentication.
    /// Requires the Python library L(gssapi,https://github.com/pythongssapi/python-gssapi) to be installed.
    /// Credentials for GSSAPI can be specified with O(url_username)/O(url_password) or with the GSSAPI env var C(KRB5CCNAME) that specified a custom Kerberos credential cache.
    /// NTLM authentication is B(not) supported even if the GSSAPI mech for NTLM has been installed.
    use_gssapi: Boolean?
    /// Determining whether to use credentials from ``~/.netrc`` file
    /// By default .netrc is used with Basic authentication headers
    /// When set to False, .netrc credentials are ignored
    use_netrc: Boolean?
    /// If V(false), it will not use a proxy, even if one is defined in an environment variable on the target hosts.
    use_proxy: Boolean?
    /// If V(false), SSL certificates will not be validated.
    /// This should only set to V(false) used on personally controlled sites using self-signed certificates.
    /// Prior to 1.9.2 the code defaulted to V(false).
    validate_certs: Boolean?
}

/// Task class for uri
class UriTask extends Playbook.Task {

    `ansible.builtin.uri`: Dynamic

    function GetModuleName(): String = "ansible.builtin.uri"
    function GetModuleOptions(): Dynamic = this.`ansible.builtin.uri`
}

/// TaskBuilder class for uri
class Uri extends Playbook.TaskBuilder {
    /// Options for ansible.builtin.uri
    options: UriOptions?

    function Task(): UriTask = this
        .toMap()
        .put("ansible.builtin.uri", (this.options.ifNonNull((it) -> it.toDynamic()) ?? new Dynamic {})
            |> (this.options_mixin ?? new Mixin {}))
        .toTyped(UriTask)
}

/// Manage user accounts
/// Manage user accounts and user attributes.
/// For Windows targets, use the M(ansible.windows.win_user) module instead.
class UserOptions {
    /// If V(true), add the user to the groups specified in O(groups).
    /// If V(false), user will only be added to the groups specified in O(groups), removing them from all other groups.
    append: Boolean?
    /// Sets the authorization of the user.
    /// Can set multiple authorizations using comma separation.
    /// To delete all authorizations, use O(authorization='').
    /// Currently supported on Illumos/Solaris. Does nothing when used with other platforms.
    authorization: String?
    /// Optionally sets the description (aka I(GECOS)) of user account.
    /// On macOS, this defaults to the O(name) option.
    comment: String?
    /// Unless set to V(false), a home directory will be made for the user when the account is created or if the home directory does not exist.
    /// Changed from O(createhome) to O(create_home) in Ansible 2.5.
    create_home: Boolean?
    /// An expiry time for the user in epoch, it will be ignored on platforms that do not support this.
    /// Currently supported on GNU/Linux, FreeBSD, and DragonFlyBSD.
    /// Since Ansible 2.6 you can remove the expiry time by specifying a negative value. Currently supported on GNU/Linux and FreeBSD.
    expires: Any?
    /// This only affects O(state=absent), it forces removal of the user and associated directories on supported platforms.
    /// The behavior is the same as C(userdel --force), check the man page for C(userdel) on your system for details and support.
    /// When used with O(generate_ssh_key=yes) this forces an existing key to be overwritten.
    force: Boolean?
    /// Whether to generate a SSH key for the user in question.
    /// This will B(not) overwrite an existing SSH key unless used with O(force=yes).
    generate_ssh_key: Boolean?
    /// Optionally sets the user's primary group (takes a group name).
    /// On macOS, this defaults to V('staff')
    group: String?
    /// A list of supplementary groups which the user is also a member of.
    /// By default, the user is removed from all other groups. Configure O(append) to modify this.
    /// When set to an empty string V(''), the user is removed from all groups except the primary group.
    /// Before Ansible 2.3, the only input format allowed was a comma separated string.
    groups: Listing<String>?
    /// macOS only, optionally hide the user from the login window and system preferences.
    /// The default will be V(true) if the O(system) option is used.
    `hidden`: Boolean?
    /// Optionally set the user's home directory.
    home: String?
    /// Forces the use of "local" command alternatives on platforms that implement it.
    /// This is useful in environments that use centralized authentication when you want to manipulate the local users (in other words, it uses C(luseradd) instead of C(useradd)).
    /// This will check C(/etc/passwd) for an existing account before invoking commands. If the local account database exists somewhere other than C(/etc/passwd), this setting will not work properly.
    /// This requires that the above commands as well as C(/etc/passwd) must exist on the target host, otherwise it will be a fatal error.
    `local`: Boolean?
    /// Optionally sets the user's login class, a feature of most BSD OSs.
    login_class: String?
    /// If set to V(true) when used with O(home), attempt to move the user's old home directory to the specified directory if it isn't there already and the old home exists.
    move_home: Boolean?
    /// Name of the user to create, remove or modify.
    name: String
    /// Optionally when used with the -u option, this option allows to change the user ID to a non-unique value.
    non_unique: Boolean?
    /// If provided, set the user's password to the provided encrypted hash (Linux) or plain text password (macOS).
    /// B(Linux/Unix/POSIX:) Enter the hashed password as the value.
    /// See L(FAQ entry,https://docs.ansible.com/ansible/latest/reference_appendices/faq.html#how-do-i-generate-encrypted-passwords-for-the-user-module) for details on various ways to generate the hash of a password.
    /// To create an account with a locked/disabled password on Linux systems, set this to V('!') or V('*').
    /// To create an account with a locked/disabled password on OpenBSD, set this to V('*************').
    /// B(OS X/macOS:) Enter the cleartext password as the value. Be sure to take relevant security precautions.
    /// On macOS, the password specified in the C(password) option will always be set, regardless of whether the user account already exists or not.
    /// When the password is passed as an argument, the C(user) module will always return changed to C(true) for macOS systems. Since macOS no longer provides access to the hashed passwords directly.
    password: String?
    /// Maximum number of days between password change.
    /// Supported on Linux only.
    password_expire_max: Int?
    /// Minimum number of days between password change.
    /// Supported on Linux only.
    password_expire_min: Int?
    /// Number of days of warning before password expires.
    /// Supported on Linux only.
    password_expire_warn: Int?
    /// Lock the password (C(usermod -L), C(usermod -U), C(pw lock)).
    /// Implementation differs by platform. This option does not always mean the user cannot login using other methods.
    /// This option does not disable the user, only lock the password.
    /// This must be set to V(False) in order to unlock a currently locked password. The absence of this parameter will not unlock a password.
    /// Currently supported on Linux, FreeBSD, DragonFlyBSD, NetBSD, OpenBSD.
    password_lock: Boolean?
    /// Sets the profile of the user.
    /// Can set multiple profiles using comma separation.
    /// To delete all the profiles, use O(profile='').
    /// Currently supported on Illumos/Solaris. Does nothing when used with other platforms.
    profile: String?
    /// This only affects O(state=absent), it attempts to remove directories associated with the user.
    /// The behavior is the same as C(userdel --remove), check the man page for details and support.
    remove: Boolean?
    /// Sets the role of the user.
    /// Can set multiple roles using comma separation.
    /// To delete all roles, use O(role='').
    /// Currently supported on Illumos/Solaris. Does nothing when used with other platforms.
    role: String?
    /// Optionally sets the seuser type (user_u) on selinux enabled systems.
    seuser: String?
    /// Optionally set the user's shell.
    /// On macOS, before Ansible 2.5, the default shell for non-system users was V(/usr/bin/false). Since Ansible 2.5, the default shell for non-system users on macOS is V(/bin/bash).
    /// See notes for details on how other operating systems determine the default shell by the underlying tool.
    shell: String?
    /// Optionally set a home skeleton directory.
    /// Requires O(create_home) option!
    skeleton: String?
    /// Optionally specify number of bits in SSH key to create.
    /// The default value depends on ssh-keygen.
    ssh_key_bits: Int?
    /// Optionally define the comment for the SSH key.
    ssh_key_comment: String?
    /// Optionally specify the SSH key filename.
    /// If this is a relative filename then it will be relative to the user's home directory.
    /// This parameter defaults to V(.ssh/id_rsa).
    ssh_key_file: String?
    /// Set a passphrase for the SSH key.
    /// If no passphrase is provided, the SSH key will default to having no passphrase.
    ssh_key_passphrase: String?
    /// Optionally specify the type of SSH key to generate.
    /// Available SSH key types will depend on implementation present on target host.
    ssh_key_type: String?
    /// Whether the account should exist or not, taking action if the state is different from what is stated.
    /// See this L(FAQ entry,https://docs.ansible.com/ansible/latest/reference_appendices/faq.html#running-on-macos-as-a-target) for additional requirements when removing users on macOS systems.
    state: ("absent"|"present")?
    /// When creating an account O(state=present), setting this to V(true) makes the user a system account.
    /// This setting cannot be changed on existing users.
    system: Boolean?
    /// Optionally sets the I(UID) of the user.
    uid: Int?
    /// Sets the umask of the user.
    /// Currently supported on Linux. Does nothing when used with other platforms.
    /// Requires O(local) is omitted or V(False).
    umask: String?
    /// V(always) will update passwords if they differ.
    /// V(on_create) will only set the password for newly created users.
    update_password: ("always"|"on_create")?
}

/// Task class for user
class UserTask extends Playbook.Task {

    `ansible.builtin.user`: Dynamic

    function GetModuleName(): String = "ansible.builtin.user"
    function GetModuleOptions(): Dynamic = this.`ansible.builtin.user`
}

/// TaskBuilder class for user
class User extends Playbook.TaskBuilder {
    /// Options for ansible.builtin.user
    options: UserOptions?

    function Task(): UserTask = this
        .toMap()
        .put("ansible.builtin.user", (this.options.ifNonNull((it) -> it.toDynamic()) ?? new Dynamic {})
            |> (this.options_mixin ?? new Mixin {}))
        .toTyped(UserTask)
}

/// Validate role argument specs.
/// This module validates role arguments with a defined argument specification.
class ValidateArgumentSpecOptions {
    /// A dictionary like AnsibleModule argument_spec. See R(argument spec definition,argument_spec)
    argument_spec: Any
    /// A dictionary of the arguments that will be validated according to argument_spec
    provided_arguments: Any?
}

/// Task class for validate_argument_spec
class ValidateArgumentSpecTask extends Playbook.Task {

    `ansible.builtin.validate_argument_spec`: Dynamic

    function GetModuleName(): String = "ansible.builtin.validate_argument_spec"
    function GetModuleOptions(): Dynamic = this.`ansible.builtin.validate_argument_spec`
}

/// TaskBuilder class for validate_argument_spec
class ValidateArgumentSpec extends Playbook.TaskBuilder {
    /// Options for ansible.builtin.validate_argument_spec
    options: ValidateArgumentSpecOptions?

    function Task(): ValidateArgumentSpecTask = this
        .toMap()
        .put("ansible.builtin.validate_argument_spec", (this.options.ifNonNull((it) -> it.toDynamic()) ?? new Dynamic {})
            |> (this.options_mixin ?? new Mixin {}))
        .toTyped(ValidateArgumentSpecTask)
}

/// Waits for a condition before continuing
/// You can wait for a set amount of time O(timeout), this is the default if nothing is specified or just O(timeout) is specified. This does not produce an error.
/// Waiting for a port to become available is useful for when services are not immediately available after their init scripts return which is true of certain Java application servers.
/// It is also useful when starting guests with the M(community.libvirt.virt) module and needing to pause until they are ready.
/// This module can also be used to wait for a regex match a string to be present in a file.
/// In Ansible 1.6 and later, this module can also be used to wait for a file to be available or absent on the filesystem.
/// In Ansible 1.8 and later, this module can also be used to wait for active connections to be closed before continuing, useful if a node is being rotated out of a load balancer pool.
/// For Windows targets, use the M(ansible.windows.win_wait_for) module instead.
class WaitForOptions {
    /// The list of TCP connection states which are counted as active connections.
    active_connection_states: Listing<String>?
    /// Maximum number of seconds to wait for a connection to happen before closing and retrying.
    connect_timeout: Int?
    /// Number of seconds to wait before starting to poll.
    delay: Int?
    /// List of hosts or IPs to ignore when looking for active TCP connections for V(drained) state.
    exclude_hosts: Listing<String>?
    /// A resolvable hostname or IP address to wait for.
    host: String?
    /// This overrides the normal error message from a failure to meet the required conditions.
    msg: String?
    /// Path to a file on the filesystem that must exist before continuing.
    /// O(path) and O(port) are mutually exclusive parameters.
    path: String?
    /// Port number to poll.
    /// O(path) and O(port) are mutually exclusive parameters.
    port: Int?
    /// Can be used to match a string in either a file or a socket connection.
    /// Defaults to a multiline regex.
    search_regex: String?
    /// Number of seconds to sleep between checks.
    /// Before Ansible 2.3 this was hardcoded to 1 second.
    sleep: Int?
    /// Either V(present), V(started), or V(stopped), V(absent), or V(drained).
    /// When checking a port V(started) will ensure the port is open, V(stopped) will check that it is closed, V(drained) will check for active connections.
    /// When checking for a file or a search string V(present) or V(started) will ensure that the file or string is present before continuing, V(absent) will check that file is absent or removed.
    state: ("absent"|"drained"|"present"|"started"|"stopped")?
    /// Maximum number of seconds to wait for, when used with another condition it will force an error.
    /// When used without other conditions it is equivalent of just sleeping.
    timeout: Int?
}

/// Task class for wait_for
class WaitForTask extends Playbook.Task {

    `ansible.builtin.wait_for`: Dynamic

    function GetModuleName(): String = "ansible.builtin.wait_for"
    function GetModuleOptions(): Dynamic = this.`ansible.builtin.wait_for`
}

/// TaskBuilder class for wait_for
class WaitFor extends Playbook.TaskBuilder {
    /// Options for ansible.builtin.wait_for
    options: WaitForOptions?

    function Task(): WaitForTask = this
        .toMap()
        .put("ansible.builtin.wait_for", (this.options.ifNonNull((it) -> it.toDynamic()) ?? new Dynamic {})
            |> (this.options_mixin ?? new Mixin {}))
        .toTyped(WaitForTask)
}

/// Waits until remote system is reachable/usable
/// Waits for a total of O(timeout) seconds.
/// Retries the transport connection after a timeout of O(connect_timeout).
/// Tests the transport connection every O(sleep) seconds.
/// This module makes use of internal ansible transport (and configuration) and the ping/win_ping module to guarantee correct end-to-end functioning.
/// This module is also supported for Windows targets.
class WaitForConnectionOptions {
    /// Maximum number of seconds to wait for a connection to happen before closing and retrying.
    connect_timeout: Int?
    /// Number of seconds to wait before starting to poll.
    delay: Int?
    /// Number of seconds to sleep between checks.
    sleep: Int?
    /// Maximum number of seconds to wait for.
    timeout: Int?
}

/// Task class for wait_for_connection
class WaitForConnectionTask extends Playbook.Task {

    `ansible.builtin.wait_for_connection`: Dynamic

    function GetModuleName(): String = "ansible.builtin.wait_for_connection"
    function GetModuleOptions(): Dynamic = this.`ansible.builtin.wait_for_connection`
}

/// TaskBuilder class for wait_for_connection
class WaitForConnection extends Playbook.TaskBuilder {
    /// Options for ansible.builtin.wait_for_connection
    options: WaitForConnectionOptions?

    function Task(): WaitForConnectionTask = this
        .toMap()
        .put("ansible.builtin.wait_for_connection", (this.options.ifNonNull((it) -> it.toDynamic()) ?? new Dynamic {})
            |> (this.options_mixin ?? new Mixin {}))
        .toTyped(WaitForConnectionTask)
}

/// Manages packages with the I(yum) package manager
/// Installs, upgrade, downgrades, removes, and lists packages and groups with the I(yum) package manager.
/// This module only works on Python 2. If you require Python 3 support see the M(ansible.builtin.dnf) module.
class YumOptions {
    /// Specify if the named package and version is allowed to downgrade a maybe already installed higher version of that package. Note that setting allow_downgrade=True can make this module behave in a non-idempotent way. The task could end up with a set of packages that does not match the complete list of specified packages to install (because dependencies between the downgraded package and others can cause changes to the packages which were in the earlier transaction).
    allow_downgrade: Boolean?
    /// If V(true), removes all "leaf" packages from the system that were originally installed as dependencies of user-installed packages but which are no longer required by any such package. Should be used alone or when O(state) is V(absent)
    /// NOTE: This feature requires yum >= 3.4.3 (RHEL/CentOS 7+)
    autoremove: Boolean?
    /// If set to V(true), and O(state=latest) then only installs updates that have been marked bugfix related.
    bugfix: Boolean?
    /// Tells yum to run entirely from system cache; does not download or update metadata.
    cacheonly: Boolean?
    /// The remote yum configuration file to use for the transaction.
    conf_file: String?
    /// Disable the excludes defined in YUM config files.
    /// If set to V(all), disables all excludes.
    /// If set to V(main), disable excludes defined in [main] in yum.conf.
    /// If set to V(repoid), disable excludes defined for given repo id.
    disable_excludes: String?
    /// Whether to disable the GPG checking of signatures of packages being installed. Has an effect only if O(state) is V(present) or V(latest).
    disable_gpg_check: Boolean?
    /// I(Plugin) name to disable for the install/update operation. The disabled plugins will not persist beyond the transaction.
    disable_plugin: Listing<String>?
    /// I(Repoid) of repositories to disable for the install/update operation. These repos will not persist beyond the transaction. When specifying multiple repos, separate them with a C(",").
    /// As of Ansible 2.7, this can alternatively be a list instead of C(",") separated string
    disablerepo: Listing<String>?
    /// Specifies an alternate directory to store packages.
    /// Has an effect only if O(download_only) is specified.
    download_dir: String?
    /// Only download the packages, do not install them.
    download_only: Boolean?
    /// I(Plugin) name to enable for the install/update operation. The enabled plugin will not persist beyond the transaction.
    enable_plugin: Listing<String>?
    /// I(Repoid) of repositories to enable for the install/update operation. These repos will not persist beyond the transaction. When specifying multiple repos, separate them with a C(",").
    /// As of Ansible 2.7, this can alternatively be a list instead of C(",") separated string
    enablerepo: Listing<String>?
    /// Package name(s) to exclude when state=present, or latest
    exclude: Listing<String>?
    /// If repoquery is not available, install yum-utils. If the system is registered to RHN or an RHN Satellite, repoquery allows for querying all channels assigned to the system. It is also required to use the 'list' parameter.
    /// NOTE: This will run and be logged as a separate yum transation which takes place before any other installation or removal.
    /// NOTE: This will use the system's default enabled repositories without regard for disablerepo/enablerepo given to the module.
    install_repoquery: Boolean?
    /// Will also install all packages linked by a weak dependency relation.
    /// NOTE: This feature requires yum >= 4 (RHEL/CentOS 8+)
    install_weak_deps: Boolean?
    /// Specifies an alternative installroot, relative to which all packages will be installed.
    installroot: String?
    /// Package name to run the equivalent of C(yum list --show-duplicates <package>) against. In addition to listing packages, use can also list the following: V(installed), V(updates), V(available) and V(repos).
    /// This parameter is mutually exclusive with O(name).
    list: String?
    /// Amount of time to wait for the yum lockfile to be freed.
    lock_timeout: Int?
    /// A package name or package specifier with version, like V(name-1.0).
    /// Comparison operators for package version are valid here C(>), C(<), C(>=), C(<=). Example - V(name>=1.0)
    /// If a previous version is specified, the task also needs to turn O(allow_downgrade) on. See the O(allow_downgrade) documentation for caveats with downgrading packages.
    /// When using O(state=latest), this can be V('*') which means run C(yum -y update).
    /// You can also pass a url or a local path to an rpm file (using O(state=present)). To operate on several packages this can accept a comma separated string of packages or (as of 2.0) a list of packages.
    name: Listing<String>?
    /// Specifies an alternative release from which all packages will be installed.
    releasever: String?
    /// If set to V(true), and O(state=latest) then only installs updates that have been marked security related.
    security: Boolean?
    /// Skip all unavailable packages or packages with broken dependencies without raising an error. Equivalent to passing the --skip-broken option.
    skip_broken: Boolean?
    /// Disables SSL validation of the repository server for this transaction.
    /// This should be set to V(false) if one of the configured repositories is using an untrusted or self-signed certificate.
    sslverify: Boolean?
    /// Whether to install (V(present) or V(installed), V(latest)), or remove (V(absent) or V(removed)) a package.
    /// V(present) and V(installed) will simply ensure that a desired package is installed.
    /// V(latest) will update the specified package if it's not of the latest available version.
    /// V(absent) and V(removed) will remove the specified package.
    /// Default is V(None), however in effect the default action is V(present) unless the O(autoremove) option is enabled for this module, then V(absent) is inferred.
    state: ("absent"|"installed"|"latest"|"present"|"removed")?
    /// Force yum to check if cache is out of date and redownload if needed. Has an effect only if O(state) is V(present) or V(latest).
    update_cache: Boolean?
    /// When using latest, only update installed packages. Do not install packages.
    /// Has an effect only if O(state) is V(latest)
    update_only: Boolean?
    /// This module supports V(yum) (as it always has), this is known as C(yum3)/C(YUM3)/C(yum-deprecated) by upstream yum developers. As of Ansible 2.7+, this module also supports C(YUM4), which is the "new yum" and it has an V(dnf) backend. As of ansible-core 2.15+, this module will auto select the backend based on the C(ansible_pkg_mgr) fact.
    /// By default, this module will select the backend based on the C(ansible_pkg_mgr) fact.
    use_backend: ("auto"|"yum"|"yum4"|"dnf"|"dnf4"|"dnf5")?
    /// This only applies if using a https url as the source of the rpm. e.g. for localinstall. If set to V(false), the SSL certificates will not be validated.
    /// This should only set to V(false) used on personally controlled sites using self-signed certificates as it avoids verifying the source site.
    /// Prior to 2.1 the code worked as if this was set to V(true).
    validate_certs: Boolean?
}

/// Task class for yum
class YumTask extends Playbook.Task {

    `ansible.builtin.yum`: Dynamic

    function GetModuleName(): String = "ansible.builtin.yum"
    function GetModuleOptions(): Dynamic = this.`ansible.builtin.yum`
}

/// TaskBuilder class for yum
class Yum extends Playbook.TaskBuilder {
    /// Options for ansible.builtin.yum
    options: YumOptions?

    function Task(): YumTask = this
        .toMap()
        .put("ansible.builtin.yum", (this.options.ifNonNull((it) -> it.toDynamic()) ?? new Dynamic {})
            |> (this.options_mixin ?? new Mixin {}))
        .toTyped(YumTask)
}

/// Add or remove YUM repositories
/// Add or remove YUM repositories in RPM-based Linux distributions.
/// If you wish to update an existing repository definition use M(community.general.ini_file) instead.
class YumRepositoryOptions {
    /// If set to V(true) Yum will download packages and metadata from this repo in parallel, if possible.
    /// In ansible-core 2.11, 2.12, and 2.13 the default value is V(true).
    /// This option has been deprecated in RHEL 8. If you're using one of the versions listed above, you can set this option to None to avoid passing an unknown configuration option.
    async: Boolean?
    /// Maximum available network bandwidth in bytes/second. Used with the O(throttle) option.
    /// If O(throttle) is a percentage and bandwidth is V(0) then bandwidth throttling will be disabled. If O(throttle) is expressed as a data rate (bytes/sec) then this option is ignored. Default is V(0) (no bandwidth throttling).
    bandwidth: String?
    /// URL to the directory where the yum repository's 'repodata' directory lives.
    /// It can also be a list of multiple URLs.
    /// This, the O(metalink) or O(mirrorlist) parameters are required if O(state) is set to V(present).
    baseurl: Listing<String>?
    /// Relative cost of accessing this repository. Useful for weighing one repo's packages as greater/less than any other.
    cost: String?
    /// When the relative size of deltarpm metadata vs pkgs is larger than this, deltarpm metadata is not downloaded from the repo. Note that you can give values over V(100), so V(200) means that the metadata is required to be half the size of the packages. Use V(0) to turn off this check, and always download metadata.
    deltarpm_metadata_percentage: String?
    /// When the relative size of delta vs pkg is larger than this, delta is not used. Use V(0) to turn off delta rpm processing. Local repositories (with file://O(baseurl)) have delta rpms turned off by default.
    deltarpm_percentage: String?
    /// A human readable string describing the repository. This option corresponds to the "name" property in the repo file.
    /// This parameter is only required if O(state) is set to V(present).
    description: String?
    /// This tells yum whether or not use this repository.
    /// Yum default value is V(true).
    enabled: Boolean?
    /// Determines whether yum will allow the use of package groups for this repository.
    /// Yum default value is V(true).
    enablegroups: Boolean?
    /// List of packages to exclude from updates or installs. This should be a space separated list. Shell globs using wildcards (for example V(*) and V(?)) are allowed.
    /// The list can also be a regular YAML array.
    exclude: Listing<String>?
    /// V(roundrobin) randomly selects a URL out of the list of URLs to start with and proceeds through each of them as it encounters a failure contacting the host.
    /// V(priority) starts from the first O(baseurl) listed and reads through them sequentially.
    failovermethod: ("roundrobin"|"priority")?
    /// File name without the C(.repo) extension to save the repo in. Defaults to the value of O(name).
    file: String?
    /// A URL pointing to the ASCII-armored CA key file for the repository.
    gpgcakey: String?
    /// Tells yum whether or not it should perform a GPG signature check on packages.
    /// No default setting. If the value is not set, the system setting from C(/etc/yum.conf) or system default of V(false) will be used.
    gpgcheck: Boolean?
    /// A URL pointing to the ASCII-armored GPG key file for the repository.
    /// It can also be a list of multiple URLs.
    gpgkey: Listing<String>?
    /// Determines how upstream HTTP caches are instructed to handle any HTTP downloads that Yum does.
    /// V(all) means that all HTTP downloads should be cached.
    /// V(packages) means that only RPM package downloads should be cached (but not repository metadata downloads).
    /// V(none) means that no HTTP downloads should be cached.
    http_caching: ("all"|"packages"|"none")?
    /// Include external configuration file. Both, local path and URL is supported. Configuration file will be inserted at the position of the C(include=) line. Included files may contain further include lines. Yum will abort with an error if an inclusion loop is detected.
    include: String?
    /// List of packages you want to only use from a repository. This should be a space separated list. Shell globs using wildcards (for example V(*) and V(?)) are allowed. Substitution variables (for example V($releasever)) are honored here.
    /// The list can also be a regular YAML array.
    includepkgs: Listing<String>?
    /// Determines how yum resolves host names.
    /// V(4) or V(IPv4) - resolve to IPv4 addresses only.
    /// V(6) or V(IPv6) - resolve to IPv6 addresses only.
    ip_resolve: ("4"|"6"|"IPv4"|"IPv6"|"whatever")?
    /// This tells yum whether or not HTTP/1.1 keepalive should be used with this repository. This can improve transfer speeds by using one connection when downloading multiple files from a repository.
    keepalive: Boolean?
    /// Either V(1) or V(0). Determines whether or not yum keeps the cache of headers and packages after successful installation.
    /// This parameter is deprecated and will be removed in version 2.20.
    keepcache: ("0"|"1")?
    /// Time (in seconds) after which the metadata will expire.
    /// Default value is 6 hours.
    metadata_expire: String?
    /// Filter the O(metadata_expire) time, allowing a trade of speed for accuracy if a command doesn't require it. Each yum command can specify that it requires a certain level of timeliness quality from the remote repos. from "I'm about to install/upgrade, so this better be current" to "Anything that's available is good enough".
    /// V(never) - Nothing is filtered, always obey O(metadata_expire).
    /// V(read-only:past) - Commands that only care about past information are filtered from metadata expiring. Eg. C(yum history) info (if history needs to lookup anything about a previous transaction, then by definition the remote package was available in the past).
    /// V(read-only:present) - Commands that are balanced between past and future. Eg. C(yum list yum).
    /// V(read-only:future) - Commands that are likely to result in running other commands which will require the latest metadata. Eg. C(yum check-update).
    /// Note that this option does not override "yum clean expire-cache".
    metadata_expire_filter: ("never"|"read-only:past"|"read-only:present"|"read-only:future")?
    /// Specifies a URL to a metalink file for the repomd.xml, a list of mirrors for the entire repository are generated by converting the mirrors for the repomd.xml file to a O(baseurl).
    /// This, the O(baseurl) or O(mirrorlist) parameters are required if O(state) is set to V(present).
    metalink: String?
    /// Specifies a URL to a file containing a list of baseurls.
    /// This, the O(baseurl) or O(metalink) parameters are required if O(state) is set to V(present).
    mirrorlist: String?
    /// Time (in seconds) after which the mirrorlist locally cached will expire.
    /// Default value is 6 hours.
    mirrorlist_expire: String?
    /// Disable module RPM filtering and make all RPMs from the repository available. The default is V(None).
    module_hotfixes: Boolean?
    /// Unique repository ID. This option builds the section name of the repository in the repo file.
    /// This parameter is only required if O(state) is set to V(present) or V(absent).
    name: String
    /// Password to use with the username for basic authentication.
    password: String?
    /// Enforce ordered protection of repositories. The value is an integer from 1 to 99.
    /// This option only works if the YUM Priorities plugin is installed.
    priority: String?
    /// Protect packages from updates from other repositories.
    protect: Boolean?
    /// URL to the proxy server that yum should use. Set to V(_none_) to disable the global proxy setting.
    proxy: String?
    /// Password for this proxy.
    proxy_password: String?
    /// Username to use for proxy.
    proxy_username: String?
    /// This tells yum whether or not it should perform a GPG signature check on the repodata from this repository.
    repo_gpgcheck: Boolean?
    /// Directory where the C(.repo) files will be stored.
    reposdir: String?
    /// Set the number of times any attempt to retrieve a file should retry before returning an error. Setting this to V(0) makes yum try forever.
    retries: String?
    /// Enables support for S3 repositories.
    /// This option only works if the YUM S3 plugin is installed.
    s3_enabled: Boolean?
    /// If set to V(true) yum will continue running if this repository cannot be contacted for any reason. This should be set carefully as all repos are consulted for any given command.
    skip_if_unavailable: Boolean?
    /// Whether yum should check the permissions on the paths for the certificates on the repository (both remote and local).
    /// If we can't read any of the files then yum will force O(skip_if_unavailable) to be V(true). This is most useful for non-root processes which use yum on repos that have client cert files which are readable only by root.
    ssl_check_cert_permissions: Boolean?
    /// Path to the directory containing the databases of the certificate authorities yum should use to verify SSL certificates.
    sslcacert: String?
    /// Path to the SSL client certificate yum should use to connect to repos/remote sites.
    sslclientcert: String?
    /// Path to the SSL client key yum should use to connect to repos/remote sites.
    sslclientkey: String?
    /// Defines whether yum should verify SSL certificates/hosts at all.
    sslverify: Boolean?
    /// State of the repo file.
    state: ("absent"|"present")?
    /// Enable bandwidth throttling for downloads.
    /// This option can be expressed as a absolute data rate in bytes/sec. An SI prefix (k, M or G) may be appended to the bandwidth value.
    throttle: String?
    /// Number of seconds to wait for a connection before timing out.
    timeout: String?
    /// When a repository id is displayed, append these yum variables to the string if they are used in the O(baseurl)/etc. Variables are appended in the order listed (and found).
    ui_repoid_vars: String?
    /// Username to use for basic authentication to a repo or really any url.
    username: String?
}

/// Task class for yum_repository
class YumRepositoryTask extends Playbook.Task {

    `ansible.builtin.yum_repository`: Dynamic

    function GetModuleName(): String = "ansible.builtin.yum_repository"
    function GetModuleOptions(): Dynamic = this.`ansible.builtin.yum_repository`
}

/// TaskBuilder class for yum_repository
class YumRepository extends Playbook.TaskBuilder {
    /// Options for ansible.builtin.yum_repository
    options: YumRepositoryOptions?

    function Task(): YumRepositoryTask = this
        .toMap()
        .put("ansible.builtin.yum_repository", (this.options.ifNonNull((it) -> it.toDynamic()) ?? new Dynamic {})
            |> (this.options_mixin ?? new Mixin {}))
        .toTyped(YumRepositoryTask)
}

